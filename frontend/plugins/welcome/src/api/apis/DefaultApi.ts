/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EntCourse,
    EntCourseFromJSON,
    EntCourseToJSON,
    EntDepartment,
    EntDepartmentFromJSON,
    EntDepartmentToJSON,
    EntDetail,
    EntDetailFromJSON,
    EntDetailToJSON,
    EntDisease,
    EntDiseaseFromJSON,
    EntDiseaseToJSON,
    EntDoctor,
    EntDoctorFromJSON,
    EntDoctorToJSON,
    EntExtradoctor,
    EntExtradoctorFromJSON,
    EntExtradoctorToJSON,
    EntGender,
    EntGenderFromJSON,
    EntGenderToJSON,
    EntMission,
    EntMissionFromJSON,
    EntMissionToJSON,
    EntOffice,
    EntOfficeFromJSON,
    EntOfficeToJSON,
    EntPosition,
    EntPositionFromJSON,
    EntPositionToJSON,
    EntSchedule,
    EntScheduleFromJSON,
    EntScheduleToJSON,
    EntSpecialdoctor,
    EntSpecialdoctorFromJSON,
    EntSpecialdoctorToJSON,
    EntTitle,
    EntTitleFromJSON,
    EntTitleToJSON,
    EntTraining,
    EntTrainingFromJSON,
    EntTrainingToJSON,
} from '../models';

export interface CreateCourseRequest {
    course: EntCourse;
}

export interface CreateDepartmentRequest {
    department: EntDepartment;
}

export interface CreateDetailRequest {
    detail: EntDetail;
}

export interface CreateDiseaseRequest {
    disease: EntDisease;
}

export interface CreateDoctorRequest {
    doctor: EntDoctor;
}

export interface CreateGenderRequest {
    gender: EntGender;
}

export interface CreateMissionRequest {
    doctor: EntMission;
}

export interface CreateOfficeRequest {
    office: EntOffice;
}

export interface CreatePositionRequest {
    position: EntPosition;
}

export interface CreateScheduleRequest {
    schedule: EntSchedule;
}

export interface CreateSpecialdoctorRequest {
    specialdoctor: EntSpecialdoctor;
}

export interface CreateTitleRequest {
    title: EntGender;
}

export interface CreateTrainingRequest {
    training: EntTraining;
}

export interface DeleteDepartmentRequest {
    id: number;
}

export interface DeleteDetailRequest {
    id: number;
}

export interface DeleteDiseaseRequest {
    id: number;
}

export interface DeleteDoctorRequest {
    id: number;
}

export interface DeleteGenderRequest {
    id: number;
}

export interface DeleteMissionRequest {
    id: number;
}

export interface DeletePositionRequest {
    id: number;
}

export interface DeleteScheduleRequest {
    id: number;
}

export interface DeleteSpecialdoctorRequest {
    id: number;
}

export interface DeleteTitleRequest {
    id: number;
}

export interface DeleteTrainingRequest {
    id: number;
}

export interface GetCourseRequest {
    id: number;
}

export interface GetDepartmentRequest {
    id: number;
}

export interface GetDetailRequest {
    id: number;
}

export interface GetDiseaseRequest {
    id: number;
}

export interface GetDoctorRequest {
    id: number;
}

export interface GetExtradoctorRequest {
    id: number;
}

export interface GetGenderRequest {
    id: number;
}

export interface GetMissionRequest {
    id: number;
}

export interface GetOfficeRequest {
    id: number;
}

export interface GetOfficeBySearchRequest {
    office?: string;
}

export interface GetPositionRequest {
    id: number;
}

export interface GetScheduleRequest {
    id: number;
}

export interface GetScheduleBySearchRequest {
    schedule?: string;
}

export interface GetSpecialdoctorRequest {
    id: number;
}

export interface GetTitleRequest {
    id: number;
}

export interface ListCourseRequest {
    limit?: number;
    offset?: number;
}

export interface ListDepartmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListDetailRequest {
    limit?: number;
    offset?: number;
}

export interface ListDiseaseRequest {
    limit?: number;
    offset?: number;
}

export interface ListDoctorRequest {
    limit?: number;
    offset?: number;
}

export interface ListExtradoctorRequest {
    limit?: number;
    offset?: number;
}

export interface ListGenderRequest {
    limit?: number;
    offset?: number;
}

export interface ListMissionRequest {
    limit?: number;
    mfset?: number;
}

export interface ListOfficeRequest {
    limit?: number;
    offset?: number;
}

export interface ListPositionRequest {
    limit?: number;
    offset?: number;
}

export interface ListScheduleRequest {
    limit?: number;
    offset?: number;
}

export interface ListSpecialdoctorRequest {
    limit?: number;
    offset?: number;
}

export interface ListTitleRequest {
    limit?: number;
    offset?: number;
}

export interface ListTrainingRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateScheduleRequest {
    id: number;
    schedule: EntSchedule;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create course
     * Create course
     */
    async createCourseRaw(requestParameters: CreateCourseRequest): Promise<runtime.ApiResponse<EntCourse>> {
        if (requestParameters.course === null || requestParameters.course === undefined) {
            throw new runtime.RequiredError('course','Required parameter requestParameters.course was null or undefined when calling createCourse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCourseToJSON(requestParameters.course),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCourseFromJSON(jsonValue));
    }

    /**
     * Create course
     * Create course
     */
    async createCourse(requestParameters: CreateCourseRequest): Promise<EntCourse> {
        const response = await this.createCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create department
     * Create department
     */
    async createDepartmentRaw(requestParameters: CreateDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling createDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDepartmentToJSON(requestParameters.department),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * Create department
     * Create department
     */
    async createDepartment(requestParameters: CreateDepartmentRequest): Promise<EntDepartment> {
        const response = await this.createDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create detail
     * Create detail
     */
    async createDetailRaw(requestParameters: CreateDetailRequest): Promise<runtime.ApiResponse<EntDetail>> {
        if (requestParameters.detail === null || requestParameters.detail === undefined) {
            throw new runtime.RequiredError('detail','Required parameter requestParameters.detail was null or undefined when calling createDetail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/details`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDetailToJSON(requestParameters.detail),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDetailFromJSON(jsonValue));
    }

    /**
     * Create detail
     * Create detail
     */
    async createDetail(requestParameters: CreateDetailRequest): Promise<EntDetail> {
        const response = await this.createDetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create disease
     * Create disease
     */
    async createDiseaseRaw(requestParameters: CreateDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.disease === null || requestParameters.disease === undefined) {
            throw new runtime.RequiredError('disease','Required parameter requestParameters.disease was null or undefined when calling createDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diseases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiseaseToJSON(requestParameters.disease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * Create disease
     * Create disease
     */
    async createDisease(requestParameters: CreateDiseaseRequest): Promise<EntDisease> {
        const response = await this.createDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctorRaw(requestParameters: CreateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling createDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctor(requestParameters: CreateDoctorRequest): Promise<EntDoctor> {
        const response = await this.createDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create gender
     * Create gender
     */
    async createGenderRaw(requestParameters: CreateGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.gender === null || requestParameters.gender === undefined) {
            throw new runtime.RequiredError('gender','Required parameter requestParameters.gender was null or undefined when calling createGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/genders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntGenderToJSON(requestParameters.gender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * Create gender
     * Create gender
     */
    async createGender(requestParameters: CreateGenderRequest): Promise<EntGender> {
        const response = await this.createGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create mission
     * Create mission
     */
    async createMissionRaw(requestParameters: CreateMissionRequest): Promise<runtime.ApiResponse<EntMission>> {
        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling createMission.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/missions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMissionToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMissionFromJSON(jsonValue));
    }

    /**
     * Create mission
     * Create mission
     */
    async createMission(requestParameters: CreateMissionRequest): Promise<EntMission> {
        const response = await this.createMissionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create office
     * Create office
     */
    async createOfficeRaw(requestParameters: CreateOfficeRequest): Promise<runtime.ApiResponse<EntOffice>> {
        if (requestParameters.office === null || requestParameters.office === undefined) {
            throw new runtime.RequiredError('office','Required parameter requestParameters.office was null or undefined when calling createOffice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/offices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntOfficeToJSON(requestParameters.office),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOfficeFromJSON(jsonValue));
    }

    /**
     * Create office
     * Create office
     */
    async createOffice(requestParameters: CreateOfficeRequest): Promise<EntOffice> {
        const response = await this.createOfficeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create position
     * Create position
     */
    async createPositionRaw(requestParameters: CreatePositionRequest): Promise<runtime.ApiResponse<EntPosition>> {
        if (requestParameters.position === null || requestParameters.position === undefined) {
            throw new runtime.RequiredError('position','Required parameter requestParameters.position was null or undefined when calling createPosition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/positions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPositionToJSON(requestParameters.position),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPositionFromJSON(jsonValue));
    }

    /**
     * Create position
     * Create position
     */
    async createPosition(requestParameters: CreatePositionRequest): Promise<EntPosition> {
        const response = await this.createPositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create schedule
     * Create schedule
     */
    async createScheduleRaw(requestParameters: CreateScheduleRequest): Promise<runtime.ApiResponse<EntSchedule>> {
        if (requestParameters.schedule === null || requestParameters.schedule === undefined) {
            throw new runtime.RequiredError('schedule','Required parameter requestParameters.schedule was null or undefined when calling createSchedule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/schedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntScheduleToJSON(requestParameters.schedule),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntScheduleFromJSON(jsonValue));
    }

    /**
     * Create schedule
     * Create schedule
     */
    async createSchedule(requestParameters: CreateScheduleRequest): Promise<EntSchedule> {
        const response = await this.createScheduleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create specialdoctor
     * Create specialdoctor
     */
    async createSpecialdoctorRaw(requestParameters: CreateSpecialdoctorRequest): Promise<runtime.ApiResponse<EntSpecialdoctor>> {
        if (requestParameters.specialdoctor === null || requestParameters.specialdoctor === undefined) {
            throw new runtime.RequiredError('specialdoctor','Required parameter requestParameters.specialdoctor was null or undefined when calling createSpecialdoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/specialdoctors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSpecialdoctorToJSON(requestParameters.specialdoctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSpecialdoctorFromJSON(jsonValue));
    }

    /**
     * Create specialdoctor
     * Create specialdoctor
     */
    async createSpecialdoctor(requestParameters: CreateSpecialdoctorRequest): Promise<EntSpecialdoctor> {
        const response = await this.createSpecialdoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create title
     * Create title
     */
    async createTitleRaw(requestParameters: CreateTitleRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling createTitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/titles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntGenderToJSON(requestParameters.title),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * Create title
     * Create title
     */
    async createTitle(requestParameters: CreateTitleRequest): Promise<EntGender> {
        const response = await this.createTitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create training
     * Create training
     */
    async createTrainingRaw(requestParameters: CreateTrainingRequest): Promise<runtime.ApiResponse<EntTraining>> {
        if (requestParameters.training === null || requestParameters.training === undefined) {
            throw new runtime.RequiredError('training','Required parameter requestParameters.training was null or undefined when calling createTraining.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/trainings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntTrainingToJSON(requestParameters.training),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTrainingFromJSON(jsonValue));
    }

    /**
     * Create training
     * Create training
     */
    async createTraining(requestParameters: CreateTrainingRequest): Promise<EntTraining> {
        const response = await this.createTrainingRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartmentRaw(requestParameters: DeleteDepartmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartment(requestParameters: DeleteDepartmentRequest): Promise<object> {
        const response = await this.deleteDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get detail by ID
     * Delete a detail entity by ID
     */
    async deleteDetailRaw(requestParameters: DeleteDetailRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDetail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/details/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get detail by ID
     * Delete a detail entity by ID
     */
    async deleteDetail(requestParameters: DeleteDetailRequest): Promise<object> {
        const response = await this.deleteDetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * get disease by ID
     * Delete a disease entity by ID
     */
    async deleteDiseaseRaw(requestParameters: DeleteDiseaseRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get disease by ID
     * Delete a disease entity by ID
     */
    async deleteDisease(requestParameters: DeleteDiseaseRequest): Promise<object> {
        const response = await this.deleteDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctor by ID
     * Delete a doctor entity by ID
     */
    async deleteDoctorRaw(requestParameters: DeleteDoctorRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get doctor by ID
     * Delete a doctor entity by ID
     */
    async deleteDoctor(requestParameters: DeleteDoctorRequest): Promise<object> {
        const response = await this.deleteDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Delete a gender entity by ID
     */
    async deleteGenderRaw(requestParameters: DeleteGenderRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get gender by ID
     * Delete a gender entity by ID
     */
    async deleteGender(requestParameters: DeleteGenderRequest): Promise<object> {
        const response = await this.deleteGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get mission by ID
     * Delete a mission entity by ID
     */
    async deleteMissionRaw(requestParameters: DeleteMissionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMission.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/missions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get mission by ID
     * Delete a mission entity by ID
     */
    async deleteMission(requestParameters: DeleteMissionRequest): Promise<object> {
        const response = await this.deleteMissionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get position by ID
     * Delete a position entity by ID
     */
    async deletePositionRaw(requestParameters: DeletePositionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePosition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/positions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get position by ID
     * Delete a position entity by ID
     */
    async deletePosition(requestParameters: DeletePositionRequest): Promise<object> {
        const response = await this.deletePositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get schedule by ID
     * Delete a schedule entity by ID
     */
    async deleteScheduleRaw(requestParameters: DeleteScheduleRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSchedule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schedules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get schedule by ID
     * Delete a schedule entity by ID
     */
    async deleteSchedule(requestParameters: DeleteScheduleRequest): Promise<object> {
        const response = await this.deleteScheduleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get specialdoctor by ID
     * Delete a specialdoctor entity by ID
     */
    async deleteSpecialdoctorRaw(requestParameters: DeleteSpecialdoctorRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSpecialdoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/specialdoctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get specialdoctor by ID
     * Delete a specialdoctor entity by ID
     */
    async deleteSpecialdoctor(requestParameters: DeleteSpecialdoctorRequest): Promise<object> {
        const response = await this.deleteSpecialdoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get title by ID
     * Delete a title entity by ID
     */
    async deleteTitleRaw(requestParameters: DeleteTitleRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/titles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get title by ID
     * Delete a title entity by ID
     */
    async deleteTitle(requestParameters: DeleteTitleRequest): Promise<object> {
        const response = await this.deleteTitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get training by ID
     * Delete a training entity by ID
     */
    async deleteTrainingRaw(requestParameters: DeleteTrainingRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTraining.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trainings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get training by ID
     * Delete a training entity by ID
     */
    async deleteTraining(requestParameters: DeleteTrainingRequest): Promise<object> {
        const response = await this.deleteTrainingRaw(requestParameters);
        return await response.value();
    }

    /**
     * get course by ID
     * Get a course entity by ID
     */
    async getCourseRaw(requestParameters: GetCourseRequest): Promise<runtime.ApiResponse<EntCourse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCourse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/courses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCourseFromJSON(jsonValue));
    }

    /**
     * get course by ID
     * Get a course entity by ID
     */
    async getCourse(requestParameters: GetCourseRequest): Promise<EntCourse> {
        const response = await this.getCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartmentRaw(requestParameters: GetDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartment(requestParameters: GetDepartmentRequest): Promise<EntDepartment> {
        const response = await this.getDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get detail by ID
     * Get a detail entity by ID
     */
    async getDetailRaw(requestParameters: GetDetailRequest): Promise<runtime.ApiResponse<EntDetail>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDetail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/details/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDetailFromJSON(jsonValue));
    }

    /**
     * get detail by ID
     * Get a detail entity by ID
     */
    async getDetail(requestParameters: GetDetailRequest): Promise<EntDetail> {
        const response = await this.getDetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * get disease by ID
     * Get a disease entity by ID
     */
    async getDiseaseRaw(requestParameters: GetDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * get disease by ID
     * Get a disease entity by ID
     */
    async getDisease(requestParameters: GetDiseaseRequest): Promise<EntDisease> {
        const response = await this.getDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctorRaw(requestParameters: GetDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctor(requestParameters: GetDoctorRequest): Promise<EntDoctor> {
        const response = await this.getDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get extradoctor by ID
     * Get a extradoctor entity by ID
     */
    async getExtradoctorRaw(requestParameters: GetExtradoctorRequest): Promise<runtime.ApiResponse<EntExtradoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getExtradoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extradoctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntExtradoctorFromJSON(jsonValue));
    }

    /**
     * get extradoctor by ID
     * Get a extradoctor entity by ID
     */
    async getExtradoctor(requestParameters: GetExtradoctorRequest): Promise<EntExtradoctor> {
        const response = await this.getExtradoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGenderRaw(requestParameters: GetGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGender(requestParameters: GetGenderRequest): Promise<EntGender> {
        const response = await this.getGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get mission by ID
     * Get a mission entity by ID
     */
    async getMissionRaw(requestParameters: GetMissionRequest): Promise<runtime.ApiResponse<EntMission>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMission.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/missions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMissionFromJSON(jsonValue));
    }

    /**
     * get mission by ID
     * Get a mission entity by ID
     */
    async getMission(requestParameters: GetMissionRequest): Promise<EntMission> {
        const response = await this.getMissionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get office by ID
     * Get a office entity by ID
     */
    async getOfficeRaw(requestParameters: GetOfficeRequest): Promise<runtime.ApiResponse<EntOffice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOffice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOfficeFromJSON(jsonValue));
    }

    /**
     * get office by ID
     * Get a office entity by ID
     */
    async getOffice(requestParameters: GetOfficeRequest): Promise<EntOffice> {
        const response = await this.getOfficeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Office by Search
     * Get a Office entity by Search
     */
    async getOfficeBySearchRaw(requestParameters: GetOfficeBySearchRequest): Promise<runtime.ApiResponse<EntOffice>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.office !== undefined) {
            queryParameters['Office'] = requestParameters.office;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchworkhistorys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOfficeFromJSON(jsonValue));
    }

    /**
     * get Office by Search
     * Get a Office entity by Search
     */
    async getOfficeBySearch(requestParameters: GetOfficeBySearchRequest): Promise<EntOffice> {
        const response = await this.getOfficeBySearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * get position by ID
     * Get a position entity by ID
     */
    async getPositionRaw(requestParameters: GetPositionRequest): Promise<runtime.ApiResponse<EntPosition>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPosition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/positions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPositionFromJSON(jsonValue));
    }

    /**
     * get position by ID
     * Get a position entity by ID
     */
    async getPosition(requestParameters: GetPositionRequest): Promise<EntPosition> {
        const response = await this.getPositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get schedule by ID
     * Get a schedule entity by ID
     */
    async getScheduleRaw(requestParameters: GetScheduleRequest): Promise<runtime.ApiResponse<EntSchedule>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSchedule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schedules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntScheduleFromJSON(jsonValue));
    }

    /**
     * get schedule by ID
     * Get a schedule entity by ID
     */
    async getSchedule(requestParameters: GetScheduleRequest): Promise<EntSchedule> {
        const response = await this.getScheduleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Schedule by Search
     * Get a Schedule entity by Search
     */
    async getScheduleBySearchRaw(requestParameters: GetScheduleBySearchRequest): Promise<runtime.ApiResponse<EntSchedule>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.schedule !== undefined) {
            queryParameters['Schedule'] = requestParameters.schedule;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchschedules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntScheduleFromJSON(jsonValue));
    }

    /**
     * get Schedule by Search
     * Get a Schedule entity by Search
     */
    async getScheduleBySearch(requestParameters: GetScheduleBySearchRequest): Promise<EntSchedule> {
        const response = await this.getScheduleBySearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * get specialdoctor by ID
     * Get a specialdoctor entity by ID
     */
    async getSpecialdoctorRaw(requestParameters: GetSpecialdoctorRequest): Promise<runtime.ApiResponse<EntSpecialdoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSpecialdoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/specialdoctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSpecialdoctorFromJSON(jsonValue));
    }

    /**
     * get specialdoctor by ID
     * Get a specialdoctor entity by ID
     */
    async getSpecialdoctor(requestParameters: GetSpecialdoctorRequest): Promise<EntSpecialdoctor> {
        const response = await this.getSpecialdoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get title by ID
     * Get a title entity by ID
     */
    async getTitleRaw(requestParameters: GetTitleRequest): Promise<runtime.ApiResponse<EntTitle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/titles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTitleFromJSON(jsonValue));
    }

    /**
     * get title by ID
     * Get a title entity by ID
     */
    async getTitle(requestParameters: GetTitleRequest): Promise<EntTitle> {
        const response = await this.getTitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * list course entities
     * List course entities
     */
    async listCourseRaw(requestParameters: ListCourseRequest): Promise<runtime.ApiResponse<Array<EntCourse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/courses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCourseFromJSON));
    }

    /**
     * list course entities
     * List course entities
     */
    async listCourse(requestParameters: ListCourseRequest): Promise<Array<EntCourse>> {
        const response = await this.listCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartmentRaw(requestParameters: ListDepartmentRequest): Promise<runtime.ApiResponse<Array<EntDepartment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDepartmentFromJSON));
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartment(requestParameters: ListDepartmentRequest): Promise<Array<EntDepartment>> {
        const response = await this.listDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list detail entities
     * List detail entities
     */
    async listDetailRaw(requestParameters: ListDetailRequest): Promise<runtime.ApiResponse<Array<EntDetail>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/details`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDetailFromJSON));
    }

    /**
     * list detail entities
     * List detail entities
     */
    async listDetail(requestParameters: ListDetailRequest): Promise<Array<EntDetail>> {
        const response = await this.listDetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * list disease entities
     * List disease entities
     */
    async listDiseaseRaw(requestParameters: ListDiseaseRequest): Promise<runtime.ApiResponse<Array<EntDisease>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDiseaseFromJSON));
    }

    /**
     * list disease entities
     * List disease entities
     */
    async listDisease(requestParameters: ListDiseaseRequest): Promise<Array<EntDisease>> {
        const response = await this.listDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctorRaw(requestParameters: ListDoctorRequest): Promise<runtime.ApiResponse<Array<EntDoctor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDoctorFromJSON));
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctor(requestParameters: ListDoctorRequest): Promise<Array<EntDoctor>> {
        const response = await this.listDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * list extradoctor entities
     * Listextradoctor entities
     */
    async listExtradoctorRaw(requestParameters: ListExtradoctorRequest): Promise<runtime.ApiResponse<Array<EntExtradoctor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extradoctors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntExtradoctorFromJSON));
    }

    /**
     * list extradoctor entities
     * Listextradoctor entities
     */
    async listExtradoctor(requestParameters: ListExtradoctorRequest): Promise<Array<EntExtradoctor>> {
        const response = await this.listExtradoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGenderRaw(requestParameters: ListGenderRequest): Promise<runtime.ApiResponse<Array<EntGender>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntGenderFromJSON));
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGender(requestParameters: ListGenderRequest): Promise<Array<EntGender>> {
        const response = await this.listGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * list mission entities
     * List mission entities
     */
    async listMissionRaw(requestParameters: ListMissionRequest): Promise<runtime.ApiResponse<Array<EntMission>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.mfset !== undefined) {
            queryParameters['mfset'] = requestParameters.mfset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/missions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMissionFromJSON));
    }

    /**
     * list mission entities
     * List mission entities
     */
    async listMission(requestParameters: ListMissionRequest): Promise<Array<EntMission>> {
        const response = await this.listMissionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list office entities
     * List office entities
     */
    async listOfficeRaw(requestParameters: ListOfficeRequest): Promise<runtime.ApiResponse<Array<EntOffice>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntOfficeFromJSON));
    }

    /**
     * list office entities
     * List office entities
     */
    async listOffice(requestParameters: ListOfficeRequest): Promise<Array<EntOffice>> {
        const response = await this.listOfficeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list position entities
     * List position entities
     */
    async listPositionRaw(requestParameters: ListPositionRequest): Promise<runtime.ApiResponse<Array<EntPosition>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/positions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPositionFromJSON));
    }

    /**
     * list position entities
     * List position entities
     */
    async listPosition(requestParameters: ListPositionRequest): Promise<Array<EntPosition>> {
        const response = await this.listPositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list schedule entities
     * List schedule entities
     */
    async listScheduleRaw(requestParameters: ListScheduleRequest): Promise<runtime.ApiResponse<Array<EntSchedule>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schedules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntScheduleFromJSON));
    }

    /**
     * list schedule entities
     * List schedule entities
     */
    async listSchedule(requestParameters: ListScheduleRequest): Promise<Array<EntSchedule>> {
        const response = await this.listScheduleRaw(requestParameters);
        return await response.value();
    }

    /**
     * list specialdoctor entities
     * List specialdoctor entities
     */
    async listSpecialdoctorRaw(requestParameters: ListSpecialdoctorRequest): Promise<runtime.ApiResponse<Array<EntSpecialdoctor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/specialdoctors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSpecialdoctorFromJSON));
    }

    /**
     * list specialdoctor entities
     * List specialdoctor entities
     */
    async listSpecialdoctor(requestParameters: ListSpecialdoctorRequest): Promise<Array<EntSpecialdoctor>> {
        const response = await this.listSpecialdoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * list title entities
     * List title entities
     */
    async listTitleRaw(requestParameters: ListTitleRequest): Promise<runtime.ApiResponse<Array<EntTitle>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/titles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTitleFromJSON));
    }

    /**
     * list title entities
     * List title entities
     */
    async listTitle(requestParameters: ListTitleRequest): Promise<Array<EntTitle>> {
        const response = await this.listTitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * list training entities
     * List training entities
     */
    async listTrainingRaw(requestParameters: ListTrainingRequest): Promise<runtime.ApiResponse<Array<EntTraining>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trainings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTrainingFromJSON));
    }

    /**
     * list training entities
     * List training entities
     */
    async listTraining(requestParameters: ListTrainingRequest): Promise<Array<EntTraining>> {
        const response = await this.listTrainingRaw(requestParameters);
        return await response.value();
    }

    /**
     * update schedule by ID
     * Update a schedule entity by ID
     */
    async updateScheduleRaw(requestParameters: UpdateScheduleRequest): Promise<runtime.ApiResponse<EntSchedule>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSchedule.');
        }

        if (requestParameters.schedule === null || requestParameters.schedule === undefined) {
            throw new runtime.RequiredError('schedule','Required parameter requestParameters.schedule was null or undefined when calling updateSchedule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/schedules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntScheduleToJSON(requestParameters.schedule),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntScheduleFromJSON(jsonValue));
    }

    /**
     * update schedule by ID
     * Update a schedule entity by ID
     */
    async updateSchedule(requestParameters: UpdateScheduleRequest): Promise<EntSchedule> {
        const response = await this.updateScheduleRaw(requestParameters);
        return await response.value();
    }

}
