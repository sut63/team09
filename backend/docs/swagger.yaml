basePath: /api/v1
definitions:
  ent.Doctor:
    properties:
      address:
        description: Address holds the value of the "address" field.
        type: integer
      age:
        description: Age holds the value of the "age" field.
        type: integer
      educational:
        description: Educational holds the value of the "educational" field.
        type: integer
      email:
        description: Email holds the value of the "email" field.
        type: integer
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: integer
      pnumber:
        description: Pnumber holds the value of the "pnumber" field.
        type: integer
    type: object
  ent.Office:
    properties:
      edges:
        $ref: '#/definitions/ent.OfficeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the OfficeQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      officename:
        description: Officename holds the value of the "officename" field.
        type: string
    type: object
  ent.OfficeEdges:
    properties:
      doctors:
        description: Doctors holds the value of the doctors edge.
        items:
          $ref: '#/definitions/ent.Doctor'
        type: array
    type: object
  ent.Workingtime:
    properties:
      added_time:
        description: AddedTime holds the value of the "added_time" field.
        type: string
      edges:
        $ref: '#/definitions/ent.WorkingtimeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the WorkingtimeQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.WorkingtimeEdges:
    properties:
      doctors:
        description: Doctors holds the value of the doctors edge.
        items:
          $ref: '#/definitions/ent.Doctor'
        type: array
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API
  version: "1.0"
paths:
  /doctors:
    get:
      description: list doctor entities
      operationId: list-doctor
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Doctor'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List doctor entities
    post:
      consumes:
      - application/json
      description: Create doctor
      operationId: create-doctor
      parameters:
      - description: Doctor entity
        in: body
        name: doctor
        required: true
        schema:
          $ref: '#/definitions/ent.Doctor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Doctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create doctor
  /doctors/{id}:
    delete:
      description: get doctor by ID
      operationId: delete-doctor
      parameters:
      - description: Doctor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a doctor entity by ID
    get:
      description: get doctor by ID
      operationId: get-doctor
      parameters:
      - description: Doctor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Doctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a doctor entity by ID
  /offices:
    get:
      description: list office entities
      operationId: list-office
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Office'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List office entities
    post:
      consumes:
      - application/json
      description: Create office
      operationId: create-office
      parameters:
      - description: Office entity
        in: body
        name: doctor
        required: true
        schema:
          $ref: '#/definitions/ent.Office'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Office'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create office
  /offices/{id}:
    delete:
      description: get office by ID
      operationId: delete-office
      parameters:
      - description: Office ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a office entity by ID
    get:
      description: get office by ID
      operationId: get-office
      parameters:
      - description: Office ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Office'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a office entity by ID
  /workingtimes:
    get:
      description: list workingtime entities
      operationId: list-office
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Workingtime'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List workingtime entities
    post:
      consumes:
      - application/json
      description: Create workingtime
      operationId: create-workingtime
      parameters:
      - description: Workingtime entity
        in: body
        name: doctor
        required: true
        schema:
          $ref: '#/definitions/ent.Workingtime'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Workingtime'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create workingtime
  /workingtimes/{id}:
    delete:
      description: get workingtime by ID
      operationId: delete-workingtime
      parameters:
      - description: Workingtime ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a workingtime entity by ID
    get:
      description: get workingtime by ID
      operationId: get-workingtime
      parameters:
      - description: Workingtime ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Workingtime'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a workingtime entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    authorizationUrl: ""
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    authorizationUrl: ""
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
