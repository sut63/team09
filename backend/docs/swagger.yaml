basePath: /api/v1
definitions:
  ent.Course:
    properties:
      edges:
        $ref: '#/definitions/ent.CourseEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the CourseQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      namecourse:
        description: Namecourse holds the value of the "namecourse" field.
        type: string
    type: object
  ent.CourseEdges:
    properties:
      details:
        description: Details holds the value of the details edge.
        items:
          $ref: '#/definitions/ent.Detail'
        type: array
      trainings:
        description: Trainings holds the value of the trainings edge.
        items:
          $ref: '#/definitions/ent.Training'
        type: array
    type: object
  ent.Department:
    properties:
      Name:
        description: Name holds the value of the "Name" field.
        type: string
      edges:
        $ref: '#/definitions/ent.DepartmentEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the DepartmentQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.DepartmentEdges:
    properties:
      details:
        description: Details holds the value of the details edge.
        items:
          $ref: '#/definitions/ent.Detail'
        type: array
      offices:
        description: Offices holds the value of the offices edge.
        items:
          $ref: '#/definitions/ent.Office'
        type: array
      schedules:
        description: Schedules holds the value of the schedules edge.
        items:
          $ref: '#/definitions/ent.Schedule'
        type: array
      specialdoctors:
        description: Specialdoctors holds the value of the specialdoctors edge.
        items:
          $ref: '#/definitions/ent.Specialdoctor'
        type: array
      trainings:
        description: Trainings holds the value of the trainings edge.
        items:
          $ref: '#/definitions/ent.Training'
        type: array
    type: object
  ent.Detail:
    properties:
      edges:
        $ref: '#/definitions/ent.DetailEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the DetailQuery when eager-loading is set.
        type: object
      email:
        description: Email holds the value of the "email" field.
        type: string
      explain:
        description: Explain holds the value of the "explain" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      phone:
        description: Phone holds the value of the "phone" field.
        type: string
    type: object
  ent.DetailEdges:
    properties:
      course:
        $ref: '#/definitions/ent.Course'
        description: Course holds the value of the course edge.
        type: object
      department:
        $ref: '#/definitions/ent.Department'
        description: Department holds the value of the department edge.
        type: object
      mission:
        $ref: '#/definitions/ent.Mission'
        description: Mission holds the value of the mission edge.
        type: object
    type: object
  ent.Disease:
    properties:
      disease:
        description: Disease holds the value of the "disease" field.
        type: string
      edges:
        $ref: '#/definitions/ent.DiseaseEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the DiseaseQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.DiseaseEdges:
    properties:
      doctors:
        description: Doctors holds the value of the doctors edge.
        items:
          $ref: '#/definitions/ent.Doctor'
        type: array
    type: object
  ent.Doctor:
    properties:
      address:
        description: Address holds the value of the "address" field.
        type: string
      age:
        description: Age holds the value of the "age" field.
        type: integer
      edges:
        $ref: '#/definitions/ent.DoctorEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the DoctorQuery when eager-loading is set.
        type: object
      educational:
        description: Educational holds the value of the "educational" field.
        type: string
      email:
        description: Email holds the value of the "email" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
      password:
        description: Password holds the value of the "password" field.
        type: string
      phone:
        description: Phone holds the value of the "phone" field.
        type: string
    type: object
  ent.DoctorEdges:
    properties:
      departments:
        description: Departments holds the value of the departments edge.
        items:
          $ref: '#/definitions/ent.Department'
        type: array
      disease:
        $ref: '#/definitions/ent.Disease'
        description: Disease holds the value of the disease edge.
        type: object
      gender:
        $ref: '#/definitions/ent.Gender'
        description: Gender holds the value of the gender edge.
        type: object
      offices:
        description: Offices holds the value of the offices edge.
        items:
          $ref: '#/definitions/ent.Office'
        type: array
      position:
        $ref: '#/definitions/ent.Position'
        description: Position holds the value of the position edge.
        type: object
      schedules:
        description: Schedules holds the value of the schedules edge.
        items:
          $ref: '#/definitions/ent.Schedule'
        type: array
      specialdoctors:
        description: Specialdoctors holds the value of the specialdoctors edge.
        items:
          $ref: '#/definitions/ent.Specialdoctor'
        type: array
      title:
        $ref: '#/definitions/ent.Title'
        description: Title holds the value of the title edge.
        type: object
      trainings:
        description: Trainings holds the value of the trainings edge.
        items:
          $ref: '#/definitions/ent.Training'
        type: array
    type: object
  ent.Extradoctor:
    properties:
      edges:
        $ref: '#/definitions/ent.ExtradoctorEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ExtradoctorQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      specialname:
        description: Specialname holds the value of the "specialname" field.
        type: string
    type: object
  ent.ExtradoctorEdges:
    properties:
      offices:
        description: Offices holds the value of the offices edge.
        items:
          $ref: '#/definitions/ent.Office'
        type: array
      specialdoctors:
        description: Specialdoctors holds the value of the specialdoctors edge.
        items:
          $ref: '#/definitions/ent.Specialdoctor'
        type: array
    type: object
  ent.Gender:
    properties:
      edges:
        $ref: '#/definitions/ent.GenderEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the GenderQuery when eager-loading is set.
        type: object
      gender:
        description: Gender holds the value of the "gender" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.GenderEdges:
    properties:
      doctors:
        description: Doctors holds the value of the doctors edge.
        items:
          $ref: '#/definitions/ent.Doctor'
        type: array
    type: object
  ent.Mission:
    properties:
      edges:
        $ref: '#/definitions/ent.MissionEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the MissionQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      mission:
        description: Mission holds the value of the "mission" field.
        type: string
    type: object
  ent.MissionEdges:
    properties:
      departments:
        description: Departments holds the value of the departments edge.
        items:
          $ref: '#/definitions/ent.Department'
        type: array
      details:
        description: Details holds the value of the details edge.
        items:
          $ref: '#/definitions/ent.Detail'
        type: array
    type: object
  ent.Office:
    properties:
      doctoridcard:
        description: Doctoridcard holds the value of the "doctoridcard" field.
        type: string
      edges:
        $ref: '#/definitions/ent.OfficeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the OfficeQuery when eager-loading is set.
        type: object
      finallytime:
        description: Finallytime holds the value of the "finallytime" field.
        type: string
      firsttime:
        description: Firsttime holds the value of the "firsttime" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      officename:
        description: Officename holds the value of the "officename" field.
        type: string
      roomnumber:
        description: Roomnumber holds the value of the "roomnumber" field.
        type: string
    type: object
  ent.OfficeEdges:
    properties:
      department:
        $ref: '#/definitions/ent.Department'
        description: Department holds the value of the department edge.
        type: object
      doctor:
        $ref: '#/definitions/ent.Doctor'
        description: Doctor holds the value of the doctor edge.
        type: object
      extradoctor:
        $ref: '#/definitions/ent.Extradoctor'
        description: Extradoctor holds the value of the extradoctor edge.
        type: object
      schedules:
        description: Schedules holds the value of the schedules edge.
        items:
          $ref: '#/definitions/ent.Schedule'
        type: array
    type: object
  ent.Position:
    properties:
      edges:
        $ref: '#/definitions/ent.PositionEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PositionQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      position:
        description: Position holds the value of the "position" field.
        type: string
    type: object
  ent.PositionEdges:
    properties:
      doctors:
        description: Doctors holds the value of the doctors edge.
        items:
          $ref: '#/definitions/ent.Doctor'
        type: array
    type: object
  ent.Schedule:
    properties:
      Activity:
        description: Activity holds the value of the "Activity" field.
        type: string
      Docterid:
        description: Docterid holds the value of the "Docterid" field.
        type: string
      Roomnumber:
        description: Roomnumber holds the value of the "Roomnumber" field.
        type: string
      added_time:
        description: AddedTime holds the value of the "added_time" field.
        type: string
      edges:
        $ref: '#/definitions/ent.ScheduleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ScheduleQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.ScheduleEdges:
    properties:
      department:
        $ref: '#/definitions/ent.Department'
        description: Department holds the value of the department edge.
        type: object
      doctor:
        $ref: '#/definitions/ent.Doctor'
        description: Doctor holds the value of the doctor edge.
        type: object
      office:
        $ref: '#/definitions/ent.Office'
        description: Office holds the value of the office edge.
        type: object
    type: object
  ent.Specialdoctor:
    properties:
      Doctorid:
        description: Doctorid holds the value of the "Doctorid" field.
        type: string
      Other:
        description: Other holds the value of the "Other" field.
        type: string
      Roomnumber:
        description: Roomnumber holds the value of the "Roomnumber" field.
        type: string
      edges:
        $ref: '#/definitions/ent.SpecialdoctorEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the SpecialdoctorQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.SpecialdoctorEdges:
    properties:
      department:
        $ref: '#/definitions/ent.Department'
        description: Department holds the value of the department edge.
        type: object
      doctor:
        $ref: '#/definitions/ent.Doctor'
        description: Doctor holds the value of the doctor edge.
        type: object
      extradoctor:
        $ref: '#/definitions/ent.Extradoctor'
        description: Extradoctor holds the value of the extradoctor edge.
        type: object
    type: object
  ent.Title:
    properties:
      edges:
        $ref: '#/definitions/ent.TitleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the TitleQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      title:
        description: Title holds the value of the "title" field.
        type: string
    type: object
  ent.TitleEdges:
    properties:
      doctors:
        description: Doctors holds the value of the doctors edge.
        items:
          $ref: '#/definitions/ent.Doctor'
        type: array
    type: object
  ent.Training:
    properties:
      branch:
        description: Branch holds the value of the "branch" field.
        type: string
      dateone:
        description: Dateone holds the value of the "dateone" field.
        type: string
      datetwo:
        description: Datetwo holds the value of the "datetwo" field.
        type: string
      doctoridcard:
        description: Doctoridcard holds the value of the "doctoridcard" field.
        type: string
      edges:
        $ref: '#/definitions/ent.TrainingEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the TrainingQuery when eager-loading is set.
        type: object
      hour:
        description: Hour holds the value of the "hour" field.
        type: integer
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.TrainingEdges:
    properties:
      course:
        $ref: '#/definitions/ent.Course'
        description: Course holds the value of the course edge.
        type: object
      department:
        $ref: '#/definitions/ent.Department'
        description: Department holds the value of the department edge.
        type: object
      doctor:
        $ref: '#/definitions/ent.Doctor'
        description: Doctor holds the value of the doctor edge.
        type: object
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API Playlist Vidoe
  version: "1.0"
paths:
  /courses:
    get:
      description: list course entities
      operationId: list-course
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Course'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List course entities
    post:
      consumes:
      - application/json
      description: Create course
      operationId: create-course
      parameters:
      - description: Course entity
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/ent.Course'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create course
  /courses/{id}:
    get:
      description: get course by ID
      operationId: get-course
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a course entity by ID
  /departments:
    get:
      description: list department entities
      operationId: list-department
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Department'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List department entities
    post:
      consumes:
      - application/json
      description: Create department
      operationId: create-department
      parameters:
      - description: Department entity
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/ent.Department'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create department
  /departments/{id}:
    delete:
      description: get department by ID
      operationId: delete-department
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a department entity by ID
    get:
      description: get department by ID
      operationId: get-department
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a department entity by ID
  /details:
    get:
      description: list detail entities
      operationId: list-detail
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Detail'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List detail entities
    post:
      consumes:
      - application/json
      description: Create detail
      operationId: create-detail
      parameters:
      - description: Detail entity
        in: body
        name: Detail
        required: true
        schema:
          $ref: '#/definitions/ent.Detail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Detail'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create detail
  /details/{id}:
    delete:
      description: get detail by ID
      operationId: delete-detail
      parameters:
      - description: detail ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a detail entity by ID
    get:
      description: get detail by ID
      operationId: get-detail
      parameters:
      - description: detail ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Detail'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a detail entity by ID
  /diseases:
    get:
      description: list disease entities
      operationId: list-disease
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Disease'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List disease entities
    post:
      consumes:
      - application/json
      description: Create disease
      operationId: create-disease
      parameters:
      - description: Disease entity
        in: body
        name: disease
        required: true
        schema:
          $ref: '#/definitions/ent.Disease'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Disease'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create disease
  /diseases/{id}:
    delete:
      description: get disease by ID
      operationId: delete-disease
      parameters:
      - description: Disease ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a disease entity by ID
    get:
      description: get disease by ID
      operationId: get-disease
      parameters:
      - description: Disease ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Disease'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a disease entity by ID
  /doctors:
    get:
      description: list doctor entities
      operationId: list-doctor
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Doctor'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List doctor entities
    post:
      consumes:
      - application/json
      description: Create doctor
      operationId: create-doctor
      parameters:
      - description: Doctor entity
        in: body
        name: doctor
        required: true
        schema:
          $ref: '#/definitions/ent.Doctor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Doctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create doctor
  /doctors/{id}:
    delete:
      description: get doctor by ID
      operationId: delete-doctor
      parameters:
      - description: Doctor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a doctor entity by ID
    get:
      description: get doctor by ID
      operationId: get-doctor
      parameters:
      - description: Doctor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Doctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a doctor entity by ID
  /extradoctors:
    get:
      description: list extradoctor entities
      operationId: list-extradoctor
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Extradoctor'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Listextradoctor entities
  /extradoctors/{id}:
    get:
      description: get extradoctor by ID
      operationId: get-extradoctor
      parameters:
      - description: Special ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Extradoctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a extradoctor entity by ID
  /genders:
    get:
      description: list gender entities
      operationId: list-gender
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Gender'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List gender entities
    post:
      consumes:
      - application/json
      description: Create gender
      operationId: create-gender
      parameters:
      - description: Gender entity
        in: body
        name: gender
        required: true
        schema:
          $ref: '#/definitions/ent.Gender'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Gender'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create gender
  /genders/{id}:
    delete:
      description: get gender by ID
      operationId: delete-gender
      parameters:
      - description: Gender ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a gender entity by ID
    get:
      description: get gender by ID
      operationId: get-gender
      parameters:
      - description: Gender ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Gender'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a gender entity by ID
  /missions:
    get:
      description: list mission entities
      operationId: list-mission
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: mfset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Mission'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List mission entities
    post:
      consumes:
      - application/json
      description: Create mission
      operationId: create-mission
      parameters:
      - description: Mission entity
        in: body
        name: doctor
        required: true
        schema:
          $ref: '#/definitions/ent.Mission'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Mission'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create mission
  /missions/{id}:
    delete:
      description: get mission by ID
      operationId: delete-mission
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a mission entity by ID
    get:
      description: get mission by ID
      operationId: get-mission
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Mission'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a mission entity by ID
  /offices:
    get:
      description: list office entities
      operationId: list-office
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Office'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List office entities
    post:
      consumes:
      - application/json
      description: Create office
      operationId: create-office
      parameters:
      - description: Office entity
        in: body
        name: office
        required: true
        schema:
          $ref: '#/definitions/ent.Office'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Office'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create office
  /offices/{id}:
    get:
      description: get office by ID
      operationId: get-office
      parameters:
      - description: Office ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Office'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a office entity by ID
  /positions:
    get:
      description: list position entities
      operationId: list-position
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Position'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List position entities
    post:
      consumes:
      - application/json
      description: Create position
      operationId: create-position
      parameters:
      - description: Position entity
        in: body
        name: position
        required: true
        schema:
          $ref: '#/definitions/ent.Position'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Position'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create position
  /positions/{id}:
    delete:
      description: get position by ID
      operationId: delete-position
      parameters:
      - description: Position ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a position entity by ID
    get:
      description: get position by ID
      operationId: get-position
      parameters:
      - description: Position ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Position'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a position entity by ID
  /schedules:
    get:
      description: list schedule entities
      operationId: list-schedule
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Schedule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List schedule entities
    post:
      consumes:
      - application/json
      description: Create schedule
      operationId: create-schedule
      parameters:
      - description: Schedule entity
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/ent.Schedule'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Schedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create schedule
  /schedules/{id}:
    delete:
      description: get schedule by ID
      operationId: delete-schedule
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a schedule entity by ID
    get:
      description: get schedule by ID
      operationId: get-schedule
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Schedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a schedule entity by ID
    put:
      consumes:
      - application/json
      description: update schedule by ID
      operationId: update-schedule
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      - description: Schedule entity
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/ent.Schedule'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Schedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a schedule entity by ID
  /searchschedules:
    get:
      description: get Schedule by Search
      operationId: get-Schedule-by-search
      parameters:
      - description: Search Schedule
        in: query
        name: Schedule
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Schedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a Schedule entity by Search
  /searchworkhistorys:
    get:
      description: get Office by Search
      operationId: get-Office-by-search
      parameters:
      - description: Search Office
        in: query
        name: Office
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Office'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a Office entity by Search
  /specialdoctors:
    get:
      description: list specialdoctor entities
      operationId: list-specialdoctor
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Specialdoctor'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List specialdoctor entities
    post:
      consumes:
      - application/json
      description: Create specialdoctor
      operationId: create-specialdoctor
      parameters:
      - description: Specialdoctor entity
        in: body
        name: specialdoctor
        required: true
        schema:
          $ref: '#/definitions/ent.Specialdoctor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Specialdoctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create specialdoctor
  /specialdoctors/{id}:
    delete:
      description: get specialdoctor by ID
      operationId: delete-specialdoctor
      parameters:
      - description: Specialdoctor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a specialdoctor entity by ID
    get:
      description: get specialdoctor by ID
      operationId: get-specialdoctor
      parameters:
      - description: Specialdoctor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Specialdoctor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a specialdoctor entity by ID
  /titles:
    get:
      description: list title entities
      operationId: list-title
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Title'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List title entities
    post:
      consumes:
      - application/json
      description: Create title
      operationId: create-title
      parameters:
      - description: Gender entity
        in: body
        name: title
        required: true
        schema:
          $ref: '#/definitions/ent.Gender'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Gender'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create title
  /titles/{id}:
    delete:
      description: get title by ID
      operationId: delete-title
      parameters:
      - description: Title ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a title entity by ID
    get:
      description: get title by ID
      operationId: get-title
      parameters:
      - description: Title ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Title'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a title entity by ID
  /trainings:
    get:
      description: list training entities
      operationId: list-training
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Training'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List training entities
    post:
      consumes:
      - application/json
      description: Create training
      operationId: create-training
      parameters:
      - description: Training entity
        in: body
        name: training
        required: true
        schema:
          $ref: '#/definitions/ent.Training'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Training'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create training
  /trainings/{id}:
    delete:
      description: get training by ID
      operationId: delete-training
      parameters:
      - description: Training ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a training entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
