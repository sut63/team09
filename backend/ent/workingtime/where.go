// Code generated by entc, DO NOT EDIT.

package workingtime

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team09/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AddedTime1 applies equality check predicate on the "added_time1" field. It's identical to AddedTime1EQ.
func AddedTime1(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedTime1), v))
	})
}

// AddedTime2 applies equality check predicate on the "added_time2" field. It's identical to AddedTime2EQ.
func AddedTime2(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedTime2), v))
	})
}

// AddedTime1EQ applies the EQ predicate on the "added_time1" field.
func AddedTime1EQ(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedTime1), v))
	})
}

// AddedTime1NEQ applies the NEQ predicate on the "added_time1" field.
func AddedTime1NEQ(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddedTime1), v))
	})
}

// AddedTime1In applies the In predicate on the "added_time1" field.
func AddedTime1In(vs ...time.Time) predicate.Workingtime {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workingtime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddedTime1), v...))
	})
}

// AddedTime1NotIn applies the NotIn predicate on the "added_time1" field.
func AddedTime1NotIn(vs ...time.Time) predicate.Workingtime {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workingtime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddedTime1), v...))
	})
}

// AddedTime1GT applies the GT predicate on the "added_time1" field.
func AddedTime1GT(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddedTime1), v))
	})
}

// AddedTime1GTE applies the GTE predicate on the "added_time1" field.
func AddedTime1GTE(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddedTime1), v))
	})
}

// AddedTime1LT applies the LT predicate on the "added_time1" field.
func AddedTime1LT(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddedTime1), v))
	})
}

// AddedTime1LTE applies the LTE predicate on the "added_time1" field.
func AddedTime1LTE(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddedTime1), v))
	})
}

// AddedTime2EQ applies the EQ predicate on the "added_time2" field.
func AddedTime2EQ(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedTime2), v))
	})
}

// AddedTime2NEQ applies the NEQ predicate on the "added_time2" field.
func AddedTime2NEQ(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddedTime2), v))
	})
}

// AddedTime2In applies the In predicate on the "added_time2" field.
func AddedTime2In(vs ...time.Time) predicate.Workingtime {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workingtime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddedTime2), v...))
	})
}

// AddedTime2NotIn applies the NotIn predicate on the "added_time2" field.
func AddedTime2NotIn(vs ...time.Time) predicate.Workingtime {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workingtime(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddedTime2), v...))
	})
}

// AddedTime2GT applies the GT predicate on the "added_time2" field.
func AddedTime2GT(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddedTime2), v))
	})
}

// AddedTime2GTE applies the GTE predicate on the "added_time2" field.
func AddedTime2GTE(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddedTime2), v))
	})
}

// AddedTime2LT applies the LT predicate on the "added_time2" field.
func AddedTime2LT(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddedTime2), v))
	})
}

// AddedTime2LTE applies the LTE predicate on the "added_time2" field.
func AddedTime2LTE(v time.Time) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddedTime2), v))
	})
}

// HasOffices applies the HasEdge predicate on the "offices" edge.
func HasOffices() predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OfficesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OfficesTable, OfficesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOfficesWith applies the HasEdge predicate on the "offices" edge with a given conditions (other predicates).
func HasOfficesWith(preds ...predicate.Office) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OfficesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OfficesTable, OfficesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Workingtime) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Workingtime) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Workingtime) predicate.Workingtime {
	return predicate.Workingtime(func(s *sql.Selector) {
		p(s.Not())
	})
}
