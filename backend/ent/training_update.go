// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/course"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/predicate"
	"github.com/team09/app/ent/training"
)

// TrainingUpdate is the builder for updating Training entities.
type TrainingUpdate struct {
	config
	hooks      []Hook
	mutation   *TrainingMutation
	predicates []predicate.Training
}

// Where adds a new predicate for the builder.
func (tu *TrainingUpdate) Where(ps ...predicate.Training) *TrainingUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetBranch sets the branch field.
func (tu *TrainingUpdate) SetBranch(s string) *TrainingUpdate {
	tu.mutation.SetBranch(s)
	return tu
}

// SetDateone sets the dateone field.
func (tu *TrainingUpdate) SetDateone(t time.Time) *TrainingUpdate {
	tu.mutation.SetDateone(t)
	return tu
}

// SetDatetwo sets the datetwo field.
func (tu *TrainingUpdate) SetDatetwo(t time.Time) *TrainingUpdate {
	tu.mutation.SetDatetwo(t)
	return tu
}

// SetCourseID sets the course edge to Course by id.
func (tu *TrainingUpdate) SetCourseID(id int) *TrainingUpdate {
	tu.mutation.SetCourseID(id)
	return tu
}

// SetNillableCourseID sets the course edge to Course by id if the given value is not nil.
func (tu *TrainingUpdate) SetNillableCourseID(id *int) *TrainingUpdate {
	if id != nil {
		tu = tu.SetCourseID(*id)
	}
	return tu
}

// SetCourse sets the course edge to Course.
func (tu *TrainingUpdate) SetCourse(c *Course) *TrainingUpdate {
	return tu.SetCourseID(c.ID)
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (tu *TrainingUpdate) SetDoctorID(id int) *TrainingUpdate {
	tu.mutation.SetDoctorID(id)
	return tu
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (tu *TrainingUpdate) SetNillableDoctorID(id *int) *TrainingUpdate {
	if id != nil {
		tu = tu.SetDoctorID(*id)
	}
	return tu
}

// SetDoctor sets the doctor edge to Doctor.
func (tu *TrainingUpdate) SetDoctor(d *Doctor) *TrainingUpdate {
	return tu.SetDoctorID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (tu *TrainingUpdate) SetDepartmentID(id int) *TrainingUpdate {
	tu.mutation.SetDepartmentID(id)
	return tu
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (tu *TrainingUpdate) SetNillableDepartmentID(id *int) *TrainingUpdate {
	if id != nil {
		tu = tu.SetDepartmentID(*id)
	}
	return tu
}

// SetDepartment sets the department edge to Department.
func (tu *TrainingUpdate) SetDepartment(d *Department) *TrainingUpdate {
	return tu.SetDepartmentID(d.ID)
}

// Mutation returns the TrainingMutation object of the builder.
func (tu *TrainingUpdate) Mutation() *TrainingMutation {
	return tu.mutation
}

// ClearCourse clears the course edge to Course.
func (tu *TrainingUpdate) ClearCourse() *TrainingUpdate {
	tu.mutation.ClearCourse()
	return tu
}

// ClearDoctor clears the doctor edge to Doctor.
func (tu *TrainingUpdate) ClearDoctor() *TrainingUpdate {
	tu.mutation.ClearDoctor()
	return tu
}

// ClearDepartment clears the department edge to Department.
func (tu *TrainingUpdate) ClearDepartment() *TrainingUpdate {
	tu.mutation.ClearDepartment()
	return tu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TrainingUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := tu.mutation.Branch(); ok {
		if err := training.BranchValidator(v); err != nil {
			return 0, &ValidationError{Name: "branch", err: fmt.Errorf("ent: validator failed for field \"branch\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TrainingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TrainingUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TrainingUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TrainingUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TrainingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   training.Table,
			Columns: training.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: training.FieldID,
			},
		},
	}
	if ps := tu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Branch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: training.FieldBranch,
		})
	}
	if value, ok := tu.mutation.Dateone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: training.FieldDateone,
		})
	}
	if value, ok := tu.mutation.Datetwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: training.FieldDatetwo,
		})
	}
	if tu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   training.CourseTable,
			Columns: []string{training.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   training.CourseTable,
			Columns: []string{training.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   training.DoctorTable,
			Columns: []string{training.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   training.DoctorTable,
			Columns: []string{training.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   training.DepartmentTable,
			Columns: []string{training.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   training.DepartmentTable,
			Columns: []string{training.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{training.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TrainingUpdateOne is the builder for updating a single Training entity.
type TrainingUpdateOne struct {
	config
	hooks    []Hook
	mutation *TrainingMutation
}

// SetBranch sets the branch field.
func (tuo *TrainingUpdateOne) SetBranch(s string) *TrainingUpdateOne {
	tuo.mutation.SetBranch(s)
	return tuo
}

// SetDateone sets the dateone field.
func (tuo *TrainingUpdateOne) SetDateone(t time.Time) *TrainingUpdateOne {
	tuo.mutation.SetDateone(t)
	return tuo
}

// SetDatetwo sets the datetwo field.
func (tuo *TrainingUpdateOne) SetDatetwo(t time.Time) *TrainingUpdateOne {
	tuo.mutation.SetDatetwo(t)
	return tuo
}

// SetCourseID sets the course edge to Course by id.
func (tuo *TrainingUpdateOne) SetCourseID(id int) *TrainingUpdateOne {
	tuo.mutation.SetCourseID(id)
	return tuo
}

// SetNillableCourseID sets the course edge to Course by id if the given value is not nil.
func (tuo *TrainingUpdateOne) SetNillableCourseID(id *int) *TrainingUpdateOne {
	if id != nil {
		tuo = tuo.SetCourseID(*id)
	}
	return tuo
}

// SetCourse sets the course edge to Course.
func (tuo *TrainingUpdateOne) SetCourse(c *Course) *TrainingUpdateOne {
	return tuo.SetCourseID(c.ID)
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (tuo *TrainingUpdateOne) SetDoctorID(id int) *TrainingUpdateOne {
	tuo.mutation.SetDoctorID(id)
	return tuo
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (tuo *TrainingUpdateOne) SetNillableDoctorID(id *int) *TrainingUpdateOne {
	if id != nil {
		tuo = tuo.SetDoctorID(*id)
	}
	return tuo
}

// SetDoctor sets the doctor edge to Doctor.
func (tuo *TrainingUpdateOne) SetDoctor(d *Doctor) *TrainingUpdateOne {
	return tuo.SetDoctorID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (tuo *TrainingUpdateOne) SetDepartmentID(id int) *TrainingUpdateOne {
	tuo.mutation.SetDepartmentID(id)
	return tuo
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (tuo *TrainingUpdateOne) SetNillableDepartmentID(id *int) *TrainingUpdateOne {
	if id != nil {
		tuo = tuo.SetDepartmentID(*id)
	}
	return tuo
}

// SetDepartment sets the department edge to Department.
func (tuo *TrainingUpdateOne) SetDepartment(d *Department) *TrainingUpdateOne {
	return tuo.SetDepartmentID(d.ID)
}

// Mutation returns the TrainingMutation object of the builder.
func (tuo *TrainingUpdateOne) Mutation() *TrainingMutation {
	return tuo.mutation
}

// ClearCourse clears the course edge to Course.
func (tuo *TrainingUpdateOne) ClearCourse() *TrainingUpdateOne {
	tuo.mutation.ClearCourse()
	return tuo
}

// ClearDoctor clears the doctor edge to Doctor.
func (tuo *TrainingUpdateOne) ClearDoctor() *TrainingUpdateOne {
	tuo.mutation.ClearDoctor()
	return tuo
}

// ClearDepartment clears the department edge to Department.
func (tuo *TrainingUpdateOne) ClearDepartment() *TrainingUpdateOne {
	tuo.mutation.ClearDepartment()
	return tuo
}

// Save executes the query and returns the updated entity.
func (tuo *TrainingUpdateOne) Save(ctx context.Context) (*Training, error) {
	if v, ok := tuo.mutation.Branch(); ok {
		if err := training.BranchValidator(v); err != nil {
			return nil, &ValidationError{Name: "branch", err: fmt.Errorf("ent: validator failed for field \"branch\": %w", err)}
		}
	}

	var (
		err  error
		node *Training
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TrainingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TrainingUpdateOne) SaveX(ctx context.Context) *Training {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TrainingUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TrainingUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TrainingUpdateOne) sqlSave(ctx context.Context) (t *Training, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   training.Table,
			Columns: training.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: training.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Training.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tuo.mutation.Branch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: training.FieldBranch,
		})
	}
	if value, ok := tuo.mutation.Dateone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: training.FieldDateone,
		})
	}
	if value, ok := tuo.mutation.Datetwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: training.FieldDatetwo,
		})
	}
	if tuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   training.CourseTable,
			Columns: []string{training.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   training.CourseTable,
			Columns: []string{training.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   training.DoctorTable,
			Columns: []string{training.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   training.DoctorTable,
			Columns: []string{training.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   training.DepartmentTable,
			Columns: []string{training.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   training.DepartmentTable,
			Columns: []string{training.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	t = &Training{config: tuo.config}
	_spec.Assign = t.assignValues
	_spec.ScanValues = t.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{training.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
