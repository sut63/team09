// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/course"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/detail"
	"github.com/team09/app/ent/mission"
)

// DetailCreate is the builder for creating a Detail entity.
type DetailCreate struct {
	config
	mutation *DetailMutation
	hooks    []Hook
}

// SetExplain sets the explain field.
func (dc *DetailCreate) SetExplain(s string) *DetailCreate {
	dc.mutation.SetExplain(s)
	return dc
}

// SetPhone sets the phone field.
func (dc *DetailCreate) SetPhone(s string) *DetailCreate {
	dc.mutation.SetPhone(s)
	return dc
}

// SetEmail sets the email field.
func (dc *DetailCreate) SetEmail(s string) *DetailCreate {
	dc.mutation.SetEmail(s)
	return dc
}

// SetCourseID sets the course edge to Course by id.
func (dc *DetailCreate) SetCourseID(id int) *DetailCreate {
	dc.mutation.SetCourseID(id)
	return dc
}

// SetNillableCourseID sets the course edge to Course by id if the given value is not nil.
func (dc *DetailCreate) SetNillableCourseID(id *int) *DetailCreate {
	if id != nil {
		dc = dc.SetCourseID(*id)
	}
	return dc
}

// SetCourse sets the course edge to Course.
func (dc *DetailCreate) SetCourse(c *Course) *DetailCreate {
	return dc.SetCourseID(c.ID)
}

// SetMissionID sets the mission edge to Mission by id.
func (dc *DetailCreate) SetMissionID(id int) *DetailCreate {
	dc.mutation.SetMissionID(id)
	return dc
}

// SetNillableMissionID sets the mission edge to Mission by id if the given value is not nil.
func (dc *DetailCreate) SetNillableMissionID(id *int) *DetailCreate {
	if id != nil {
		dc = dc.SetMissionID(*id)
	}
	return dc
}

// SetMission sets the mission edge to Mission.
func (dc *DetailCreate) SetMission(m *Mission) *DetailCreate {
	return dc.SetMissionID(m.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (dc *DetailCreate) SetDepartmentID(id int) *DetailCreate {
	dc.mutation.SetDepartmentID(id)
	return dc
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (dc *DetailCreate) SetNillableDepartmentID(id *int) *DetailCreate {
	if id != nil {
		dc = dc.SetDepartmentID(*id)
	}
	return dc
}

// SetDepartment sets the department edge to Department.
func (dc *DetailCreate) SetDepartment(d *Department) *DetailCreate {
	return dc.SetDepartmentID(d.ID)
}

// Mutation returns the DetailMutation object of the builder.
func (dc *DetailCreate) Mutation() *DetailMutation {
	return dc.mutation
}

// Save creates the Detail in the database.
func (dc *DetailCreate) Save(ctx context.Context) (*Detail, error) {
	if _, ok := dc.mutation.Explain(); !ok {
		return nil, &ValidationError{Name: "explain", err: errors.New("ent: missing required field \"explain\"")}
	}
	if v, ok := dc.mutation.Explain(); ok {
		if err := detail.ExplainValidator(v); err != nil {
			return nil, &ValidationError{Name: "explain", err: fmt.Errorf("ent: validator failed for field \"explain\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Phone(); !ok {
		return nil, &ValidationError{Name: "phone", err: errors.New("ent: missing required field \"phone\"")}
	}
	if v, ok := dc.mutation.Phone(); ok {
		if err := detail.PhoneValidator(v); err != nil {
			return nil, &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Email(); !ok {
		return nil, &ValidationError{Name: "email", err: errors.New("ent: missing required field \"email\"")}
	}
	if v, ok := dc.mutation.Email(); ok {
		if err := detail.EmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	var (
		err  error
		node *Detail
	)
	if len(dc.hooks) == 0 {
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DetailCreate) SaveX(ctx context.Context) *Detail {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DetailCreate) sqlSave(ctx context.Context) (*Detail, error) {
	d, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	d.ID = int(id)
	return d, nil
}

func (dc *DetailCreate) createSpec() (*Detail, *sqlgraph.CreateSpec) {
	var (
		d     = &Detail{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: detail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: detail.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.Explain(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detail.FieldExplain,
		})
		d.Explain = value
	}
	if value, ok := dc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detail.FieldPhone,
		})
		d.Phone = value
	}
	if value, ok := dc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detail.FieldEmail,
		})
		d.Email = value
	}
	if nodes := dc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.CourseTable,
			Columns: []string{detail.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.MissionTable,
			Columns: []string{detail.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.DepartmentTable,
			Columns: []string{detail.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return d, _spec
}
