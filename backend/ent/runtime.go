// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/team09/app/ent/course"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/detail"
	"github.com/team09/app/ent/disease"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/extradoctor"
	"github.com/team09/app/ent/gender"
	"github.com/team09/app/ent/mission"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/position"
	"github.com/team09/app/ent/schedule"
	"github.com/team09/app/ent/schema"
	"github.com/team09/app/ent/specialdoctor"
	"github.com/team09/app/ent/title"
	"github.com/team09/app/ent/training"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	courseFields := schema.Course{}.Fields()
	_ = courseFields
	// courseDescNamecourse is the schema descriptor for namecourse field.
	courseDescNamecourse := courseFields[0].Descriptor()
	// course.NamecourseValidator is a validator for the "namecourse" field. It is called by the builders before save.
	course.NamecourseValidator = courseDescNamecourse.Validators[0].(func(string) error)
	departmentFields := schema.Department{}.Fields()
	_ = departmentFields
	// departmentDescName is the schema descriptor for Name field.
	departmentDescName := departmentFields[0].Descriptor()
	// department.NameValidator is a validator for the "Name" field. It is called by the builders before save.
	department.NameValidator = departmentDescName.Validators[0].(func(string) error)
	detailFields := schema.Detail{}.Fields()
	_ = detailFields
	// detailDescExplain is the schema descriptor for explain field.
	detailDescExplain := detailFields[0].Descriptor()
	// detail.ExplainValidator is a validator for the "explain" field. It is called by the builders before save.
	detail.ExplainValidator = detailDescExplain.Validators[0].(func(string) error)
	// detailDescPhone is the schema descriptor for phone field.
	detailDescPhone := detailFields[1].Descriptor()
	// detail.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	detail.PhoneValidator = func() func(string) error {
		validators := detailDescPhone.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone string) error {
			for _, fn := range fns {
				if err := fn(phone); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// detailDescEmail is the schema descriptor for email field.
	detailDescEmail := detailFields[2].Descriptor()
	// detail.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	detail.EmailValidator = detailDescEmail.Validators[0].(func(string) error)
	diseaseFields := schema.Disease{}.Fields()
	_ = diseaseFields
	// diseaseDescDisease is the schema descriptor for disease field.
	diseaseDescDisease := diseaseFields[0].Descriptor()
	// disease.DiseaseValidator is a validator for the "disease" field. It is called by the builders before save.
	disease.DiseaseValidator = diseaseDescDisease.Validators[0].(func(string) error)
	doctorFields := schema.Doctor{}.Fields()
	_ = doctorFields
	// doctorDescName is the schema descriptor for name field.
	doctorDescName := doctorFields[0].Descriptor()
	// doctor.NameValidator is a validator for the "name" field. It is called by the builders before save.
	doctor.NameValidator = doctorDescName.Validators[0].(func(string) error)
	// doctorDescAge is the schema descriptor for age field.
	doctorDescAge := doctorFields[1].Descriptor()
	// doctor.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	doctor.AgeValidator = doctorDescAge.Validators[0].(func(int) error)
	// doctorDescEmail is the schema descriptor for email field.
	doctorDescEmail := doctorFields[2].Descriptor()
	// doctor.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	doctor.EmailValidator = doctorDescEmail.Validators[0].(func(string) error)
	// doctorDescPassword is the schema descriptor for password field.
	doctorDescPassword := doctorFields[3].Descriptor()
	// doctor.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	doctor.PasswordValidator = func() func(string) error {
		validators := doctorDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// doctorDescAddress is the schema descriptor for address field.
	doctorDescAddress := doctorFields[4].Descriptor()
	// doctor.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	doctor.AddressValidator = doctorDescAddress.Validators[0].(func(string) error)
	// doctorDescEducational is the schema descriptor for educational field.
	doctorDescEducational := doctorFields[5].Descriptor()
	// doctor.EducationalValidator is a validator for the "educational" field. It is called by the builders before save.
	doctor.EducationalValidator = doctorDescEducational.Validators[0].(func(string) error)
	// doctorDescPhone is the schema descriptor for phone field.
	doctorDescPhone := doctorFields[6].Descriptor()
	// doctor.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	doctor.PhoneValidator = func() func(string) error {
		validators := doctorDescPhone.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone string) error {
			for _, fn := range fns {
				if err := fn(phone); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	extradoctorFields := schema.Extradoctor{}.Fields()
	_ = extradoctorFields
	// extradoctorDescSpecialname is the schema descriptor for specialname field.
	extradoctorDescSpecialname := extradoctorFields[0].Descriptor()
	// extradoctor.SpecialnameValidator is a validator for the "specialname" field. It is called by the builders before save.
	extradoctor.SpecialnameValidator = extradoctorDescSpecialname.Validators[0].(func(string) error)
	genderFields := schema.Gender{}.Fields()
	_ = genderFields
	// genderDescGender is the schema descriptor for gender field.
	genderDescGender := genderFields[0].Descriptor()
	// gender.GenderValidator is a validator for the "gender" field. It is called by the builders before save.
	gender.GenderValidator = genderDescGender.Validators[0].(func(string) error)
	missionFields := schema.Mission{}.Fields()
	_ = missionFields
	// missionDescMission is the schema descriptor for mission field.
	missionDescMission := missionFields[0].Descriptor()
	// mission.MissionValidator is a validator for the "mission" field. It is called by the builders before save.
	mission.MissionValidator = missionDescMission.Validators[0].(func(string) error)
	officeFields := schema.Office{}.Fields()
	_ = officeFields
	// officeDescOfficename is the schema descriptor for officename field.
	officeDescOfficename := officeFields[0].Descriptor()
	// office.OfficenameValidator is a validator for the "officename" field. It is called by the builders before save.
	office.OfficenameValidator = officeDescOfficename.Validators[0].(func(string) error)
	// officeDescRoomnumber is the schema descriptor for roomnumber field.
	officeDescRoomnumber := officeFields[1].Descriptor()
	// office.RoomnumberValidator is a validator for the "roomnumber" field. It is called by the builders before save.
	office.RoomnumberValidator = officeDescRoomnumber.Validators[0].(func(string) error)
	// officeDescDoctoridcard is the schema descriptor for doctoridcard field.
	officeDescDoctoridcard := officeFields[2].Descriptor()
	// office.DoctoridcardValidator is a validator for the "doctoridcard" field. It is called by the builders before save.
	office.DoctoridcardValidator = func() func(string) error {
		validators := officeDescDoctoridcard.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(doctoridcard string) error {
			for _, fn := range fns {
				if err := fn(doctoridcard); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	positionFields := schema.Position{}.Fields()
	_ = positionFields
	// positionDescPosition is the schema descriptor for position field.
	positionDescPosition := positionFields[0].Descriptor()
	// position.PositionValidator is a validator for the "position" field. It is called by the builders before save.
	position.PositionValidator = positionDescPosition.Validators[0].(func(string) error)
	scheduleFields := schema.Schedule{}.Fields()
	_ = scheduleFields
	// scheduleDescActivity is the schema descriptor for Activity field.
	scheduleDescActivity := scheduleFields[0].Descriptor()
	// schedule.ActivityValidator is a validator for the "Activity" field. It is called by the builders before save.
	schedule.ActivityValidator = scheduleDescActivity.Validators[0].(func(string) error)
	// scheduleDescRoomnumber is the schema descriptor for Roomnumber field.
	scheduleDescRoomnumber := scheduleFields[1].Descriptor()
	// schedule.RoomnumberValidator is a validator for the "Roomnumber" field. It is called by the builders before save.
	schedule.RoomnumberValidator = scheduleDescRoomnumber.Validators[0].(func(string) error)
	// scheduleDescDocterid is the schema descriptor for Docterid field.
	scheduleDescDocterid := scheduleFields[2].Descriptor()
	// schedule.DocteridValidator is a validator for the "Docterid" field. It is called by the builders before save.
	schedule.DocteridValidator = func() func(string) error {
		validators := scheduleDescDocterid.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Docterid string) error {
			for _, fn := range fns {
				if err := fn(_Docterid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	specialdoctorFields := schema.Specialdoctor{}.Fields()
	_ = specialdoctorFields
	// specialdoctorDescRoomnumber is the schema descriptor for Roomnumber field.
	specialdoctorDescRoomnumber := specialdoctorFields[0].Descriptor()
	// specialdoctor.RoomnumberValidator is a validator for the "Roomnumber" field. It is called by the builders before save.
	specialdoctor.RoomnumberValidator = specialdoctorDescRoomnumber.Validators[0].(func(string) error)
	// specialdoctorDescDoctorid is the schema descriptor for Doctorid field.
	specialdoctorDescDoctorid := specialdoctorFields[1].Descriptor()
	// specialdoctor.DoctoridValidator is a validator for the "Doctorid" field. It is called by the builders before save.
	specialdoctor.DoctoridValidator = func() func(string) error {
		validators := specialdoctorDescDoctorid.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Doctorid string) error {
			for _, fn := range fns {
				if err := fn(_Doctorid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// specialdoctorDescOther is the schema descriptor for Other field.
	specialdoctorDescOther := specialdoctorFields[2].Descriptor()
	// specialdoctor.OtherValidator is a validator for the "Other" field. It is called by the builders before save.
	specialdoctor.OtherValidator = specialdoctorDescOther.Validators[0].(func(string) error)
	titleFields := schema.Title{}.Fields()
	_ = titleFields
	// titleDescTitle is the schema descriptor for title field.
	titleDescTitle := titleFields[0].Descriptor()
	// title.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	title.TitleValidator = titleDescTitle.Validators[0].(func(string) error)
	trainingFields := schema.Training{}.Fields()
	_ = trainingFields
	// trainingDescBranch is the schema descriptor for branch field.
	trainingDescBranch := trainingFields[0].Descriptor()
	// training.BranchValidator is a validator for the "branch" field. It is called by the builders before save.
	training.BranchValidator = trainingDescBranch.Validators[0].(func(string) error)
	// trainingDescDoctoridcard is the schema descriptor for doctoridcard field.
	trainingDescDoctoridcard := trainingFields[3].Descriptor()
	// training.DoctoridcardValidator is a validator for the "doctoridcard" field. It is called by the builders before save.
	training.DoctoridcardValidator = func() func(string) error {
		validators := trainingDescDoctoridcard.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(doctoridcard string) error {
			for _, fn := range fns {
				if err := fn(doctoridcard); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// trainingDescHour is the schema descriptor for hour field.
	trainingDescHour := trainingFields[4].Descriptor()
	// training.HourValidator is a validator for the "hour" field. It is called by the builders before save.
	training.HourValidator = trainingDescHour.Validators[0].(func(string) error)
}
