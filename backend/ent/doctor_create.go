// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/disease"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/gender"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/position"
	"github.com/team09/app/ent/title"
)

// DoctorCreate is the builder for creating a Doctor entity.
type DoctorCreate struct {
	config
	mutation *DoctorMutation
	hooks    []Hook
}

// SetName sets the name field.
func (dc *DoctorCreate) SetName(s string) *DoctorCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetAge sets the age field.
func (dc *DoctorCreate) SetAge(i int) *DoctorCreate {
	dc.mutation.SetAge(i)
	return dc
}

// SetEmail sets the email field.
func (dc *DoctorCreate) SetEmail(s string) *DoctorCreate {
	dc.mutation.SetEmail(s)
	return dc
}

// SetPnumber sets the pnumber field.
func (dc *DoctorCreate) SetPnumber(i int) *DoctorCreate {
	dc.mutation.SetPnumber(i)
	return dc
}

// SetAddress sets the address field.
func (dc *DoctorCreate) SetAddress(s string) *DoctorCreate {
	dc.mutation.SetAddress(s)
	return dc
}

// SetEducational sets the educational field.
func (dc *DoctorCreate) SetEducational(s string) *DoctorCreate {
	dc.mutation.SetEducational(s)
	return dc
}

// SetTitleID sets the title edge to Title by id.
func (dc *DoctorCreate) SetTitleID(id int) *DoctorCreate {
	dc.mutation.SetTitleID(id)
	return dc
}

// SetNillableTitleID sets the title edge to Title by id if the given value is not nil.
func (dc *DoctorCreate) SetNillableTitleID(id *int) *DoctorCreate {
	if id != nil {
		dc = dc.SetTitleID(*id)
	}
	return dc
}

// SetTitle sets the title edge to Title.
func (dc *DoctorCreate) SetTitle(t *Title) *DoctorCreate {
	return dc.SetTitleID(t.ID)
}

// SetGenderID sets the gender edge to Gender by id.
func (dc *DoctorCreate) SetGenderID(id int) *DoctorCreate {
	dc.mutation.SetGenderID(id)
	return dc
}

// SetNillableGenderID sets the gender edge to Gender by id if the given value is not nil.
func (dc *DoctorCreate) SetNillableGenderID(id *int) *DoctorCreate {
	if id != nil {
		dc = dc.SetGenderID(*id)
	}
	return dc
}

// SetGender sets the gender edge to Gender.
func (dc *DoctorCreate) SetGender(g *Gender) *DoctorCreate {
	return dc.SetGenderID(g.ID)
}

// SetPositionID sets the position edge to Position by id.
func (dc *DoctorCreate) SetPositionID(id int) *DoctorCreate {
	dc.mutation.SetPositionID(id)
	return dc
}

// SetNillablePositionID sets the position edge to Position by id if the given value is not nil.
func (dc *DoctorCreate) SetNillablePositionID(id *int) *DoctorCreate {
	if id != nil {
		dc = dc.SetPositionID(*id)
	}
	return dc
}

// SetPosition sets the position edge to Position.
func (dc *DoctorCreate) SetPosition(p *Position) *DoctorCreate {
	return dc.SetPositionID(p.ID)
}

// SetDiseaseID sets the disease edge to Disease by id.
func (dc *DoctorCreate) SetDiseaseID(id int) *DoctorCreate {
	dc.mutation.SetDiseaseID(id)
	return dc
}

// SetNillableDiseaseID sets the disease edge to Disease by id if the given value is not nil.
func (dc *DoctorCreate) SetNillableDiseaseID(id *int) *DoctorCreate {
	if id != nil {
		dc = dc.SetDiseaseID(*id)
	}
	return dc
}

// SetDisease sets the disease edge to Disease.
func (dc *DoctorCreate) SetDisease(d *Disease) *DoctorCreate {
	return dc.SetDiseaseID(d.ID)
}

// AddOfficeIDs adds the offices edge to Office by ids.
func (dc *DoctorCreate) AddOfficeIDs(ids ...int) *DoctorCreate {
	dc.mutation.AddOfficeIDs(ids...)
	return dc
}

// AddOffices adds the offices edges to Office.
func (dc *DoctorCreate) AddOffices(o ...*Office) *DoctorCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return dc.AddOfficeIDs(ids...)
}

// AddDepartmentIDs adds the departments edge to Department by ids.
func (dc *DoctorCreate) AddDepartmentIDs(ids ...int) *DoctorCreate {
	dc.mutation.AddDepartmentIDs(ids...)
	return dc
}

// AddDepartments adds the departments edges to Department.
func (dc *DoctorCreate) AddDepartments(d ...*Department) *DoctorCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddDepartmentIDs(ids...)
}

// Mutation returns the DoctorMutation object of the builder.
func (dc *DoctorCreate) Mutation() *DoctorMutation {
	return dc.mutation
}

// Save creates the Doctor in the database.
func (dc *DoctorCreate) Save(ctx context.Context) (*Doctor, error) {
	if _, ok := dc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := dc.mutation.Name(); ok {
		if err := doctor.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Age(); !ok {
		return nil, &ValidationError{Name: "age", err: errors.New("ent: missing required field \"age\"")}
	}
	if v, ok := dc.mutation.Age(); ok {
		if err := doctor.AgeValidator(v); err != nil {
			return nil, &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Email(); !ok {
		return nil, &ValidationError{Name: "email", err: errors.New("ent: missing required field \"email\"")}
	}
	if v, ok := dc.mutation.Email(); ok {
		if err := doctor.EmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Pnumber(); !ok {
		return nil, &ValidationError{Name: "pnumber", err: errors.New("ent: missing required field \"pnumber\"")}
	}
	if v, ok := dc.mutation.Pnumber(); ok {
		if err := doctor.PnumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "pnumber", err: fmt.Errorf("ent: validator failed for field \"pnumber\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Address(); !ok {
		return nil, &ValidationError{Name: "address", err: errors.New("ent: missing required field \"address\"")}
	}
	if v, ok := dc.mutation.Address(); ok {
		if err := doctor.AddressValidator(v); err != nil {
			return nil, &ValidationError{Name: "address", err: fmt.Errorf("ent: validator failed for field \"address\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Educational(); !ok {
		return nil, &ValidationError{Name: "educational", err: errors.New("ent: missing required field \"educational\"")}
	}
	if v, ok := dc.mutation.Educational(); ok {
		if err := doctor.EducationalValidator(v); err != nil {
			return nil, &ValidationError{Name: "educational", err: fmt.Errorf("ent: validator failed for field \"educational\": %w", err)}
		}
	}
	var (
		err  error
		node *Doctor
	)
	if len(dc.hooks) == 0 {
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DoctorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DoctorCreate) SaveX(ctx context.Context) *Doctor {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DoctorCreate) sqlSave(ctx context.Context) (*Doctor, error) {
	d, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	d.ID = int(id)
	return d, nil
}

func (dc *DoctorCreate) createSpec() (*Doctor, *sqlgraph.CreateSpec) {
	var (
		d     = &Doctor{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: doctor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: doctor.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldName,
		})
		d.Name = value
	}
	if value, ok := dc.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: doctor.FieldAge,
		})
		d.Age = value
	}
	if value, ok := dc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldEmail,
		})
		d.Email = value
	}
	if value, ok := dc.mutation.Pnumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: doctor.FieldPnumber,
		})
		d.Pnumber = value
	}
	if value, ok := dc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldAddress,
		})
		d.Address = value
	}
	if value, ok := dc.mutation.Educational(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldEducational,
		})
		d.Educational = value
	}
	if nodes := dc.mutation.TitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.TitleTable,
			Columns: []string{doctor.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: title.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.GenderTable,
			Columns: []string{doctor.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.PositionTable,
			Columns: []string{doctor.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.DiseaseTable,
			Columns: []string{doctor.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.OfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.OfficesTable,
			Columns: []string{doctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.DepartmentsTable,
			Columns: []string{doctor.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return d, _spec
}
