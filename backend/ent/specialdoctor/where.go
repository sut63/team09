// Code generated by entc, DO NOT EDIT.

package specialdoctor

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team09/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Roomnumber applies equality check predicate on the "Roomnumber" field. It's identical to RoomnumberEQ.
func Roomnumber(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomnumber), v))
	})
}

// Doctorid applies equality check predicate on the "Doctorid" field. It's identical to DoctoridEQ.
func Doctorid(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctorid), v))
	})
}

// Other applies equality check predicate on the "Other" field. It's identical to OtherEQ.
func Other(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOther), v))
	})
}

// RoomnumberEQ applies the EQ predicate on the "Roomnumber" field.
func RoomnumberEQ(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberNEQ applies the NEQ predicate on the "Roomnumber" field.
func RoomnumberNEQ(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberIn applies the In predicate on the "Roomnumber" field.
func RoomnumberIn(vs ...string) predicate.Specialdoctor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Specialdoctor(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomnumber), v...))
	})
}

// RoomnumberNotIn applies the NotIn predicate on the "Roomnumber" field.
func RoomnumberNotIn(vs ...string) predicate.Specialdoctor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Specialdoctor(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomnumber), v...))
	})
}

// RoomnumberGT applies the GT predicate on the "Roomnumber" field.
func RoomnumberGT(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberGTE applies the GTE predicate on the "Roomnumber" field.
func RoomnumberGTE(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberLT applies the LT predicate on the "Roomnumber" field.
func RoomnumberLT(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberLTE applies the LTE predicate on the "Roomnumber" field.
func RoomnumberLTE(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberContains applies the Contains predicate on the "Roomnumber" field.
func RoomnumberContains(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberHasPrefix applies the HasPrefix predicate on the "Roomnumber" field.
func RoomnumberHasPrefix(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberHasSuffix applies the HasSuffix predicate on the "Roomnumber" field.
func RoomnumberHasSuffix(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberEqualFold applies the EqualFold predicate on the "Roomnumber" field.
func RoomnumberEqualFold(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberContainsFold applies the ContainsFold predicate on the "Roomnumber" field.
func RoomnumberContainsFold(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoomnumber), v))
	})
}

// DoctoridEQ applies the EQ predicate on the "Doctorid" field.
func DoctoridEQ(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctorid), v))
	})
}

// DoctoridNEQ applies the NEQ predicate on the "Doctorid" field.
func DoctoridNEQ(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDoctorid), v))
	})
}

// DoctoridIn applies the In predicate on the "Doctorid" field.
func DoctoridIn(vs ...string) predicate.Specialdoctor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Specialdoctor(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDoctorid), v...))
	})
}

// DoctoridNotIn applies the NotIn predicate on the "Doctorid" field.
func DoctoridNotIn(vs ...string) predicate.Specialdoctor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Specialdoctor(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDoctorid), v...))
	})
}

// DoctoridGT applies the GT predicate on the "Doctorid" field.
func DoctoridGT(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDoctorid), v))
	})
}

// DoctoridGTE applies the GTE predicate on the "Doctorid" field.
func DoctoridGTE(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDoctorid), v))
	})
}

// DoctoridLT applies the LT predicate on the "Doctorid" field.
func DoctoridLT(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDoctorid), v))
	})
}

// DoctoridLTE applies the LTE predicate on the "Doctorid" field.
func DoctoridLTE(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDoctorid), v))
	})
}

// DoctoridContains applies the Contains predicate on the "Doctorid" field.
func DoctoridContains(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDoctorid), v))
	})
}

// DoctoridHasPrefix applies the HasPrefix predicate on the "Doctorid" field.
func DoctoridHasPrefix(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDoctorid), v))
	})
}

// DoctoridHasSuffix applies the HasSuffix predicate on the "Doctorid" field.
func DoctoridHasSuffix(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDoctorid), v))
	})
}

// DoctoridEqualFold applies the EqualFold predicate on the "Doctorid" field.
func DoctoridEqualFold(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDoctorid), v))
	})
}

// DoctoridContainsFold applies the ContainsFold predicate on the "Doctorid" field.
func DoctoridContainsFold(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDoctorid), v))
	})
}

// OtherEQ applies the EQ predicate on the "Other" field.
func OtherEQ(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOther), v))
	})
}

// OtherNEQ applies the NEQ predicate on the "Other" field.
func OtherNEQ(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOther), v))
	})
}

// OtherIn applies the In predicate on the "Other" field.
func OtherIn(vs ...string) predicate.Specialdoctor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Specialdoctor(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOther), v...))
	})
}

// OtherNotIn applies the NotIn predicate on the "Other" field.
func OtherNotIn(vs ...string) predicate.Specialdoctor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Specialdoctor(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOther), v...))
	})
}

// OtherGT applies the GT predicate on the "Other" field.
func OtherGT(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOther), v))
	})
}

// OtherGTE applies the GTE predicate on the "Other" field.
func OtherGTE(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOther), v))
	})
}

// OtherLT applies the LT predicate on the "Other" field.
func OtherLT(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOther), v))
	})
}

// OtherLTE applies the LTE predicate on the "Other" field.
func OtherLTE(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOther), v))
	})
}

// OtherContains applies the Contains predicate on the "Other" field.
func OtherContains(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOther), v))
	})
}

// OtherHasPrefix applies the HasPrefix predicate on the "Other" field.
func OtherHasPrefix(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOther), v))
	})
}

// OtherHasSuffix applies the HasSuffix predicate on the "Other" field.
func OtherHasSuffix(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOther), v))
	})
}

// OtherEqualFold applies the EqualFold predicate on the "Other" field.
func OtherEqualFold(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOther), v))
	})
}

// OtherContainsFold applies the ContainsFold predicate on the "Other" field.
func OtherContainsFold(v string) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOther), v))
	})
}

// HasDoctor applies the HasEdge predicate on the "doctor" edge.
func HasDoctor() predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDoctorWith applies the HasEdge predicate on the "doctor" edge with a given conditions (other predicates).
func HasDoctorWith(preds ...predicate.Doctor) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDepartment applies the HasEdge predicate on the "department" edge.
func HasDepartment() predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DepartmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentWith applies the HasEdge predicate on the "department" edge with a given conditions (other predicates).
func HasDepartmentWith(preds ...predicate.Department) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DepartmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExtradoctor applies the HasEdge predicate on the "extradoctor" edge.
func HasExtradoctor() predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExtradoctorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExtradoctorTable, ExtradoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExtradoctorWith applies the HasEdge predicate on the "extradoctor" edge with a given conditions (other predicates).
func HasExtradoctorWith(preds ...predicate.Extradoctor) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExtradoctorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExtradoctorTable, ExtradoctorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Specialdoctor) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Specialdoctor) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Specialdoctor) predicate.Specialdoctor {
	return predicate.Specialdoctor(func(s *sql.Selector) {
		p(s.Not())
	})
}
