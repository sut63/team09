// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team09/app/ent/workingtime"
)

// Workingtime is the model entity for the Workingtime schema.
type Workingtime struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AddedTime holds the value of the "added_time" field.
	AddedTime time.Time `json:"added_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkingtimeQuery when eager-loading is set.
	Edges WorkingtimeEdges `json:"edges"`
}

// WorkingtimeEdges holds the relations/edges for other nodes in the graph.
type WorkingtimeEdges struct {
	// Doctors holds the value of the doctors edge.
	Doctors []*Doctor
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DoctorsOrErr returns the Doctors value or an error if the edge
// was not loaded in eager-loading.
func (e WorkingtimeEdges) DoctorsOrErr() ([]*Doctor, error) {
	if e.loadedTypes[0] {
		return e.Doctors, nil
	}
	return nil, &NotLoadedError{edge: "doctors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Workingtime) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // added_time
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Workingtime fields.
func (w *Workingtime) assignValues(values ...interface{}) error {
	if m, n := len(values), len(workingtime.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	w.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field added_time", values[0])
	} else if value.Valid {
		w.AddedTime = value.Time
	}
	return nil
}

// QueryDoctors queries the doctors edge of the Workingtime.
func (w *Workingtime) QueryDoctors() *DoctorQuery {
	return (&WorkingtimeClient{config: w.config}).QueryDoctors(w)
}

// Update returns a builder for updating this Workingtime.
// Note that, you need to call Workingtime.Unwrap() before calling this method, if this Workingtime
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Workingtime) Update() *WorkingtimeUpdateOne {
	return (&WorkingtimeClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (w *Workingtime) Unwrap() *Workingtime {
	tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Workingtime is not a transactional entity")
	}
	w.config.driver = tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Workingtime) String() string {
	var builder strings.Builder
	builder.WriteString("Workingtime(")
	builder.WriteString(fmt.Sprintf("id=%v", w.ID))
	builder.WriteString(", added_time=")
	builder.WriteString(w.AddedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Workingtimes is a parsable slice of Workingtime.
type Workingtimes []*Workingtime

func (w Workingtimes) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
