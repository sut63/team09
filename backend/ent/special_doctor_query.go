// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/predicate"
	"github.com/team09/app/ent/special_doctor"
	"github.com/team09/app/ent/specialist"
)

// SpecialDoctorQuery is the builder for querying SpecialDoctor entities.
type SpecialDoctorQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.Special_Doctor
	// eager-loading edges.
	withDoctor     *DoctorQuery
	withDepartment *DepartmentQuery
	withSpecialist *SpecialistQuery
	withOffices    *OfficeQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (sdq *SpecialDoctorQuery) Where(ps ...predicate.Special_Doctor) *SpecialDoctorQuery {
	sdq.predicates = append(sdq.predicates, ps...)
	return sdq
}

// Limit adds a limit step to the query.
func (sdq *SpecialDoctorQuery) Limit(limit int) *SpecialDoctorQuery {
	sdq.limit = &limit
	return sdq
}

// Offset adds an offset step to the query.
func (sdq *SpecialDoctorQuery) Offset(offset int) *SpecialDoctorQuery {
	sdq.offset = &offset
	return sdq
}

// Order adds an order step to the query.
func (sdq *SpecialDoctorQuery) Order(o ...OrderFunc) *SpecialDoctorQuery {
	sdq.order = append(sdq.order, o...)
	return sdq
}

// QueryDoctor chains the current query on the doctor edge.
func (sdq *SpecialDoctorQuery) QueryDoctor() *DoctorQuery {
	query := &DoctorQuery{config: sdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(special_doctor.Table, special_doctor.FieldID, sdq.sqlQuery()),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, special_doctor.DoctorTable, special_doctor.DoctorColumn),
		)
		fromU = sqlgraph.SetNeighbors(sdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDepartment chains the current query on the department edge.
func (sdq *SpecialDoctorQuery) QueryDepartment() *DepartmentQuery {
	query := &DepartmentQuery{config: sdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(special_doctor.Table, special_doctor.FieldID, sdq.sqlQuery()),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, special_doctor.DepartmentTable, special_doctor.DepartmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(sdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySpecialist chains the current query on the specialist edge.
func (sdq *SpecialDoctorQuery) QuerySpecialist() *SpecialistQuery {
	query := &SpecialistQuery{config: sdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(special_doctor.Table, special_doctor.FieldID, sdq.sqlQuery()),
			sqlgraph.To(specialist.Table, specialist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, special_doctor.SpecialistTable, special_doctor.SpecialistColumn),
		)
		fromU = sqlgraph.SetNeighbors(sdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOffices chains the current query on the offices edge.
func (sdq *SpecialDoctorQuery) QueryOffices() *OfficeQuery {
	query := &OfficeQuery{config: sdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(special_doctor.Table, special_doctor.FieldID, sdq.sqlQuery()),
			sqlgraph.To(office.Table, office.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, special_doctor.OfficesTable, special_doctor.OfficesColumn),
		)
		fromU = sqlgraph.SetNeighbors(sdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Special_Doctor entity in the query. Returns *NotFoundError when no special_doctor was found.
func (sdq *SpecialDoctorQuery) First(ctx context.Context) (*Special_Doctor, error) {
	sds, err := sdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(sds) == 0 {
		return nil, &NotFoundError{special_doctor.Label}
	}
	return sds[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sdq *SpecialDoctorQuery) FirstX(ctx context.Context) *Special_Doctor {
	sd, err := sdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return sd
}

// FirstID returns the first Special_Doctor id in the query. Returns *NotFoundError when no id was found.
func (sdq *SpecialDoctorQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{special_doctor.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (sdq *SpecialDoctorQuery) FirstXID(ctx context.Context) int {
	id, err := sdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only Special_Doctor entity in the query, returns an error if not exactly one entity was returned.
func (sdq *SpecialDoctorQuery) Only(ctx context.Context) (*Special_Doctor, error) {
	sds, err := sdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(sds) {
	case 1:
		return sds[0], nil
	case 0:
		return nil, &NotFoundError{special_doctor.Label}
	default:
		return nil, &NotSingularError{special_doctor.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sdq *SpecialDoctorQuery) OnlyX(ctx context.Context) *Special_Doctor {
	sd, err := sdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return sd
}

// OnlyID returns the only Special_Doctor id in the query, returns an error if not exactly one id was returned.
func (sdq *SpecialDoctorQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{special_doctor.Label}
	default:
		err = &NotSingularError{special_doctor.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sdq *SpecialDoctorQuery) OnlyIDX(ctx context.Context) int {
	id, err := sdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Special_Doctors.
func (sdq *SpecialDoctorQuery) All(ctx context.Context) ([]*Special_Doctor, error) {
	if err := sdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sdq *SpecialDoctorQuery) AllX(ctx context.Context) []*Special_Doctor {
	sds, err := sdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return sds
}

// IDs executes the query and returns a list of Special_Doctor ids.
func (sdq *SpecialDoctorQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := sdq.Select(special_doctor.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sdq *SpecialDoctorQuery) IDsX(ctx context.Context) []int {
	ids, err := sdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sdq *SpecialDoctorQuery) Count(ctx context.Context) (int, error) {
	if err := sdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sdq *SpecialDoctorQuery) CountX(ctx context.Context) int {
	count, err := sdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sdq *SpecialDoctorQuery) Exist(ctx context.Context) (bool, error) {
	if err := sdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sdq *SpecialDoctorQuery) ExistX(ctx context.Context) bool {
	exist, err := sdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sdq *SpecialDoctorQuery) Clone() *SpecialDoctorQuery {
	return &SpecialDoctorQuery{
		config:     sdq.config,
		limit:      sdq.limit,
		offset:     sdq.offset,
		order:      append([]OrderFunc{}, sdq.order...),
		unique:     append([]string{}, sdq.unique...),
		predicates: append([]predicate.Special_Doctor{}, sdq.predicates...),
		// clone intermediate query.
		sql:  sdq.sql.Clone(),
		path: sdq.path,
	}
}

//  WithDoctor tells the query-builder to eager-loads the nodes that are connected to
// the "doctor" edge. The optional arguments used to configure the query builder of the edge.
func (sdq *SpecialDoctorQuery) WithDoctor(opts ...func(*DoctorQuery)) *SpecialDoctorQuery {
	query := &DoctorQuery{config: sdq.config}
	for _, opt := range opts {
		opt(query)
	}
	sdq.withDoctor = query
	return sdq
}

//  WithDepartment tells the query-builder to eager-loads the nodes that are connected to
// the "department" edge. The optional arguments used to configure the query builder of the edge.
func (sdq *SpecialDoctorQuery) WithDepartment(opts ...func(*DepartmentQuery)) *SpecialDoctorQuery {
	query := &DepartmentQuery{config: sdq.config}
	for _, opt := range opts {
		opt(query)
	}
	sdq.withDepartment = query
	return sdq
}

//  WithSpecialist tells the query-builder to eager-loads the nodes that are connected to
// the "specialist" edge. The optional arguments used to configure the query builder of the edge.
func (sdq *SpecialDoctorQuery) WithSpecialist(opts ...func(*SpecialistQuery)) *SpecialDoctorQuery {
	query := &SpecialistQuery{config: sdq.config}
	for _, opt := range opts {
		opt(query)
	}
	sdq.withSpecialist = query
	return sdq
}

//  WithOffices tells the query-builder to eager-loads the nodes that are connected to
// the "offices" edge. The optional arguments used to configure the query builder of the edge.
func (sdq *SpecialDoctorQuery) WithOffices(opts ...func(*OfficeQuery)) *SpecialDoctorQuery {
	query := &OfficeQuery{config: sdq.config}
	for _, opt := range opts {
		opt(query)
	}
	sdq.withOffices = query
	return sdq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Other string `json:"Other,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SpecialDoctor.Query().
//		GroupBy(special_doctor.FieldOther).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (sdq *SpecialDoctorQuery) GroupBy(field string, fields ...string) *SpecialDoctorGroupBy {
	group := &SpecialDoctorGroupBy{config: sdq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sdq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Other string `json:"Other,omitempty"`
//	}
//
//	client.SpecialDoctor.Query().
//		Select(special_doctor.FieldOther).
//		Scan(ctx, &v)
//
func (sdq *SpecialDoctorQuery) Select(field string, fields ...string) *SpecialDoctorSelect {
	selector := &SpecialDoctorSelect{config: sdq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sdq.sqlQuery(), nil
	}
	return selector
}

func (sdq *SpecialDoctorQuery) prepareQuery(ctx context.Context) error {
	if sdq.path != nil {
		prev, err := sdq.path(ctx)
		if err != nil {
			return err
		}
		sdq.sql = prev
	}
	return nil
}

func (sdq *SpecialDoctorQuery) sqlAll(ctx context.Context) ([]*Special_Doctor, error) {
	var (
		nodes       = []*Special_Doctor{}
		withFKs     = sdq.withFKs
		_spec       = sdq.querySpec()
		loadedTypes = [4]bool{
			sdq.withDoctor != nil,
			sdq.withDepartment != nil,
			sdq.withSpecialist != nil,
			sdq.withOffices != nil,
		}
	)
	if sdq.withDoctor != nil || sdq.withDepartment != nil || sdq.withSpecialist != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, special_doctor.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &Special_Doctor{config: sdq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, sdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := sdq.withDoctor; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Special_Doctor)
		for i := range nodes {
			if fk := nodes[i].special_doctor_doctor; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(doctor.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "special_doctor_doctor" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Doctor = n
			}
		}
	}

	if query := sdq.withDepartment; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Special_Doctor)
		for i := range nodes {
			if fk := nodes[i].department_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(department.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "department_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Department = n
			}
		}
	}

	if query := sdq.withSpecialist; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Special_Doctor)
		for i := range nodes {
			if fk := nodes[i].specialist_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(specialist.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "specialist_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Specialist = n
			}
		}
	}

	if query := sdq.withOffices; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Special_Doctor)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Office(func(s *sql.Selector) {
			s.Where(sql.InValues(special_doctor.OfficesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.special_doctor_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "special_doctor_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "special_doctor_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Offices = append(node.Edges.Offices, n)
		}
	}

	return nodes, nil
}

func (sdq *SpecialDoctorQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sdq.querySpec()
	return sqlgraph.CountNodes(ctx, sdq.driver, _spec)
}

func (sdq *SpecialDoctorQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := sdq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (sdq *SpecialDoctorQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   special_doctor.Table,
			Columns: special_doctor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: special_doctor.FieldID,
			},
		},
		From:   sdq.sql,
		Unique: true,
	}
	if ps := sdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sdq *SpecialDoctorQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(sdq.driver.Dialect())
	t1 := builder.Table(special_doctor.Table)
	selector := builder.Select(t1.Columns(special_doctor.Columns...)...).From(t1)
	if sdq.sql != nil {
		selector = sdq.sql
		selector.Select(selector.Columns(special_doctor.Columns...)...)
	}
	for _, p := range sdq.predicates {
		p(selector)
	}
	for _, p := range sdq.order {
		p(selector)
	}
	if offset := sdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SpecialDoctorGroupBy is the builder for group-by SpecialDoctor entities.
type SpecialDoctorGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sdgb *SpecialDoctorGroupBy) Aggregate(fns ...AggregateFunc) *SpecialDoctorGroupBy {
	sdgb.fns = append(sdgb.fns, fns...)
	return sdgb
}

// Scan applies the group-by query and scan the result into the given value.
func (sdgb *SpecialDoctorGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sdgb.path(ctx)
	if err != nil {
		return err
	}
	sdgb.sql = query
	return sdgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sdgb *SpecialDoctorGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sdgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (sdgb *SpecialDoctorGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sdgb.fields) > 1 {
		return nil, errors.New("ent: SpecialDoctorGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sdgb *SpecialDoctorGroupBy) StringsX(ctx context.Context) []string {
	v, err := sdgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (sdgb *SpecialDoctorGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sdgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{special_doctor.Label}
	default:
		err = fmt.Errorf("ent: SpecialDoctorGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sdgb *SpecialDoctorGroupBy) StringX(ctx context.Context) string {
	v, err := sdgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (sdgb *SpecialDoctorGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sdgb.fields) > 1 {
		return nil, errors.New("ent: SpecialDoctorGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sdgb *SpecialDoctorGroupBy) IntsX(ctx context.Context) []int {
	v, err := sdgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (sdgb *SpecialDoctorGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sdgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{special_doctor.Label}
	default:
		err = fmt.Errorf("ent: SpecialDoctorGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sdgb *SpecialDoctorGroupBy) IntX(ctx context.Context) int {
	v, err := sdgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (sdgb *SpecialDoctorGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sdgb.fields) > 1 {
		return nil, errors.New("ent: SpecialDoctorGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sdgb *SpecialDoctorGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sdgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (sdgb *SpecialDoctorGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sdgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{special_doctor.Label}
	default:
		err = fmt.Errorf("ent: SpecialDoctorGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sdgb *SpecialDoctorGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sdgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (sdgb *SpecialDoctorGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sdgb.fields) > 1 {
		return nil, errors.New("ent: SpecialDoctorGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sdgb *SpecialDoctorGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sdgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (sdgb *SpecialDoctorGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sdgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{special_doctor.Label}
	default:
		err = fmt.Errorf("ent: SpecialDoctorGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sdgb *SpecialDoctorGroupBy) BoolX(ctx context.Context) bool {
	v, err := sdgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sdgb *SpecialDoctorGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sdgb.sqlQuery().Query()
	if err := sdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sdgb *SpecialDoctorGroupBy) sqlQuery() *sql.Selector {
	selector := sdgb.sql
	columns := make([]string, 0, len(sdgb.fields)+len(sdgb.fns))
	columns = append(columns, sdgb.fields...)
	for _, fn := range sdgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(sdgb.fields...)
}

// SpecialDoctorSelect is the builder for select fields of SpecialDoctor entities.
type SpecialDoctorSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (sds *SpecialDoctorSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := sds.path(ctx)
	if err != nil {
		return err
	}
	sds.sql = query
	return sds.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sds *SpecialDoctorSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sds.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (sds *SpecialDoctorSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sds.fields) > 1 {
		return nil, errors.New("ent: SpecialDoctorSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sds *SpecialDoctorSelect) StringsX(ctx context.Context) []string {
	v, err := sds.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (sds *SpecialDoctorSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sds.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{special_doctor.Label}
	default:
		err = fmt.Errorf("ent: SpecialDoctorSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sds *SpecialDoctorSelect) StringX(ctx context.Context) string {
	v, err := sds.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (sds *SpecialDoctorSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sds.fields) > 1 {
		return nil, errors.New("ent: SpecialDoctorSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sds *SpecialDoctorSelect) IntsX(ctx context.Context) []int {
	v, err := sds.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (sds *SpecialDoctorSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sds.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{special_doctor.Label}
	default:
		err = fmt.Errorf("ent: SpecialDoctorSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sds *SpecialDoctorSelect) IntX(ctx context.Context) int {
	v, err := sds.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (sds *SpecialDoctorSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sds.fields) > 1 {
		return nil, errors.New("ent: SpecialDoctorSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sds *SpecialDoctorSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sds.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (sds *SpecialDoctorSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sds.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{special_doctor.Label}
	default:
		err = fmt.Errorf("ent: SpecialDoctorSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sds *SpecialDoctorSelect) Float64X(ctx context.Context) float64 {
	v, err := sds.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (sds *SpecialDoctorSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sds.fields) > 1 {
		return nil, errors.New("ent: SpecialDoctorSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sds *SpecialDoctorSelect) BoolsX(ctx context.Context) []bool {
	v, err := sds.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (sds *SpecialDoctorSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sds.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{special_doctor.Label}
	default:
		err = fmt.Errorf("ent: SpecialDoctorSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sds *SpecialDoctorSelect) BoolX(ctx context.Context) bool {
	v, err := sds.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sds *SpecialDoctorSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sds.sqlQuery().Query()
	if err := sds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sds *SpecialDoctorSelect) sqlQuery() sql.Querier {
	selector := sds.sql
	selector.Select(selector.Columns(sds.fields...)...)
	return selector
}
