// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/specialist"
)

// SpecialistCreate is the builder for creating a Specialist entity.
type SpecialistCreate struct {
	config
	mutation *SpecialistMutation
	hooks    []Hook
}

// SetSpecialist sets the specialist field.
func (sc *SpecialistCreate) SetSpecialist(s string) *SpecialistCreate {
	sc.mutation.SetSpecialist(s)
	return sc
}

// AddOfficeIDs adds the offices edge to Office by ids.
func (sc *SpecialistCreate) AddOfficeIDs(ids ...int) *SpecialistCreate {
	sc.mutation.AddOfficeIDs(ids...)
	return sc
}

// AddOffices adds the offices edges to Office.
func (sc *SpecialistCreate) AddOffices(o ...*Office) *SpecialistCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sc.AddOfficeIDs(ids...)
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (sc *SpecialistCreate) SetDoctorID(id int) *SpecialistCreate {
	sc.mutation.SetDoctorID(id)
	return sc
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (sc *SpecialistCreate) SetNillableDoctorID(id *int) *SpecialistCreate {
	if id != nil {
		sc = sc.SetDoctorID(*id)
	}
	return sc
}

// SetDoctor sets the doctor edge to Doctor.
func (sc *SpecialistCreate) SetDoctor(d *Doctor) *SpecialistCreate {
	return sc.SetDoctorID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (sc *SpecialistCreate) SetDepartmentID(id int) *SpecialistCreate {
	sc.mutation.SetDepartmentID(id)
	return sc
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (sc *SpecialistCreate) SetNillableDepartmentID(id *int) *SpecialistCreate {
	if id != nil {
		sc = sc.SetDepartmentID(*id)
	}
	return sc
}

// SetDepartment sets the department edge to Department.
func (sc *SpecialistCreate) SetDepartment(d *Department) *SpecialistCreate {
	return sc.SetDepartmentID(d.ID)
}

// Mutation returns the SpecialistMutation object of the builder.
func (sc *SpecialistCreate) Mutation() *SpecialistMutation {
	return sc.mutation
}

// Save creates the Specialist in the database.
func (sc *SpecialistCreate) Save(ctx context.Context) (*Specialist, error) {
	if _, ok := sc.mutation.Specialist(); !ok {
		return nil, &ValidationError{Name: "specialist", err: errors.New("ent: missing required field \"specialist\"")}
	}
	if v, ok := sc.mutation.Specialist(); ok {
		if err := specialist.SpecialistValidator(v); err != nil {
			return nil, &ValidationError{Name: "specialist", err: fmt.Errorf("ent: validator failed for field \"specialist\": %w", err)}
		}
	}
	var (
		err  error
		node *Specialist
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpecialistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SpecialistCreate) SaveX(ctx context.Context) *Specialist {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SpecialistCreate) sqlSave(ctx context.Context) (*Specialist, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *SpecialistCreate) createSpec() (*Specialist, *sqlgraph.CreateSpec) {
	var (
		s     = &Specialist{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: specialist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: specialist.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Specialist(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specialist.FieldSpecialist,
		})
		s.Specialist = value
	}
	if nodes := sc.mutation.OfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   specialist.OfficesTable,
			Columns: []string{specialist.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialist.DoctorTable,
			Columns: []string{specialist.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialist.DepartmentTable,
			Columns: []string{specialist.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}
