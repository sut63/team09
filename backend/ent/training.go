// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team09/app/ent/course"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/training"
)

// Training is the model entity for the Training schema.
type Training struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Trainingplace holds the value of the "trainingplace" field.
	Trainingplace string `json:"trainingplace,omitempty"`
	// Firstday holds the value of the "firstday" field.
	Firstday time.Time `json:"firstday,omitempty"`
	// Lastday holds the value of the "lastday" field.
	Lastday time.Time `json:"lastday,omitempty"`
	// Doctoridcard holds the value of the "doctoridcard" field.
	Doctoridcard string `json:"doctoridcard,omitempty"`
	// Hour holds the value of the "hour" field.
	Hour int `json:"hour,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrainingQuery when eager-loading is set.
	Edges         TrainingEdges `json:"edges"`
	course_id     *int
	department_id *int
	doctor_id     *int
}

// TrainingEdges holds the relations/edges for other nodes in the graph.
type TrainingEdges struct {
	// Course holds the value of the course edge.
	Course *Course
	// Doctor holds the value of the doctor edge.
	Doctor *Doctor
	// Department holds the value of the department edge.
	Department *Department
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrainingEdges) CourseOrErr() (*Course, error) {
	if e.loadedTypes[0] {
		if e.Course == nil {
			// The edge course was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: course.Label}
		}
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// DoctorOrErr returns the Doctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrainingEdges) DoctorOrErr() (*Doctor, error) {
	if e.loadedTypes[1] {
		if e.Doctor == nil {
			// The edge doctor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: doctor.Label}
		}
		return e.Doctor, nil
	}
	return nil, &NotLoadedError{edge: "doctor"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrainingEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[2] {
		if e.Department == nil {
			// The edge department was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Training) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // trainingplace
		&sql.NullTime{},   // firstday
		&sql.NullTime{},   // lastday
		&sql.NullString{}, // doctoridcard
		&sql.NullInt64{},  // hour
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Training) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // course_id
		&sql.NullInt64{}, // department_id
		&sql.NullInt64{}, // doctor_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Training fields.
func (t *Training) assignValues(values ...interface{}) error {
	if m, n := len(values), len(training.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field trainingplace", values[0])
	} else if value.Valid {
		t.Trainingplace = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field firstday", values[1])
	} else if value.Valid {
		t.Firstday = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field lastday", values[2])
	} else if value.Valid {
		t.Lastday = value.Time
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field doctoridcard", values[3])
	} else if value.Valid {
		t.Doctoridcard = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field hour", values[4])
	} else if value.Valid {
		t.Hour = int(value.Int64)
	}
	values = values[5:]
	if len(values) == len(training.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field course_id", value)
		} else if value.Valid {
			t.course_id = new(int)
			*t.course_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field department_id", value)
		} else if value.Valid {
			t.department_id = new(int)
			*t.department_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field doctor_id", value)
		} else if value.Valid {
			t.doctor_id = new(int)
			*t.doctor_id = int(value.Int64)
		}
	}
	return nil
}

// QueryCourse queries the course edge of the Training.
func (t *Training) QueryCourse() *CourseQuery {
	return (&TrainingClient{config: t.config}).QueryCourse(t)
}

// QueryDoctor queries the doctor edge of the Training.
func (t *Training) QueryDoctor() *DoctorQuery {
	return (&TrainingClient{config: t.config}).QueryDoctor(t)
}

// QueryDepartment queries the department edge of the Training.
func (t *Training) QueryDepartment() *DepartmentQuery {
	return (&TrainingClient{config: t.config}).QueryDepartment(t)
}

// Update returns a builder for updating this Training.
// Note that, you need to call Training.Unwrap() before calling this method, if this Training
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Training) Update() *TrainingUpdateOne {
	return (&TrainingClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Training) Unwrap() *Training {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Training is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Training) String() string {
	var builder strings.Builder
	builder.WriteString("Training(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", trainingplace=")
	builder.WriteString(t.Trainingplace)
	builder.WriteString(", firstday=")
	builder.WriteString(t.Firstday.Format(time.ANSIC))
	builder.WriteString(", lastday=")
	builder.WriteString(t.Lastday.Format(time.ANSIC))
	builder.WriteString(", doctoridcard=")
	builder.WriteString(t.Doctoridcard)
	builder.WriteString(", hour=")
	builder.WriteString(fmt.Sprintf("%v", t.Hour))
	builder.WriteByte(')')
	return builder.String()
}

// Trainings is a parsable slice of Training.
type Trainings []*Training

func (t Trainings) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
