// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/Piichet/app/ent/doctor"
	"github.com/Piichet/app/ent/office"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// OfficeCreate is the builder for creating a Office entity.
type OfficeCreate struct {
	config
	mutation *OfficeMutation
	hooks    []Hook
}

// SetOfficename sets the officename field.
func (oc *OfficeCreate) SetOfficename(s string) *OfficeCreate {
	oc.mutation.SetOfficename(s)
	return oc
}

// AddDoctorIDs adds the doctors edge to Doctor by ids.
func (oc *OfficeCreate) AddDoctorIDs(ids ...int) *OfficeCreate {
	oc.mutation.AddDoctorIDs(ids...)
	return oc
}

// AddDoctors adds the doctors edges to Doctor.
func (oc *OfficeCreate) AddDoctors(d ...*Doctor) *OfficeCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return oc.AddDoctorIDs(ids...)
}

// Mutation returns the OfficeMutation object of the builder.
func (oc *OfficeCreate) Mutation() *OfficeMutation {
	return oc.mutation
}

// Save creates the Office in the database.
func (oc *OfficeCreate) Save(ctx context.Context) (*Office, error) {
	if _, ok := oc.mutation.Officename(); !ok {
		return nil, &ValidationError{Name: "officename", err: errors.New("ent: missing required field \"officename\"")}
	}
	if v, ok := oc.mutation.Officename(); ok {
		if err := office.OfficenameValidator(v); err != nil {
			return nil, &ValidationError{Name: "officename", err: fmt.Errorf("ent: validator failed for field \"officename\": %w", err)}
		}
	}
	var (
		err  error
		node *Office
	)
	if len(oc.hooks) == 0 {
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OfficeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OfficeCreate) SaveX(ctx context.Context) *Office {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oc *OfficeCreate) sqlSave(ctx context.Context) (*Office, error) {
	o, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	o.ID = int(id)
	return o, nil
}

func (oc *OfficeCreate) createSpec() (*Office, *sqlgraph.CreateSpec) {
	var (
		o     = &Office{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: office.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: office.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.Officename(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: office.FieldOfficename,
		})
		o.Officename = value
	}
	if nodes := oc.mutation.DoctorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.DoctorsTable,
			Columns: []string{office.DoctorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return o, _spec
}
