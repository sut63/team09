// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/predicate"
	"github.com/team09/app/ent/special_doctor"
	"github.com/team09/app/ent/specialist"
)

// SpecialDoctorUpdate is the builder for updating Special_Doctor entities.
type SpecialDoctorUpdate struct {
	config
	hooks      []Hook
	mutation   *SpecialDoctorMutation
	predicates []predicate.Special_Doctor
}

// Where adds a new predicate for the builder.
func (sdu *SpecialDoctorUpdate) Where(ps ...predicate.Special_Doctor) *SpecialDoctorUpdate {
	sdu.predicates = append(sdu.predicates, ps...)
	return sdu
}

// SetOther sets the Other field.
func (sdu *SpecialDoctorUpdate) SetOther(s string) *SpecialDoctorUpdate {
	sdu.mutation.SetOther(s)
	return sdu
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (sdu *SpecialDoctorUpdate) SetDoctorID(id int) *SpecialDoctorUpdate {
	sdu.mutation.SetDoctorID(id)
	return sdu
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (sdu *SpecialDoctorUpdate) SetNillableDoctorID(id *int) *SpecialDoctorUpdate {
	if id != nil {
		sdu = sdu.SetDoctorID(*id)
	}
	return sdu
}

// SetDoctor sets the doctor edge to Doctor.
func (sdu *SpecialDoctorUpdate) SetDoctor(d *Doctor) *SpecialDoctorUpdate {
	return sdu.SetDoctorID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (sdu *SpecialDoctorUpdate) SetDepartmentID(id int) *SpecialDoctorUpdate {
	sdu.mutation.SetDepartmentID(id)
	return sdu
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (sdu *SpecialDoctorUpdate) SetNillableDepartmentID(id *int) *SpecialDoctorUpdate {
	if id != nil {
		sdu = sdu.SetDepartmentID(*id)
	}
	return sdu
}

// SetDepartment sets the department edge to Department.
func (sdu *SpecialDoctorUpdate) SetDepartment(d *Department) *SpecialDoctorUpdate {
	return sdu.SetDepartmentID(d.ID)
}

// SetSpecialistID sets the specialist edge to Specialist by id.
func (sdu *SpecialDoctorUpdate) SetSpecialistID(id int) *SpecialDoctorUpdate {
	sdu.mutation.SetSpecialistID(id)
	return sdu
}

// SetNillableSpecialistID sets the specialist edge to Specialist by id if the given value is not nil.
func (sdu *SpecialDoctorUpdate) SetNillableSpecialistID(id *int) *SpecialDoctorUpdate {
	if id != nil {
		sdu = sdu.SetSpecialistID(*id)
	}
	return sdu
}

// SetSpecialist sets the specialist edge to Specialist.
func (sdu *SpecialDoctorUpdate) SetSpecialist(s *Specialist) *SpecialDoctorUpdate {
	return sdu.SetSpecialistID(s.ID)
}

// AddOfficeIDs adds the offices edge to Office by ids.
func (sdu *SpecialDoctorUpdate) AddOfficeIDs(ids ...int) *SpecialDoctorUpdate {
	sdu.mutation.AddOfficeIDs(ids...)
	return sdu
}

// AddOffices adds the offices edges to Office.
func (sdu *SpecialDoctorUpdate) AddOffices(o ...*Office) *SpecialDoctorUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sdu.AddOfficeIDs(ids...)
}

// Mutation returns the SpecialDoctorMutation object of the builder.
func (sdu *SpecialDoctorUpdate) Mutation() *SpecialDoctorMutation {
	return sdu.mutation
}

// ClearDoctor clears the doctor edge to Doctor.
func (sdu *SpecialDoctorUpdate) ClearDoctor() *SpecialDoctorUpdate {
	sdu.mutation.ClearDoctor()
	return sdu
}

// ClearDepartment clears the department edge to Department.
func (sdu *SpecialDoctorUpdate) ClearDepartment() *SpecialDoctorUpdate {
	sdu.mutation.ClearDepartment()
	return sdu
}

// ClearSpecialist clears the specialist edge to Specialist.
func (sdu *SpecialDoctorUpdate) ClearSpecialist() *SpecialDoctorUpdate {
	sdu.mutation.ClearSpecialist()
	return sdu
}

// RemoveOfficeIDs removes the offices edge to Office by ids.
func (sdu *SpecialDoctorUpdate) RemoveOfficeIDs(ids ...int) *SpecialDoctorUpdate {
	sdu.mutation.RemoveOfficeIDs(ids...)
	return sdu
}

// RemoveOffices removes offices edges to Office.
func (sdu *SpecialDoctorUpdate) RemoveOffices(o ...*Office) *SpecialDoctorUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sdu.RemoveOfficeIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (sdu *SpecialDoctorUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := sdu.mutation.Other(); ok {
		if err := special_doctor.OtherValidator(v); err != nil {
			return 0, &ValidationError{Name: "Other", err: fmt.Errorf("ent: validator failed for field \"Other\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(sdu.hooks) == 0 {
		affected, err = sdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpecialDoctorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sdu.mutation = mutation
			affected, err = sdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sdu.hooks) - 1; i >= 0; i-- {
			mut = sdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *SpecialDoctorUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *SpecialDoctorUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *SpecialDoctorUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sdu *SpecialDoctorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   special_doctor.Table,
			Columns: special_doctor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: special_doctor.FieldID,
			},
		},
	}
	if ps := sdu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.Other(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: special_doctor.FieldOther,
		})
	}
	if sdu.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   special_doctor.DoctorTable,
			Columns: []string{special_doctor.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   special_doctor.DoctorTable,
			Columns: []string{special_doctor.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sdu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   special_doctor.DepartmentTable,
			Columns: []string{special_doctor.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   special_doctor.DepartmentTable,
			Columns: []string{special_doctor.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sdu.mutation.SpecialistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   special_doctor.SpecialistTable,
			Columns: []string{special_doctor.SpecialistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: specialist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.SpecialistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   special_doctor.SpecialistTable,
			Columns: []string{special_doctor.SpecialistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: specialist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := sdu.mutation.RemovedOfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   special_doctor.OfficesTable,
			Columns: []string{special_doctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.OfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   special_doctor.OfficesTable,
			Columns: []string{special_doctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{special_doctor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SpecialDoctorUpdateOne is the builder for updating a single Special_Doctor entity.
type SpecialDoctorUpdateOne struct {
	config
	hooks    []Hook
	mutation *SpecialDoctorMutation
}

// SetOther sets the Other field.
func (sduo *SpecialDoctorUpdateOne) SetOther(s string) *SpecialDoctorUpdateOne {
	sduo.mutation.SetOther(s)
	return sduo
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (sduo *SpecialDoctorUpdateOne) SetDoctorID(id int) *SpecialDoctorUpdateOne {
	sduo.mutation.SetDoctorID(id)
	return sduo
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (sduo *SpecialDoctorUpdateOne) SetNillableDoctorID(id *int) *SpecialDoctorUpdateOne {
	if id != nil {
		sduo = sduo.SetDoctorID(*id)
	}
	return sduo
}

// SetDoctor sets the doctor edge to Doctor.
func (sduo *SpecialDoctorUpdateOne) SetDoctor(d *Doctor) *SpecialDoctorUpdateOne {
	return sduo.SetDoctorID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (sduo *SpecialDoctorUpdateOne) SetDepartmentID(id int) *SpecialDoctorUpdateOne {
	sduo.mutation.SetDepartmentID(id)
	return sduo
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (sduo *SpecialDoctorUpdateOne) SetNillableDepartmentID(id *int) *SpecialDoctorUpdateOne {
	if id != nil {
		sduo = sduo.SetDepartmentID(*id)
	}
	return sduo
}

// SetDepartment sets the department edge to Department.
func (sduo *SpecialDoctorUpdateOne) SetDepartment(d *Department) *SpecialDoctorUpdateOne {
	return sduo.SetDepartmentID(d.ID)
}

// SetSpecialistID sets the specialist edge to Specialist by id.
func (sduo *SpecialDoctorUpdateOne) SetSpecialistID(id int) *SpecialDoctorUpdateOne {
	sduo.mutation.SetSpecialistID(id)
	return sduo
}

// SetNillableSpecialistID sets the specialist edge to Specialist by id if the given value is not nil.
func (sduo *SpecialDoctorUpdateOne) SetNillableSpecialistID(id *int) *SpecialDoctorUpdateOne {
	if id != nil {
		sduo = sduo.SetSpecialistID(*id)
	}
	return sduo
}

// SetSpecialist sets the specialist edge to Specialist.
func (sduo *SpecialDoctorUpdateOne) SetSpecialist(s *Specialist) *SpecialDoctorUpdateOne {
	return sduo.SetSpecialistID(s.ID)
}

// AddOfficeIDs adds the offices edge to Office by ids.
func (sduo *SpecialDoctorUpdateOne) AddOfficeIDs(ids ...int) *SpecialDoctorUpdateOne {
	sduo.mutation.AddOfficeIDs(ids...)
	return sduo
}

// AddOffices adds the offices edges to Office.
func (sduo *SpecialDoctorUpdateOne) AddOffices(o ...*Office) *SpecialDoctorUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sduo.AddOfficeIDs(ids...)
}

// Mutation returns the SpecialDoctorMutation object of the builder.
func (sduo *SpecialDoctorUpdateOne) Mutation() *SpecialDoctorMutation {
	return sduo.mutation
}

// ClearDoctor clears the doctor edge to Doctor.
func (sduo *SpecialDoctorUpdateOne) ClearDoctor() *SpecialDoctorUpdateOne {
	sduo.mutation.ClearDoctor()
	return sduo
}

// ClearDepartment clears the department edge to Department.
func (sduo *SpecialDoctorUpdateOne) ClearDepartment() *SpecialDoctorUpdateOne {
	sduo.mutation.ClearDepartment()
	return sduo
}

// ClearSpecialist clears the specialist edge to Specialist.
func (sduo *SpecialDoctorUpdateOne) ClearSpecialist() *SpecialDoctorUpdateOne {
	sduo.mutation.ClearSpecialist()
	return sduo
}

// RemoveOfficeIDs removes the offices edge to Office by ids.
func (sduo *SpecialDoctorUpdateOne) RemoveOfficeIDs(ids ...int) *SpecialDoctorUpdateOne {
	sduo.mutation.RemoveOfficeIDs(ids...)
	return sduo
}

// RemoveOffices removes offices edges to Office.
func (sduo *SpecialDoctorUpdateOne) RemoveOffices(o ...*Office) *SpecialDoctorUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sduo.RemoveOfficeIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (sduo *SpecialDoctorUpdateOne) Save(ctx context.Context) (*Special_Doctor, error) {
	if v, ok := sduo.mutation.Other(); ok {
		if err := special_doctor.OtherValidator(v); err != nil {
			return nil, &ValidationError{Name: "Other", err: fmt.Errorf("ent: validator failed for field \"Other\": %w", err)}
		}
	}

	var (
		err  error
		node *Special_Doctor
	)
	if len(sduo.hooks) == 0 {
		node, err = sduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpecialDoctorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sduo.mutation = mutation
			node, err = sduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sduo.hooks) - 1; i >= 0; i-- {
			mut = sduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *SpecialDoctorUpdateOne) SaveX(ctx context.Context) *Special_Doctor {
	sd, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return sd
}

// Exec executes the query on the entity.
func (sduo *SpecialDoctorUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *SpecialDoctorUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sduo *SpecialDoctorUpdateOne) sqlSave(ctx context.Context) (sd *Special_Doctor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   special_doctor.Table,
			Columns: special_doctor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: special_doctor.FieldID,
			},
		},
	}
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Special_Doctor.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := sduo.mutation.Other(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: special_doctor.FieldOther,
		})
	}
	if sduo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   special_doctor.DoctorTable,
			Columns: []string{special_doctor.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   special_doctor.DoctorTable,
			Columns: []string{special_doctor.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sduo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   special_doctor.DepartmentTable,
			Columns: []string{special_doctor.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   special_doctor.DepartmentTable,
			Columns: []string{special_doctor.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sduo.mutation.SpecialistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   special_doctor.SpecialistTable,
			Columns: []string{special_doctor.SpecialistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: specialist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.SpecialistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   special_doctor.SpecialistTable,
			Columns: []string{special_doctor.SpecialistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: specialist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := sduo.mutation.RemovedOfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   special_doctor.OfficesTable,
			Columns: []string{special_doctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.OfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   special_doctor.OfficesTable,
			Columns: []string{special_doctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	sd = &Special_Doctor{config: sduo.config}
	_spec.Assign = sd.assignValues
	_spec.ScanValues = sd.scanValues()
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{special_doctor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return sd, nil
}
