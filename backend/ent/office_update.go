// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/predicate"
	"github.com/team09/app/ent/schedule"
	"github.com/team09/app/ent/specialist"
)

// OfficeUpdate is the builder for updating Office entities.
type OfficeUpdate struct {
	config
	hooks      []Hook
	mutation   *OfficeMutation
	predicates []predicate.Office
}

// Where adds a new predicate for the builder.
func (ou *OfficeUpdate) Where(ps ...predicate.Office) *OfficeUpdate {
	ou.predicates = append(ou.predicates, ps...)
	return ou
}

// SetOfficename sets the officename field.
func (ou *OfficeUpdate) SetOfficename(s string) *OfficeUpdate {
	ou.mutation.SetOfficename(s)
	return ou
}

// SetAddedTime1 sets the added_time1 field.
func (ou *OfficeUpdate) SetAddedTime1(t time.Time) *OfficeUpdate {
	ou.mutation.SetAddedTime1(t)
	return ou
}

// SetAddedTime2 sets the added_time2 field.
func (ou *OfficeUpdate) SetAddedTime2(t time.Time) *OfficeUpdate {
	ou.mutation.SetAddedTime2(t)
	return ou
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (ou *OfficeUpdate) SetDoctorID(id int) *OfficeUpdate {
	ou.mutation.SetDoctorID(id)
	return ou
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (ou *OfficeUpdate) SetNillableDoctorID(id *int) *OfficeUpdate {
	if id != nil {
		ou = ou.SetDoctorID(*id)
	}
	return ou
}

// SetDoctor sets the doctor edge to Doctor.
func (ou *OfficeUpdate) SetDoctor(d *Doctor) *OfficeUpdate {
	return ou.SetDoctorID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (ou *OfficeUpdate) SetDepartmentID(id int) *OfficeUpdate {
	ou.mutation.SetDepartmentID(id)
	return ou
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (ou *OfficeUpdate) SetNillableDepartmentID(id *int) *OfficeUpdate {
	if id != nil {
		ou = ou.SetDepartmentID(*id)
	}
	return ou
}

// SetDepartment sets the department edge to Department.
func (ou *OfficeUpdate) SetDepartment(d *Department) *OfficeUpdate {
	return ou.SetDepartmentID(d.ID)
}

// SetSpecialistID sets the specialist edge to Specialist by id.
func (ou *OfficeUpdate) SetSpecialistID(id int) *OfficeUpdate {
	ou.mutation.SetSpecialistID(id)
	return ou
}

// SetNillableSpecialistID sets the specialist edge to Specialist by id if the given value is not nil.
func (ou *OfficeUpdate) SetNillableSpecialistID(id *int) *OfficeUpdate {
	if id != nil {
		ou = ou.SetSpecialistID(*id)
	}
	return ou
}

// SetSpecialist sets the specialist edge to Specialist.
func (ou *OfficeUpdate) SetSpecialist(s *Specialist) *OfficeUpdate {
	return ou.SetSpecialistID(s.ID)
}

// AddScheduleIDs adds the schedules edge to Schedule by ids.
func (ou *OfficeUpdate) AddScheduleIDs(ids ...int) *OfficeUpdate {
	ou.mutation.AddScheduleIDs(ids...)
	return ou
}

// AddSchedules adds the schedules edges to Schedule.
func (ou *OfficeUpdate) AddSchedules(s ...*Schedule) *OfficeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.AddScheduleIDs(ids...)
}

// Mutation returns the OfficeMutation object of the builder.
func (ou *OfficeUpdate) Mutation() *OfficeMutation {
	return ou.mutation
}

// ClearDoctor clears the doctor edge to Doctor.
func (ou *OfficeUpdate) ClearDoctor() *OfficeUpdate {
	ou.mutation.ClearDoctor()
	return ou
}

// ClearDepartment clears the department edge to Department.
func (ou *OfficeUpdate) ClearDepartment() *OfficeUpdate {
	ou.mutation.ClearDepartment()
	return ou
}

// ClearSpecialist clears the specialist edge to Specialist.
func (ou *OfficeUpdate) ClearSpecialist() *OfficeUpdate {
	ou.mutation.ClearSpecialist()
	return ou
}

// RemoveScheduleIDs removes the schedules edge to Schedule by ids.
func (ou *OfficeUpdate) RemoveScheduleIDs(ids ...int) *OfficeUpdate {
	ou.mutation.RemoveScheduleIDs(ids...)
	return ou
}

// RemoveSchedules removes schedules edges to Schedule.
func (ou *OfficeUpdate) RemoveSchedules(s ...*Schedule) *OfficeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.RemoveScheduleIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ou *OfficeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ou.mutation.Officename(); ok {
		if err := office.OfficenameValidator(v); err != nil {
			return 0, &ValidationError{Name: "officename", err: fmt.Errorf("ent: validator failed for field \"officename\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OfficeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OfficeUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OfficeUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OfficeUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OfficeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   office.Table,
			Columns: office.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: office.FieldID,
			},
		},
	}
	if ps := ou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Officename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: office.FieldOfficename,
		})
	}
	if value, ok := ou.mutation.AddedTime1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: office.FieldAddedTime1,
		})
	}
	if value, ok := ou.mutation.AddedTime2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: office.FieldAddedTime2,
		})
	}
	if ou.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   office.DoctorTable,
			Columns: []string{office.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   office.DoctorTable,
			Columns: []string{office.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   office.DepartmentTable,
			Columns: []string{office.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   office.DepartmentTable,
			Columns: []string{office.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.SpecialistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   office.SpecialistTable,
			Columns: []string{office.SpecialistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: specialist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.SpecialistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   office.SpecialistTable,
			Columns: []string{office.SpecialistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: specialist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ou.mutation.RemovedSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.SchedulesTable,
			Columns: []string{office.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.SchedulesTable,
			Columns: []string{office.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{office.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OfficeUpdateOne is the builder for updating a single Office entity.
type OfficeUpdateOne struct {
	config
	hooks    []Hook
	mutation *OfficeMutation
}

// SetOfficename sets the officename field.
func (ouo *OfficeUpdateOne) SetOfficename(s string) *OfficeUpdateOne {
	ouo.mutation.SetOfficename(s)
	return ouo
}

// SetAddedTime1 sets the added_time1 field.
func (ouo *OfficeUpdateOne) SetAddedTime1(t time.Time) *OfficeUpdateOne {
	ouo.mutation.SetAddedTime1(t)
	return ouo
}

// SetAddedTime2 sets the added_time2 field.
func (ouo *OfficeUpdateOne) SetAddedTime2(t time.Time) *OfficeUpdateOne {
	ouo.mutation.SetAddedTime2(t)
	return ouo
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (ouo *OfficeUpdateOne) SetDoctorID(id int) *OfficeUpdateOne {
	ouo.mutation.SetDoctorID(id)
	return ouo
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (ouo *OfficeUpdateOne) SetNillableDoctorID(id *int) *OfficeUpdateOne {
	if id != nil {
		ouo = ouo.SetDoctorID(*id)
	}
	return ouo
}

// SetDoctor sets the doctor edge to Doctor.
func (ouo *OfficeUpdateOne) SetDoctor(d *Doctor) *OfficeUpdateOne {
	return ouo.SetDoctorID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (ouo *OfficeUpdateOne) SetDepartmentID(id int) *OfficeUpdateOne {
	ouo.mutation.SetDepartmentID(id)
	return ouo
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (ouo *OfficeUpdateOne) SetNillableDepartmentID(id *int) *OfficeUpdateOne {
	if id != nil {
		ouo = ouo.SetDepartmentID(*id)
	}
	return ouo
}

// SetDepartment sets the department edge to Department.
func (ouo *OfficeUpdateOne) SetDepartment(d *Department) *OfficeUpdateOne {
	return ouo.SetDepartmentID(d.ID)
}

// SetSpecialistID sets the specialist edge to Specialist by id.
func (ouo *OfficeUpdateOne) SetSpecialistID(id int) *OfficeUpdateOne {
	ouo.mutation.SetSpecialistID(id)
	return ouo
}

// SetNillableSpecialistID sets the specialist edge to Specialist by id if the given value is not nil.
func (ouo *OfficeUpdateOne) SetNillableSpecialistID(id *int) *OfficeUpdateOne {
	if id != nil {
		ouo = ouo.SetSpecialistID(*id)
	}
	return ouo
}

// SetSpecialist sets the specialist edge to Specialist.
func (ouo *OfficeUpdateOne) SetSpecialist(s *Specialist) *OfficeUpdateOne {
	return ouo.SetSpecialistID(s.ID)
}

// AddScheduleIDs adds the schedules edge to Schedule by ids.
func (ouo *OfficeUpdateOne) AddScheduleIDs(ids ...int) *OfficeUpdateOne {
	ouo.mutation.AddScheduleIDs(ids...)
	return ouo
}

// AddSchedules adds the schedules edges to Schedule.
func (ouo *OfficeUpdateOne) AddSchedules(s ...*Schedule) *OfficeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.AddScheduleIDs(ids...)
}

// Mutation returns the OfficeMutation object of the builder.
func (ouo *OfficeUpdateOne) Mutation() *OfficeMutation {
	return ouo.mutation
}

// ClearDoctor clears the doctor edge to Doctor.
func (ouo *OfficeUpdateOne) ClearDoctor() *OfficeUpdateOne {
	ouo.mutation.ClearDoctor()
	return ouo
}

// ClearDepartment clears the department edge to Department.
func (ouo *OfficeUpdateOne) ClearDepartment() *OfficeUpdateOne {
	ouo.mutation.ClearDepartment()
	return ouo
}

// ClearSpecialist clears the specialist edge to Specialist.
func (ouo *OfficeUpdateOne) ClearSpecialist() *OfficeUpdateOne {
	ouo.mutation.ClearSpecialist()
	return ouo
}

// RemoveScheduleIDs removes the schedules edge to Schedule by ids.
func (ouo *OfficeUpdateOne) RemoveScheduleIDs(ids ...int) *OfficeUpdateOne {
	ouo.mutation.RemoveScheduleIDs(ids...)
	return ouo
}

// RemoveSchedules removes schedules edges to Schedule.
func (ouo *OfficeUpdateOne) RemoveSchedules(s ...*Schedule) *OfficeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.RemoveScheduleIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ouo *OfficeUpdateOne) Save(ctx context.Context) (*Office, error) {
	if v, ok := ouo.mutation.Officename(); ok {
		if err := office.OfficenameValidator(v); err != nil {
			return nil, &ValidationError{Name: "officename", err: fmt.Errorf("ent: validator failed for field \"officename\": %w", err)}
		}
	}

	var (
		err  error
		node *Office
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OfficeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OfficeUpdateOne) SaveX(ctx context.Context) *Office {
	o, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return o
}

// Exec executes the query on the entity.
func (ouo *OfficeUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OfficeUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OfficeUpdateOne) sqlSave(ctx context.Context) (o *Office, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   office.Table,
			Columns: office.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: office.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Office.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ouo.mutation.Officename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: office.FieldOfficename,
		})
	}
	if value, ok := ouo.mutation.AddedTime1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: office.FieldAddedTime1,
		})
	}
	if value, ok := ouo.mutation.AddedTime2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: office.FieldAddedTime2,
		})
	}
	if ouo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   office.DoctorTable,
			Columns: []string{office.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   office.DoctorTable,
			Columns: []string{office.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   office.DepartmentTable,
			Columns: []string{office.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   office.DepartmentTable,
			Columns: []string{office.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.SpecialistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   office.SpecialistTable,
			Columns: []string{office.SpecialistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: specialist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.SpecialistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   office.SpecialistTable,
			Columns: []string{office.SpecialistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: specialist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ouo.mutation.RemovedSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.SchedulesTable,
			Columns: []string{office.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   office.SchedulesTable,
			Columns: []string{office.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	o = &Office{config: ouo.config}
	_spec.Assign = o.assignValues
	_spec.ScanValues = o.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{office.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return o, nil
}
