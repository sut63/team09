// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/extradoctor"
	"github.com/team09/app/ent/specialdoctor"
)

// SpecialdoctorCreate is the builder for creating a Specialdoctor entity.
type SpecialdoctorCreate struct {
	config
	mutation *SpecialdoctorMutation
	hooks    []Hook
}

// SetRoomnumber sets the Roomnumber field.
func (sc *SpecialdoctorCreate) SetRoomnumber(s string) *SpecialdoctorCreate {
	sc.mutation.SetRoomnumber(s)
	return sc
}

// SetDoctorid sets the Doctorid field.
func (sc *SpecialdoctorCreate) SetDoctorid(s string) *SpecialdoctorCreate {
	sc.mutation.SetDoctorid(s)
	return sc
}

// SetOther sets the Other field.
func (sc *SpecialdoctorCreate) SetOther(s string) *SpecialdoctorCreate {
	sc.mutation.SetOther(s)
	return sc
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (sc *SpecialdoctorCreate) SetDoctorID(id int) *SpecialdoctorCreate {
	sc.mutation.SetDoctorID(id)
	return sc
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (sc *SpecialdoctorCreate) SetNillableDoctorID(id *int) *SpecialdoctorCreate {
	if id != nil {
		sc = sc.SetDoctorID(*id)
	}
	return sc
}

// SetDoctor sets the doctor edge to Doctor.
func (sc *SpecialdoctorCreate) SetDoctor(d *Doctor) *SpecialdoctorCreate {
	return sc.SetDoctorID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (sc *SpecialdoctorCreate) SetDepartmentID(id int) *SpecialdoctorCreate {
	sc.mutation.SetDepartmentID(id)
	return sc
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (sc *SpecialdoctorCreate) SetNillableDepartmentID(id *int) *SpecialdoctorCreate {
	if id != nil {
		sc = sc.SetDepartmentID(*id)
	}
	return sc
}

// SetDepartment sets the department edge to Department.
func (sc *SpecialdoctorCreate) SetDepartment(d *Department) *SpecialdoctorCreate {
	return sc.SetDepartmentID(d.ID)
}

// SetExtradoctorID sets the extradoctor edge to Extradoctor by id.
func (sc *SpecialdoctorCreate) SetExtradoctorID(id int) *SpecialdoctorCreate {
	sc.mutation.SetExtradoctorID(id)
	return sc
}

// SetNillableExtradoctorID sets the extradoctor edge to Extradoctor by id if the given value is not nil.
func (sc *SpecialdoctorCreate) SetNillableExtradoctorID(id *int) *SpecialdoctorCreate {
	if id != nil {
		sc = sc.SetExtradoctorID(*id)
	}
	return sc
}

// SetExtradoctor sets the extradoctor edge to Extradoctor.
func (sc *SpecialdoctorCreate) SetExtradoctor(e *Extradoctor) *SpecialdoctorCreate {
	return sc.SetExtradoctorID(e.ID)
}

// Mutation returns the SpecialdoctorMutation object of the builder.
func (sc *SpecialdoctorCreate) Mutation() *SpecialdoctorMutation {
	return sc.mutation
}

// Save creates the Specialdoctor in the database.
func (sc *SpecialdoctorCreate) Save(ctx context.Context) (*Specialdoctor, error) {
	if _, ok := sc.mutation.Roomnumber(); !ok {
		return nil, &ValidationError{Name: "Roomnumber", err: errors.New("ent: missing required field \"Roomnumber\"")}
	}
	if v, ok := sc.mutation.Roomnumber(); ok {
		if err := specialdoctor.RoomnumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "Roomnumber", err: fmt.Errorf("ent: validator failed for field \"Roomnumber\": %w", err)}
		}
	}
	if _, ok := sc.mutation.Doctorid(); !ok {
		return nil, &ValidationError{Name: "Doctorid", err: errors.New("ent: missing required field \"Doctorid\"")}
	}
	if v, ok := sc.mutation.Doctorid(); ok {
		if err := specialdoctor.DoctoridValidator(v); err != nil {
			return nil, &ValidationError{Name: "Doctorid", err: fmt.Errorf("ent: validator failed for field \"Doctorid\": %w", err)}
		}
	}
	if _, ok := sc.mutation.Other(); !ok {
		return nil, &ValidationError{Name: "Other", err: errors.New("ent: missing required field \"Other\"")}
	}
	if v, ok := sc.mutation.Other(); ok {
		if err := specialdoctor.OtherValidator(v); err != nil {
			return nil, &ValidationError{Name: "Other", err: fmt.Errorf("ent: validator failed for field \"Other\": %w", err)}
		}
	}
	var (
		err  error
		node *Specialdoctor
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpecialdoctorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SpecialdoctorCreate) SaveX(ctx context.Context) *Specialdoctor {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SpecialdoctorCreate) sqlSave(ctx context.Context) (*Specialdoctor, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *SpecialdoctorCreate) createSpec() (*Specialdoctor, *sqlgraph.CreateSpec) {
	var (
		s     = &Specialdoctor{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: specialdoctor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: specialdoctor.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Roomnumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specialdoctor.FieldRoomnumber,
		})
		s.Roomnumber = value
	}
	if value, ok := sc.mutation.Doctorid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specialdoctor.FieldDoctorid,
		})
		s.Doctorid = value
	}
	if value, ok := sc.mutation.Other(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specialdoctor.FieldOther,
		})
		s.Other = value
	}
	if nodes := sc.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DoctorTable,
			Columns: []string{specialdoctor.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DepartmentTable,
			Columns: []string{specialdoctor.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ExtradoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.ExtradoctorTable,
			Columns: []string{specialdoctor.ExtradoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extradoctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}
