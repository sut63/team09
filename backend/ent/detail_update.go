// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/course"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/detail"
	"github.com/team09/app/ent/mission"
	"github.com/team09/app/ent/predicate"
)

// DetailUpdate is the builder for updating Detail entities.
type DetailUpdate struct {
	config
	hooks      []Hook
	mutation   *DetailMutation
	predicates []predicate.Detail
}

// Where adds a new predicate for the builder.
func (du *DetailUpdate) Where(ps ...predicate.Detail) *DetailUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetExplain sets the explain field.
func (du *DetailUpdate) SetExplain(s string) *DetailUpdate {
	du.mutation.SetExplain(s)
	return du
}

// SetCourseID sets the course edge to Course by id.
func (du *DetailUpdate) SetCourseID(id int) *DetailUpdate {
	du.mutation.SetCourseID(id)
	return du
}

// SetNillableCourseID sets the course edge to Course by id if the given value is not nil.
func (du *DetailUpdate) SetNillableCourseID(id *int) *DetailUpdate {
	if id != nil {
		du = du.SetCourseID(*id)
	}
	return du
}

// SetCourse sets the course edge to Course.
func (du *DetailUpdate) SetCourse(c *Course) *DetailUpdate {
	return du.SetCourseID(c.ID)
}

// SetMissionID sets the mission edge to Mission by id.
func (du *DetailUpdate) SetMissionID(id int) *DetailUpdate {
	du.mutation.SetMissionID(id)
	return du
}

// SetNillableMissionID sets the mission edge to Mission by id if the given value is not nil.
func (du *DetailUpdate) SetNillableMissionID(id *int) *DetailUpdate {
	if id != nil {
		du = du.SetMissionID(*id)
	}
	return du
}

// SetMission sets the mission edge to Mission.
func (du *DetailUpdate) SetMission(m *Mission) *DetailUpdate {
	return du.SetMissionID(m.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (du *DetailUpdate) SetDepartmentID(id int) *DetailUpdate {
	du.mutation.SetDepartmentID(id)
	return du
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (du *DetailUpdate) SetNillableDepartmentID(id *int) *DetailUpdate {
	if id != nil {
		du = du.SetDepartmentID(*id)
	}
	return du
}

// SetDepartment sets the department edge to Department.
func (du *DetailUpdate) SetDepartment(d *Department) *DetailUpdate {
	return du.SetDepartmentID(d.ID)
}

// Mutation returns the DetailMutation object of the builder.
func (du *DetailUpdate) Mutation() *DetailMutation {
	return du.mutation
}

// ClearCourse clears the course edge to Course.
func (du *DetailUpdate) ClearCourse() *DetailUpdate {
	du.mutation.ClearCourse()
	return du
}

// ClearMission clears the mission edge to Mission.
func (du *DetailUpdate) ClearMission() *DetailUpdate {
	du.mutation.ClearMission()
	return du
}

// ClearDepartment clears the department edge to Department.
func (du *DetailUpdate) ClearDepartment() *DetailUpdate {
	du.mutation.ClearDepartment()
	return du
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DetailUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := du.mutation.Explain(); ok {
		if err := detail.ExplainValidator(v); err != nil {
			return 0, &ValidationError{Name: "explain", err: fmt.Errorf("ent: validator failed for field \"explain\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DetailUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DetailUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DetailUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   detail.Table,
			Columns: detail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: detail.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Explain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detail.FieldExplain,
		})
	}
	if du.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.CourseTable,
			Columns: []string{detail.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.CourseTable,
			Columns: []string{detail.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.MissionTable,
			Columns: []string{detail.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.MissionTable,
			Columns: []string{detail.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.DepartmentTable,
			Columns: []string{detail.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.DepartmentTable,
			Columns: []string{detail.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{detail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DetailUpdateOne is the builder for updating a single Detail entity.
type DetailUpdateOne struct {
	config
	hooks    []Hook
	mutation *DetailMutation
}

// SetExplain sets the explain field.
func (duo *DetailUpdateOne) SetExplain(s string) *DetailUpdateOne {
	duo.mutation.SetExplain(s)
	return duo
}

// SetCourseID sets the course edge to Course by id.
func (duo *DetailUpdateOne) SetCourseID(id int) *DetailUpdateOne {
	duo.mutation.SetCourseID(id)
	return duo
}

// SetNillableCourseID sets the course edge to Course by id if the given value is not nil.
func (duo *DetailUpdateOne) SetNillableCourseID(id *int) *DetailUpdateOne {
	if id != nil {
		duo = duo.SetCourseID(*id)
	}
	return duo
}

// SetCourse sets the course edge to Course.
func (duo *DetailUpdateOne) SetCourse(c *Course) *DetailUpdateOne {
	return duo.SetCourseID(c.ID)
}

// SetMissionID sets the mission edge to Mission by id.
func (duo *DetailUpdateOne) SetMissionID(id int) *DetailUpdateOne {
	duo.mutation.SetMissionID(id)
	return duo
}

// SetNillableMissionID sets the mission edge to Mission by id if the given value is not nil.
func (duo *DetailUpdateOne) SetNillableMissionID(id *int) *DetailUpdateOne {
	if id != nil {
		duo = duo.SetMissionID(*id)
	}
	return duo
}

// SetMission sets the mission edge to Mission.
func (duo *DetailUpdateOne) SetMission(m *Mission) *DetailUpdateOne {
	return duo.SetMissionID(m.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (duo *DetailUpdateOne) SetDepartmentID(id int) *DetailUpdateOne {
	duo.mutation.SetDepartmentID(id)
	return duo
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (duo *DetailUpdateOne) SetNillableDepartmentID(id *int) *DetailUpdateOne {
	if id != nil {
		duo = duo.SetDepartmentID(*id)
	}
	return duo
}

// SetDepartment sets the department edge to Department.
func (duo *DetailUpdateOne) SetDepartment(d *Department) *DetailUpdateOne {
	return duo.SetDepartmentID(d.ID)
}

// Mutation returns the DetailMutation object of the builder.
func (duo *DetailUpdateOne) Mutation() *DetailMutation {
	return duo.mutation
}

// ClearCourse clears the course edge to Course.
func (duo *DetailUpdateOne) ClearCourse() *DetailUpdateOne {
	duo.mutation.ClearCourse()
	return duo
}

// ClearMission clears the mission edge to Mission.
func (duo *DetailUpdateOne) ClearMission() *DetailUpdateOne {
	duo.mutation.ClearMission()
	return duo
}

// ClearDepartment clears the department edge to Department.
func (duo *DetailUpdateOne) ClearDepartment() *DetailUpdateOne {
	duo.mutation.ClearDepartment()
	return duo
}

// Save executes the query and returns the updated entity.
func (duo *DetailUpdateOne) Save(ctx context.Context) (*Detail, error) {
	if v, ok := duo.mutation.Explain(); ok {
		if err := detail.ExplainValidator(v); err != nil {
			return nil, &ValidationError{Name: "explain", err: fmt.Errorf("ent: validator failed for field \"explain\": %w", err)}
		}
	}

	var (
		err  error
		node *Detail
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DetailUpdateOne) SaveX(ctx context.Context) *Detail {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DetailUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DetailUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DetailUpdateOne) sqlSave(ctx context.Context) (d *Detail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   detail.Table,
			Columns: detail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: detail.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Detail.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Explain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: detail.FieldExplain,
		})
	}
	if duo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.CourseTable,
			Columns: []string{detail.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.CourseTable,
			Columns: []string{detail.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.MissionTable,
			Columns: []string{detail.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.MissionTable,
			Columns: []string{detail.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.DepartmentTable,
			Columns: []string{detail.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   detail.DepartmentTable,
			Columns: []string{detail.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Detail{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{detail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
