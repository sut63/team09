// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/workingtime"
)

// WorkingtimeCreate is the builder for creating a Workingtime entity.
type WorkingtimeCreate struct {
	config
	mutation *WorkingtimeMutation
	hooks    []Hook
}

// SetAddedTime sets the added_time field.
func (wc *WorkingtimeCreate) SetAddedTime(t time.Time) *WorkingtimeCreate {
	wc.mutation.SetAddedTime(t)
	return wc
}

// AddOfficeIDs adds the offices edge to Office by ids.
func (wc *WorkingtimeCreate) AddOfficeIDs(ids ...int) *WorkingtimeCreate {
	wc.mutation.AddOfficeIDs(ids...)
	return wc
}

// AddOffices adds the offices edges to Office.
func (wc *WorkingtimeCreate) AddOffices(o ...*Office) *WorkingtimeCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return wc.AddOfficeIDs(ids...)
}

// Mutation returns the WorkingtimeMutation object of the builder.
func (wc *WorkingtimeCreate) Mutation() *WorkingtimeMutation {
	return wc.mutation
}

// Save creates the Workingtime in the database.
func (wc *WorkingtimeCreate) Save(ctx context.Context) (*Workingtime, error) {
	if _, ok := wc.mutation.AddedTime(); !ok {
		return nil, &ValidationError{Name: "added_time", err: errors.New("ent: missing required field \"added_time\"")}
	}
	var (
		err  error
		node *Workingtime
	)
	if len(wc.hooks) == 0 {
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkingtimeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wc.mutation = mutation
			node, err = wc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WorkingtimeCreate) SaveX(ctx context.Context) *Workingtime {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wc *WorkingtimeCreate) sqlSave(ctx context.Context) (*Workingtime, error) {
	w, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	w.ID = int(id)
	return w, nil
}

func (wc *WorkingtimeCreate) createSpec() (*Workingtime, *sqlgraph.CreateSpec) {
	var (
		w     = &Workingtime{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: workingtime.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workingtime.FieldID,
			},
		}
	)
	if value, ok := wc.mutation.AddedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workingtime.FieldAddedTime,
		})
		w.AddedTime = value
	}
	if nodes := wc.mutation.OfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workingtime.OfficesTable,
			Columns: []string{workingtime.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return w, _spec
}
