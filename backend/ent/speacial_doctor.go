// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team09/app/ent/speacial_doctor"
)

// Speacial_doctor is the model entity for the Speacial_doctor schema.
type Speacial_doctor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Speacial_doctorQuery when eager-loading is set.
	Edges Speacial_doctorEdges `json:"edges"`
}

// Speacial_doctorEdges holds the relations/edges for other nodes in the graph.
type Speacial_doctorEdges struct {
	// Offices holds the value of the offices edge.
	Offices []*Office
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OfficesOrErr returns the Offices value or an error if the edge
// was not loaded in eager-loading.
func (e Speacial_doctorEdges) OfficesOrErr() ([]*Office, error) {
	if e.loadedTypes[0] {
		return e.Offices, nil
	}
	return nil, &NotLoadedError{edge: "offices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Speacial_doctor) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Speacial_doctor fields.
func (sd *Speacial_doctor) assignValues(values ...interface{}) error {
	if m, n := len(values), len(speacial_doctor.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	sd.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		sd.Name = value.String
	}
	return nil
}

// QueryOffices queries the offices edge of the Speacial_doctor.
func (sd *Speacial_doctor) QueryOffices() *OfficeQuery {
	return (&Speacial_doctorClient{config: sd.config}).QueryOffices(sd)
}

// Update returns a builder for updating this Speacial_doctor.
// Note that, you need to call Speacial_doctor.Unwrap() before calling this method, if this Speacial_doctor
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *Speacial_doctor) Update() *Speacial_doctorUpdateOne {
	return (&Speacial_doctorClient{config: sd.config}).UpdateOne(sd)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (sd *Speacial_doctor) Unwrap() *Speacial_doctor {
	tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: Speacial_doctor is not a transactional entity")
	}
	sd.config.driver = tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *Speacial_doctor) String() string {
	var builder strings.Builder
	builder.WriteString("Speacial_doctor(")
	builder.WriteString(fmt.Sprintf("id=%v", sd.ID))
	builder.WriteString(", name=")
	builder.WriteString(sd.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Speacial_doctors is a parsable slice of Speacial_doctor.
type Speacial_doctors []*Speacial_doctor

func (sd Speacial_doctors) config(cfg config) {
	for _i := range sd {
		sd[_i].config = cfg
	}
}
