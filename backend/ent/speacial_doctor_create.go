// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/speacial_doctor"
)

// SpeacialDoctorCreate is the builder for creating a Speacial_doctor entity.
type SpeacialDoctorCreate struct {
	config
	mutation *SpeacialDoctorMutation
	hooks    []Hook
}

// SetName sets the name field.
func (sdc *SpeacialDoctorCreate) SetName(s string) *SpeacialDoctorCreate {
	sdc.mutation.SetName(s)
	return sdc
}

// AddOfficeIDs adds the offices edge to Office by ids.
func (sdc *SpeacialDoctorCreate) AddOfficeIDs(ids ...int) *SpeacialDoctorCreate {
	sdc.mutation.AddOfficeIDs(ids...)
	return sdc
}

// AddOffices adds the offices edges to Office.
func (sdc *SpeacialDoctorCreate) AddOffices(o ...*Office) *SpeacialDoctorCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sdc.AddOfficeIDs(ids...)
}

// Mutation returns the SpeacialDoctorMutation object of the builder.
func (sdc *SpeacialDoctorCreate) Mutation() *SpeacialDoctorMutation {
	return sdc.mutation
}

// Save creates the Speacial_doctor in the database.
func (sdc *SpeacialDoctorCreate) Save(ctx context.Context) (*Speacial_doctor, error) {
	if _, ok := sdc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := sdc.mutation.Name(); ok {
		if err := speacial_doctor.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	var (
		err  error
		node *Speacial_doctor
	)
	if len(sdc.hooks) == 0 {
		node, err = sdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpeacialDoctorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sdc.mutation = mutation
			node, err = sdc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sdc.hooks) - 1; i >= 0; i-- {
			mut = sdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sdc *SpeacialDoctorCreate) SaveX(ctx context.Context) *Speacial_doctor {
	v, err := sdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sdc *SpeacialDoctorCreate) sqlSave(ctx context.Context) (*Speacial_doctor, error) {
	sd, _spec := sdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	sd.ID = int(id)
	return sd, nil
}

func (sdc *SpeacialDoctorCreate) createSpec() (*Speacial_doctor, *sqlgraph.CreateSpec) {
	var (
		sd    = &Speacial_doctor{config: sdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: speacial_doctor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: speacial_doctor.FieldID,
			},
		}
	)
	if value, ok := sdc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: speacial_doctor.FieldName,
		})
		sd.Name = value
	}
	if nodes := sdc.mutation.OfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   speacial_doctor.OfficesTable,
			Columns: []string{speacial_doctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return sd, _spec
}
