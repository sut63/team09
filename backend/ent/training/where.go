// Code generated by entc, DO NOT EDIT.

package training

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team09/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Trainingplace applies equality check predicate on the "trainingplace" field. It's identical to TrainingplaceEQ.
func Trainingplace(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrainingplace), v))
	})
}

// Firstday applies equality check predicate on the "firstday" field. It's identical to FirstdayEQ.
func Firstday(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstday), v))
	})
}

// Lastday applies equality check predicate on the "lastday" field. It's identical to LastdayEQ.
func Lastday(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastday), v))
	})
}

// Doctoridcard applies equality check predicate on the "doctoridcard" field. It's identical to DoctoridcardEQ.
func Doctoridcard(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctoridcard), v))
	})
}

// Hour applies equality check predicate on the "hour" field. It's identical to HourEQ.
func Hour(v int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHour), v))
	})
}

// TrainingplaceEQ applies the EQ predicate on the "trainingplace" field.
func TrainingplaceEQ(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrainingplace), v))
	})
}

// TrainingplaceNEQ applies the NEQ predicate on the "trainingplace" field.
func TrainingplaceNEQ(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrainingplace), v))
	})
}

// TrainingplaceIn applies the In predicate on the "trainingplace" field.
func TrainingplaceIn(vs ...string) predicate.Training {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Training(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTrainingplace), v...))
	})
}

// TrainingplaceNotIn applies the NotIn predicate on the "trainingplace" field.
func TrainingplaceNotIn(vs ...string) predicate.Training {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Training(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTrainingplace), v...))
	})
}

// TrainingplaceGT applies the GT predicate on the "trainingplace" field.
func TrainingplaceGT(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrainingplace), v))
	})
}

// TrainingplaceGTE applies the GTE predicate on the "trainingplace" field.
func TrainingplaceGTE(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrainingplace), v))
	})
}

// TrainingplaceLT applies the LT predicate on the "trainingplace" field.
func TrainingplaceLT(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrainingplace), v))
	})
}

// TrainingplaceLTE applies the LTE predicate on the "trainingplace" field.
func TrainingplaceLTE(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrainingplace), v))
	})
}

// TrainingplaceContains applies the Contains predicate on the "trainingplace" field.
func TrainingplaceContains(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrainingplace), v))
	})
}

// TrainingplaceHasPrefix applies the HasPrefix predicate on the "trainingplace" field.
func TrainingplaceHasPrefix(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrainingplace), v))
	})
}

// TrainingplaceHasSuffix applies the HasSuffix predicate on the "trainingplace" field.
func TrainingplaceHasSuffix(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrainingplace), v))
	})
}

// TrainingplaceEqualFold applies the EqualFold predicate on the "trainingplace" field.
func TrainingplaceEqualFold(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrainingplace), v))
	})
}

// TrainingplaceContainsFold applies the ContainsFold predicate on the "trainingplace" field.
func TrainingplaceContainsFold(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrainingplace), v))
	})
}

// FirstdayEQ applies the EQ predicate on the "firstday" field.
func FirstdayEQ(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstday), v))
	})
}

// FirstdayNEQ applies the NEQ predicate on the "firstday" field.
func FirstdayNEQ(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstday), v))
	})
}

// FirstdayIn applies the In predicate on the "firstday" field.
func FirstdayIn(vs ...time.Time) predicate.Training {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Training(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstday), v...))
	})
}

// FirstdayNotIn applies the NotIn predicate on the "firstday" field.
func FirstdayNotIn(vs ...time.Time) predicate.Training {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Training(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstday), v...))
	})
}

// FirstdayGT applies the GT predicate on the "firstday" field.
func FirstdayGT(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstday), v))
	})
}

// FirstdayGTE applies the GTE predicate on the "firstday" field.
func FirstdayGTE(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstday), v))
	})
}

// FirstdayLT applies the LT predicate on the "firstday" field.
func FirstdayLT(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstday), v))
	})
}

// FirstdayLTE applies the LTE predicate on the "firstday" field.
func FirstdayLTE(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstday), v))
	})
}

// LastdayEQ applies the EQ predicate on the "lastday" field.
func LastdayEQ(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastday), v))
	})
}

// LastdayNEQ applies the NEQ predicate on the "lastday" field.
func LastdayNEQ(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastday), v))
	})
}

// LastdayIn applies the In predicate on the "lastday" field.
func LastdayIn(vs ...time.Time) predicate.Training {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Training(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastday), v...))
	})
}

// LastdayNotIn applies the NotIn predicate on the "lastday" field.
func LastdayNotIn(vs ...time.Time) predicate.Training {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Training(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastday), v...))
	})
}

// LastdayGT applies the GT predicate on the "lastday" field.
func LastdayGT(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastday), v))
	})
}

// LastdayGTE applies the GTE predicate on the "lastday" field.
func LastdayGTE(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastday), v))
	})
}

// LastdayLT applies the LT predicate on the "lastday" field.
func LastdayLT(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastday), v))
	})
}

// LastdayLTE applies the LTE predicate on the "lastday" field.
func LastdayLTE(v time.Time) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastday), v))
	})
}

// DoctoridcardEQ applies the EQ predicate on the "doctoridcard" field.
func DoctoridcardEQ(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardNEQ applies the NEQ predicate on the "doctoridcard" field.
func DoctoridcardNEQ(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardIn applies the In predicate on the "doctoridcard" field.
func DoctoridcardIn(vs ...string) predicate.Training {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Training(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDoctoridcard), v...))
	})
}

// DoctoridcardNotIn applies the NotIn predicate on the "doctoridcard" field.
func DoctoridcardNotIn(vs ...string) predicate.Training {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Training(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDoctoridcard), v...))
	})
}

// DoctoridcardGT applies the GT predicate on the "doctoridcard" field.
func DoctoridcardGT(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardGTE applies the GTE predicate on the "doctoridcard" field.
func DoctoridcardGTE(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardLT applies the LT predicate on the "doctoridcard" field.
func DoctoridcardLT(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardLTE applies the LTE predicate on the "doctoridcard" field.
func DoctoridcardLTE(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardContains applies the Contains predicate on the "doctoridcard" field.
func DoctoridcardContains(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardHasPrefix applies the HasPrefix predicate on the "doctoridcard" field.
func DoctoridcardHasPrefix(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardHasSuffix applies the HasSuffix predicate on the "doctoridcard" field.
func DoctoridcardHasSuffix(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardEqualFold applies the EqualFold predicate on the "doctoridcard" field.
func DoctoridcardEqualFold(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardContainsFold applies the ContainsFold predicate on the "doctoridcard" field.
func DoctoridcardContainsFold(v string) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDoctoridcard), v))
	})
}

// HourEQ applies the EQ predicate on the "hour" field.
func HourEQ(v int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHour), v))
	})
}

// HourNEQ applies the NEQ predicate on the "hour" field.
func HourNEQ(v int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHour), v))
	})
}

// HourIn applies the In predicate on the "hour" field.
func HourIn(vs ...int) predicate.Training {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Training(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHour), v...))
	})
}

// HourNotIn applies the NotIn predicate on the "hour" field.
func HourNotIn(vs ...int) predicate.Training {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Training(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHour), v...))
	})
}

// HourGT applies the GT predicate on the "hour" field.
func HourGT(v int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHour), v))
	})
}

// HourGTE applies the GTE predicate on the "hour" field.
func HourGTE(v int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHour), v))
	})
}

// HourLT applies the LT predicate on the "hour" field.
func HourLT(v int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHour), v))
	})
}

// HourLTE applies the LTE predicate on the "hour" field.
func HourLTE(v int) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHour), v))
	})
}

// HasCourse applies the HasEdge predicate on the "course" edge.
func HasCourse() predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseWith applies the HasEdge predicate on the "course" edge with a given conditions (other predicates).
func HasCourseWith(preds ...predicate.Course) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDoctor applies the HasEdge predicate on the "doctor" edge.
func HasDoctor() predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDoctorWith applies the HasEdge predicate on the "doctor" edge with a given conditions (other predicates).
func HasDoctorWith(preds ...predicate.Doctor) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDepartment applies the HasEdge predicate on the "department" edge.
func HasDepartment() predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DepartmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentWith applies the HasEdge predicate on the "department" edge with a given conditions (other predicates).
func HasDepartmentWith(preds ...predicate.Department) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DepartmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Training) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Training) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Training) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		p(s.Not())
	})
}
