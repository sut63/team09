// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team09/app/ent/course"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/detail"
	"github.com/team09/app/ent/mission"
)

// Detail is the model entity for the Detail schema.
type Detail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Explain holds the value of the "explain" field.
	Explain string `json:"explain,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DetailQuery when eager-loading is set.
	Edges         DetailEdges `json:"edges"`
	course_id     *int
	department_id *int
	mission_id    *int
}

// DetailEdges holds the relations/edges for other nodes in the graph.
type DetailEdges struct {
	// Course holds the value of the course edge.
	Course *Course
	// Mission holds the value of the mission edge.
	Mission *Mission
	// Department holds the value of the department edge.
	Department *Department
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DetailEdges) CourseOrErr() (*Course, error) {
	if e.loadedTypes[0] {
		if e.Course == nil {
			// The edge course was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: course.Label}
		}
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// MissionOrErr returns the Mission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DetailEdges) MissionOrErr() (*Mission, error) {
	if e.loadedTypes[1] {
		if e.Mission == nil {
			// The edge mission was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: mission.Label}
		}
		return e.Mission, nil
	}
	return nil, &NotLoadedError{edge: "mission"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DetailEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[2] {
		if e.Department == nil {
			// The edge department was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Detail) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // explain
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Detail) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // course_id
		&sql.NullInt64{}, // department_id
		&sql.NullInt64{}, // mission_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Detail fields.
func (d *Detail) assignValues(values ...interface{}) error {
	if m, n := len(values), len(detail.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field explain", values[0])
	} else if value.Valid {
		d.Explain = value.String
	}
	values = values[1:]
	if len(values) == len(detail.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field course_id", value)
		} else if value.Valid {
			d.course_id = new(int)
			*d.course_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field department_id", value)
		} else if value.Valid {
			d.department_id = new(int)
			*d.department_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field mission_id", value)
		} else if value.Valid {
			d.mission_id = new(int)
			*d.mission_id = int(value.Int64)
		}
	}
	return nil
}

// QueryCourse queries the course edge of the Detail.
func (d *Detail) QueryCourse() *CourseQuery {
	return (&DetailClient{config: d.config}).QueryCourse(d)
}

// QueryMission queries the mission edge of the Detail.
func (d *Detail) QueryMission() *MissionQuery {
	return (&DetailClient{config: d.config}).QueryMission(d)
}

// QueryDepartment queries the department edge of the Detail.
func (d *Detail) QueryDepartment() *DepartmentQuery {
	return (&DetailClient{config: d.config}).QueryDepartment(d)
}

// Update returns a builder for updating this Detail.
// Note that, you need to call Detail.Unwrap() before calling this method, if this Detail
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Detail) Update() *DetailUpdateOne {
	return (&DetailClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Detail) Unwrap() *Detail {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Detail is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Detail) String() string {
	var builder strings.Builder
	builder.WriteString("Detail(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", explain=")
	builder.WriteString(d.Explain)
	builder.WriteByte(')')
	return builder.String()
}

// Details is a parsable slice of Detail.
type Details []*Detail

func (d Details) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
