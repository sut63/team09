// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team09/app/ent/mission"
)

// Mission is the model entity for the Mission schema.
type Mission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MissionType holds the value of the "MissionType" field.
	MissionType string `json:"MissionType,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MissionQuery when eager-loading is set.
	Edges MissionEdges `json:"edges"`
}

// MissionEdges holds the relations/edges for other nodes in the graph.
type MissionEdges struct {
	// Departments holds the value of the departments edge.
	Departments []*Department
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DepartmentsOrErr returns the Departments value or an error if the edge
// was not loaded in eager-loading.
func (e MissionEdges) DepartmentsOrErr() ([]*Department, error) {
	if e.loadedTypes[0] {
		return e.Departments, nil
	}
	return nil, &NotLoadedError{edge: "departments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mission) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // MissionType
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mission fields.
func (m *Mission) assignValues(values ...interface{}) error {
	if m, n := len(values), len(mission.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field MissionType", values[0])
	} else if value.Valid {
		m.MissionType = value.String
	}
	return nil
}

// QueryDepartments queries the departments edge of the Mission.
func (m *Mission) QueryDepartments() *DepartmentQuery {
	return (&MissionClient{config: m.config}).QueryDepartments(m)
}

// Update returns a builder for updating this Mission.
// Note that, you need to call Mission.Unwrap() before calling this method, if this Mission
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mission) Update() *MissionUpdateOne {
	return (&MissionClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Mission) Unwrap() *Mission {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mission is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mission) String() string {
	var builder strings.Builder
	builder.WriteString("Mission(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", MissionType=")
	builder.WriteString(m.MissionType)
	builder.WriteByte(')')
	return builder.String()
}

// Missions is a parsable slice of Mission.
type Missions []*Mission

func (m Missions) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
