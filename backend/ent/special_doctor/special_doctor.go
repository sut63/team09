// Code generated by entc, DO NOT EDIT.

package special_doctor

const (
	// Label holds the string label denoting the special_doctor type in the database.
	Label = "special_doctor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOther holds the string denoting the other field in the database.
	FieldOther = "other"

	// EdgeDoctor holds the string denoting the doctor edge name in mutations.
	EdgeDoctor = "doctor"
	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "department"
	// EdgeSpecialist holds the string denoting the specialist edge name in mutations.
	EdgeSpecialist = "specialist"
	// EdgeOffices holds the string denoting the offices edge name in mutations.
	EdgeOffices = "offices"

	// Table holds the table name of the special_doctor in the database.
	Table = "special_doctors"
	// DoctorTable is the table the holds the doctor relation/edge.
	DoctorTable = "special_doctors"
	// DoctorInverseTable is the table name for the Doctor entity.
	// It exists in this package in order to avoid circular dependency with the "doctor" package.
	DoctorInverseTable = "doctors"
	// DoctorColumn is the table column denoting the doctor relation/edge.
	DoctorColumn = "special_doctor_doctor"
	// DepartmentTable is the table the holds the department relation/edge.
	DepartmentTable = "special_doctors"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "departments"
	// DepartmentColumn is the table column denoting the department relation/edge.
	DepartmentColumn = "department_id"
	// SpecialistTable is the table the holds the specialist relation/edge.
	SpecialistTable = "special_doctors"
	// SpecialistInverseTable is the table name for the Specialist entity.
	// It exists in this package in order to avoid circular dependency with the "specialist" package.
	SpecialistInverseTable = "specialists"
	// SpecialistColumn is the table column denoting the specialist relation/edge.
	SpecialistColumn = "specialist_id"
	// OfficesTable is the table the holds the offices relation/edge.
	OfficesTable = "offices"
	// OfficesInverseTable is the table name for the Office entity.
	// It exists in this package in order to avoid circular dependency with the "office" package.
	OfficesInverseTable = "offices"
	// OfficesColumn is the table column denoting the offices relation/edge.
	OfficesColumn = "special_doctor_id"
)

// Columns holds all SQL columns for special_doctor fields.
var Columns = []string{
	FieldID,
	FieldOther,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Special_Doctor type.
var ForeignKeys = []string{
	"department_id",
	"special_doctor_doctor",
	"specialist_id",
}

var (
	// OtherValidator is a validator for the "Other" field. It is called by the builders before save.
	OtherValidator func(string) error
)
