// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/schedule"
)

// Schedule is the model entity for the Schedule schema.
type Schedule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Activity holds the value of the "activity" field.
	Activity string `json:"activity,omitempty"`
	// AddedTime holds the value of the "added_time" field.
	AddedTime time.Time `json:"added_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduleQuery when eager-loading is set.
	Edges         ScheduleEdges `json:"edges"`
	department_id *int
	schedule_id   *int
	office_id     *int
}

// ScheduleEdges holds the relations/edges for other nodes in the graph.
type ScheduleEdges struct {
	// Docter holds the value of the docter edge.
	Docter *Doctor
	// Department holds the value of the department edge.
	Department *Department
	// Office holds the value of the office edge.
	Office *Office
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DocterOrErr returns the Docter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleEdges) DocterOrErr() (*Doctor, error) {
	if e.loadedTypes[0] {
		if e.Docter == nil {
			// The edge docter was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: doctor.Label}
		}
		return e.Docter, nil
	}
	return nil, &NotLoadedError{edge: "docter"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[1] {
		if e.Department == nil {
			// The edge department was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// OfficeOrErr returns the Office value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleEdges) OfficeOrErr() (*Office, error) {
	if e.loadedTypes[2] {
		if e.Office == nil {
			// The edge office was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: office.Label}
		}
		return e.Office, nil
	}
	return nil, &NotLoadedError{edge: "office"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Schedule) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // activity
		&sql.NullTime{},   // added_time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Schedule) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // department_id
		&sql.NullInt64{}, // schedule_id
		&sql.NullInt64{}, // office_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Schedule fields.
func (s *Schedule) assignValues(values ...interface{}) error {
	if m, n := len(values), len(schedule.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field activity", values[0])
	} else if value.Valid {
		s.Activity = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field added_time", values[1])
	} else if value.Valid {
		s.AddedTime = value.Time
	}
	values = values[2:]
	if len(values) == len(schedule.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field department_id", value)
		} else if value.Valid {
			s.department_id = new(int)
			*s.department_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field schedule_id", value)
		} else if value.Valid {
			s.schedule_id = new(int)
			*s.schedule_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field office_id", value)
		} else if value.Valid {
			s.office_id = new(int)
			*s.office_id = int(value.Int64)
		}
	}
	return nil
}

// QueryDocter queries the docter edge of the Schedule.
func (s *Schedule) QueryDocter() *DoctorQuery {
	return (&ScheduleClient{config: s.config}).QueryDocter(s)
}

// QueryDepartment queries the department edge of the Schedule.
func (s *Schedule) QueryDepartment() *DepartmentQuery {
	return (&ScheduleClient{config: s.config}).QueryDepartment(s)
}

// QueryOffice queries the office edge of the Schedule.
func (s *Schedule) QueryOffice() *OfficeQuery {
	return (&ScheduleClient{config: s.config}).QueryOffice(s)
}

// Update returns a builder for updating this Schedule.
// Note that, you need to call Schedule.Unwrap() before calling this method, if this Schedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Schedule) Update() *ScheduleUpdateOne {
	return (&ScheduleClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Schedule) Unwrap() *Schedule {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Schedule is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Schedule) String() string {
	var builder strings.Builder
	builder.WriteString("Schedule(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", activity=")
	builder.WriteString(s.Activity)
	builder.WriteString(", added_time=")
	builder.WriteString(s.AddedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Schedules is a parsable slice of Schedule.
type Schedules []*Schedule

func (s Schedules) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
