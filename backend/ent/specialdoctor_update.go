// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/extradoctor"
	"github.com/team09/app/ent/predicate"
	"github.com/team09/app/ent/specialdoctor"
)

// SpecialdoctorUpdate is the builder for updating Specialdoctor entities.
type SpecialdoctorUpdate struct {
	config
	hooks      []Hook
	mutation   *SpecialdoctorMutation
	predicates []predicate.Specialdoctor
}

// Where adds a new predicate for the builder.
func (su *SpecialdoctorUpdate) Where(ps ...predicate.Specialdoctor) *SpecialdoctorUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetRoomnumber sets the Roomnumber field.
func (su *SpecialdoctorUpdate) SetRoomnumber(s string) *SpecialdoctorUpdate {
	su.mutation.SetRoomnumber(s)
	return su
}

// SetDoctorid sets the Doctorid field.
func (su *SpecialdoctorUpdate) SetDoctorid(s string) *SpecialdoctorUpdate {
	su.mutation.SetDoctorid(s)
	return su
}

// SetOther sets the Other field.
func (su *SpecialdoctorUpdate) SetOther(s string) *SpecialdoctorUpdate {
	su.mutation.SetOther(s)
	return su
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (su *SpecialdoctorUpdate) SetDoctorID(id int) *SpecialdoctorUpdate {
	su.mutation.SetDoctorID(id)
	return su
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (su *SpecialdoctorUpdate) SetNillableDoctorID(id *int) *SpecialdoctorUpdate {
	if id != nil {
		su = su.SetDoctorID(*id)
	}
	return su
}

// SetDoctor sets the doctor edge to Doctor.
func (su *SpecialdoctorUpdate) SetDoctor(d *Doctor) *SpecialdoctorUpdate {
	return su.SetDoctorID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (su *SpecialdoctorUpdate) SetDepartmentID(id int) *SpecialdoctorUpdate {
	su.mutation.SetDepartmentID(id)
	return su
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (su *SpecialdoctorUpdate) SetNillableDepartmentID(id *int) *SpecialdoctorUpdate {
	if id != nil {
		su = su.SetDepartmentID(*id)
	}
	return su
}

// SetDepartment sets the department edge to Department.
func (su *SpecialdoctorUpdate) SetDepartment(d *Department) *SpecialdoctorUpdate {
	return su.SetDepartmentID(d.ID)
}

// SetExtradoctorID sets the extradoctor edge to Extradoctor by id.
func (su *SpecialdoctorUpdate) SetExtradoctorID(id int) *SpecialdoctorUpdate {
	su.mutation.SetExtradoctorID(id)
	return su
}

// SetNillableExtradoctorID sets the extradoctor edge to Extradoctor by id if the given value is not nil.
func (su *SpecialdoctorUpdate) SetNillableExtradoctorID(id *int) *SpecialdoctorUpdate {
	if id != nil {
		su = su.SetExtradoctorID(*id)
	}
	return su
}

// SetExtradoctor sets the extradoctor edge to Extradoctor.
func (su *SpecialdoctorUpdate) SetExtradoctor(e *Extradoctor) *SpecialdoctorUpdate {
	return su.SetExtradoctorID(e.ID)
}

// Mutation returns the SpecialdoctorMutation object of the builder.
func (su *SpecialdoctorUpdate) Mutation() *SpecialdoctorMutation {
	return su.mutation
}

// ClearDoctor clears the doctor edge to Doctor.
func (su *SpecialdoctorUpdate) ClearDoctor() *SpecialdoctorUpdate {
	su.mutation.ClearDoctor()
	return su
}

// ClearDepartment clears the department edge to Department.
func (su *SpecialdoctorUpdate) ClearDepartment() *SpecialdoctorUpdate {
	su.mutation.ClearDepartment()
	return su
}

// ClearExtradoctor clears the extradoctor edge to Extradoctor.
func (su *SpecialdoctorUpdate) ClearExtradoctor() *SpecialdoctorUpdate {
	su.mutation.ClearExtradoctor()
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SpecialdoctorUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := su.mutation.Roomnumber(); ok {
		if err := specialdoctor.RoomnumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "Roomnumber", err: fmt.Errorf("ent: validator failed for field \"Roomnumber\": %w", err)}
		}
	}
	if v, ok := su.mutation.Doctorid(); ok {
		if err := specialdoctor.DoctoridValidator(v); err != nil {
			return 0, &ValidationError{Name: "Doctorid", err: fmt.Errorf("ent: validator failed for field \"Doctorid\": %w", err)}
		}
	}
	if v, ok := su.mutation.Other(); ok {
		if err := specialdoctor.OtherValidator(v); err != nil {
			return 0, &ValidationError{Name: "Other", err: fmt.Errorf("ent: validator failed for field \"Other\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpecialdoctorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SpecialdoctorUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SpecialdoctorUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SpecialdoctorUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SpecialdoctorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   specialdoctor.Table,
			Columns: specialdoctor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: specialdoctor.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Roomnumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specialdoctor.FieldRoomnumber,
		})
	}
	if value, ok := su.mutation.Doctorid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specialdoctor.FieldDoctorid,
		})
	}
	if value, ok := su.mutation.Other(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specialdoctor.FieldOther,
		})
	}
	if su.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DoctorTable,
			Columns: []string{specialdoctor.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DoctorTable,
			Columns: []string{specialdoctor.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DepartmentTable,
			Columns: []string{specialdoctor.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DepartmentTable,
			Columns: []string{specialdoctor.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ExtradoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.ExtradoctorTable,
			Columns: []string{specialdoctor.ExtradoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extradoctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ExtradoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.ExtradoctorTable,
			Columns: []string{specialdoctor.ExtradoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extradoctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{specialdoctor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SpecialdoctorUpdateOne is the builder for updating a single Specialdoctor entity.
type SpecialdoctorUpdateOne struct {
	config
	hooks    []Hook
	mutation *SpecialdoctorMutation
}

// SetRoomnumber sets the Roomnumber field.
func (suo *SpecialdoctorUpdateOne) SetRoomnumber(s string) *SpecialdoctorUpdateOne {
	suo.mutation.SetRoomnumber(s)
	return suo
}

// SetDoctorid sets the Doctorid field.
func (suo *SpecialdoctorUpdateOne) SetDoctorid(s string) *SpecialdoctorUpdateOne {
	suo.mutation.SetDoctorid(s)
	return suo
}

// SetOther sets the Other field.
func (suo *SpecialdoctorUpdateOne) SetOther(s string) *SpecialdoctorUpdateOne {
	suo.mutation.SetOther(s)
	return suo
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (suo *SpecialdoctorUpdateOne) SetDoctorID(id int) *SpecialdoctorUpdateOne {
	suo.mutation.SetDoctorID(id)
	return suo
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (suo *SpecialdoctorUpdateOne) SetNillableDoctorID(id *int) *SpecialdoctorUpdateOne {
	if id != nil {
		suo = suo.SetDoctorID(*id)
	}
	return suo
}

// SetDoctor sets the doctor edge to Doctor.
func (suo *SpecialdoctorUpdateOne) SetDoctor(d *Doctor) *SpecialdoctorUpdateOne {
	return suo.SetDoctorID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (suo *SpecialdoctorUpdateOne) SetDepartmentID(id int) *SpecialdoctorUpdateOne {
	suo.mutation.SetDepartmentID(id)
	return suo
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (suo *SpecialdoctorUpdateOne) SetNillableDepartmentID(id *int) *SpecialdoctorUpdateOne {
	if id != nil {
		suo = suo.SetDepartmentID(*id)
	}
	return suo
}

// SetDepartment sets the department edge to Department.
func (suo *SpecialdoctorUpdateOne) SetDepartment(d *Department) *SpecialdoctorUpdateOne {
	return suo.SetDepartmentID(d.ID)
}

// SetExtradoctorID sets the extradoctor edge to Extradoctor by id.
func (suo *SpecialdoctorUpdateOne) SetExtradoctorID(id int) *SpecialdoctorUpdateOne {
	suo.mutation.SetExtradoctorID(id)
	return suo
}

// SetNillableExtradoctorID sets the extradoctor edge to Extradoctor by id if the given value is not nil.
func (suo *SpecialdoctorUpdateOne) SetNillableExtradoctorID(id *int) *SpecialdoctorUpdateOne {
	if id != nil {
		suo = suo.SetExtradoctorID(*id)
	}
	return suo
}

// SetExtradoctor sets the extradoctor edge to Extradoctor.
func (suo *SpecialdoctorUpdateOne) SetExtradoctor(e *Extradoctor) *SpecialdoctorUpdateOne {
	return suo.SetExtradoctorID(e.ID)
}

// Mutation returns the SpecialdoctorMutation object of the builder.
func (suo *SpecialdoctorUpdateOne) Mutation() *SpecialdoctorMutation {
	return suo.mutation
}

// ClearDoctor clears the doctor edge to Doctor.
func (suo *SpecialdoctorUpdateOne) ClearDoctor() *SpecialdoctorUpdateOne {
	suo.mutation.ClearDoctor()
	return suo
}

// ClearDepartment clears the department edge to Department.
func (suo *SpecialdoctorUpdateOne) ClearDepartment() *SpecialdoctorUpdateOne {
	suo.mutation.ClearDepartment()
	return suo
}

// ClearExtradoctor clears the extradoctor edge to Extradoctor.
func (suo *SpecialdoctorUpdateOne) ClearExtradoctor() *SpecialdoctorUpdateOne {
	suo.mutation.ClearExtradoctor()
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *SpecialdoctorUpdateOne) Save(ctx context.Context) (*Specialdoctor, error) {
	if v, ok := suo.mutation.Roomnumber(); ok {
		if err := specialdoctor.RoomnumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "Roomnumber", err: fmt.Errorf("ent: validator failed for field \"Roomnumber\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Doctorid(); ok {
		if err := specialdoctor.DoctoridValidator(v); err != nil {
			return nil, &ValidationError{Name: "Doctorid", err: fmt.Errorf("ent: validator failed for field \"Doctorid\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Other(); ok {
		if err := specialdoctor.OtherValidator(v); err != nil {
			return nil, &ValidationError{Name: "Other", err: fmt.Errorf("ent: validator failed for field \"Other\": %w", err)}
		}
	}

	var (
		err  error
		node *Specialdoctor
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpecialdoctorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SpecialdoctorUpdateOne) SaveX(ctx context.Context) *Specialdoctor {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SpecialdoctorUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SpecialdoctorUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SpecialdoctorUpdateOne) sqlSave(ctx context.Context) (s *Specialdoctor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   specialdoctor.Table,
			Columns: specialdoctor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: specialdoctor.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Specialdoctor.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.Roomnumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specialdoctor.FieldRoomnumber,
		})
	}
	if value, ok := suo.mutation.Doctorid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specialdoctor.FieldDoctorid,
		})
	}
	if value, ok := suo.mutation.Other(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specialdoctor.FieldOther,
		})
	}
	if suo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DoctorTable,
			Columns: []string{specialdoctor.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DoctorTable,
			Columns: []string{specialdoctor.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DepartmentTable,
			Columns: []string{specialdoctor.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DepartmentTable,
			Columns: []string{specialdoctor.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ExtradoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.ExtradoctorTable,
			Columns: []string{specialdoctor.ExtradoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extradoctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ExtradoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.ExtradoctorTable,
			Columns: []string{specialdoctor.ExtradoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extradoctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Specialdoctor{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{specialdoctor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
