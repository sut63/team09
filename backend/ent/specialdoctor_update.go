// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/predicate"
	"github.com/team09/app/ent/specialdoctor"
	"github.com/team09/app/ent/specialist"
)

// SpecialdoctorUpdate is the builder for updating Specialdoctor entities.
type SpecialdoctorUpdate struct {
	config
	hooks      []Hook
	mutation   *SpecialdoctorMutation
	predicates []predicate.Specialdoctor
}

// Where adds a new predicate for the builder.
func (su *SpecialdoctorUpdate) Where(ps ...predicate.Specialdoctor) *SpecialdoctorUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetOther sets the Other field.
func (su *SpecialdoctorUpdate) SetOther(s string) *SpecialdoctorUpdate {
	su.mutation.SetOther(s)
	return su
}

// AddDoctorIDs adds the doctor edge to Doctor by ids.
func (su *SpecialdoctorUpdate) AddDoctorIDs(ids ...int) *SpecialdoctorUpdate {
	su.mutation.AddDoctorIDs(ids...)
	return su
}

// AddDoctor adds the doctor edges to Doctor.
func (su *SpecialdoctorUpdate) AddDoctor(d ...*Doctor) *SpecialdoctorUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.AddDoctorIDs(ids...)
}

// SetDepartmentID sets the department edge to Department by id.
func (su *SpecialdoctorUpdate) SetDepartmentID(id int) *SpecialdoctorUpdate {
	su.mutation.SetDepartmentID(id)
	return su
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (su *SpecialdoctorUpdate) SetNillableDepartmentID(id *int) *SpecialdoctorUpdate {
	if id != nil {
		su = su.SetDepartmentID(*id)
	}
	return su
}

// SetDepartment sets the department edge to Department.
func (su *SpecialdoctorUpdate) SetDepartment(d *Department) *SpecialdoctorUpdate {
	return su.SetDepartmentID(d.ID)
}

// SetSpecialistID sets the specialist edge to Specialist by id.
func (su *SpecialdoctorUpdate) SetSpecialistID(id int) *SpecialdoctorUpdate {
	su.mutation.SetSpecialistID(id)
	return su
}

// SetNillableSpecialistID sets the specialist edge to Specialist by id if the given value is not nil.
func (su *SpecialdoctorUpdate) SetNillableSpecialistID(id *int) *SpecialdoctorUpdate {
	if id != nil {
		su = su.SetSpecialistID(*id)
	}
	return su
}

// SetSpecialist sets the specialist edge to Specialist.
func (su *SpecialdoctorUpdate) SetSpecialist(s *Specialist) *SpecialdoctorUpdate {
	return su.SetSpecialistID(s.ID)
}

// AddOfficeIDs adds the offices edge to Office by ids.
func (su *SpecialdoctorUpdate) AddOfficeIDs(ids ...int) *SpecialdoctorUpdate {
	su.mutation.AddOfficeIDs(ids...)
	return su
}

// AddOffices adds the offices edges to Office.
func (su *SpecialdoctorUpdate) AddOffices(o ...*Office) *SpecialdoctorUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return su.AddOfficeIDs(ids...)
}

// Mutation returns the SpecialdoctorMutation object of the builder.
func (su *SpecialdoctorUpdate) Mutation() *SpecialdoctorMutation {
	return su.mutation
}

// RemoveDoctorIDs removes the doctor edge to Doctor by ids.
func (su *SpecialdoctorUpdate) RemoveDoctorIDs(ids ...int) *SpecialdoctorUpdate {
	su.mutation.RemoveDoctorIDs(ids...)
	return su
}

// RemoveDoctor removes doctor edges to Doctor.
func (su *SpecialdoctorUpdate) RemoveDoctor(d ...*Doctor) *SpecialdoctorUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.RemoveDoctorIDs(ids...)
}

// ClearDepartment clears the department edge to Department.
func (su *SpecialdoctorUpdate) ClearDepartment() *SpecialdoctorUpdate {
	su.mutation.ClearDepartment()
	return su
}

// ClearSpecialist clears the specialist edge to Specialist.
func (su *SpecialdoctorUpdate) ClearSpecialist() *SpecialdoctorUpdate {
	su.mutation.ClearSpecialist()
	return su
}

// RemoveOfficeIDs removes the offices edge to Office by ids.
func (su *SpecialdoctorUpdate) RemoveOfficeIDs(ids ...int) *SpecialdoctorUpdate {
	su.mutation.RemoveOfficeIDs(ids...)
	return su
}

// RemoveOffices removes offices edges to Office.
func (su *SpecialdoctorUpdate) RemoveOffices(o ...*Office) *SpecialdoctorUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return su.RemoveOfficeIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SpecialdoctorUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := su.mutation.Other(); ok {
		if err := specialdoctor.OtherValidator(v); err != nil {
			return 0, &ValidationError{Name: "Other", err: fmt.Errorf("ent: validator failed for field \"Other\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpecialdoctorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SpecialdoctorUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SpecialdoctorUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SpecialdoctorUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SpecialdoctorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   specialdoctor.Table,
			Columns: specialdoctor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: specialdoctor.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Other(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specialdoctor.FieldOther,
		})
	}
	if nodes := su.mutation.RemovedDoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   specialdoctor.DoctorTable,
			Columns: []string{specialdoctor.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   specialdoctor.DoctorTable,
			Columns: []string{specialdoctor.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DepartmentTable,
			Columns: []string{specialdoctor.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DepartmentTable,
			Columns: []string{specialdoctor.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SpecialistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.SpecialistTable,
			Columns: []string{specialdoctor.SpecialistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: specialist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SpecialistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.SpecialistTable,
			Columns: []string{specialdoctor.SpecialistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: specialist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := su.mutation.RemovedOfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   specialdoctor.OfficesTable,
			Columns: []string{specialdoctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   specialdoctor.OfficesTable,
			Columns: []string{specialdoctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{specialdoctor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SpecialdoctorUpdateOne is the builder for updating a single Specialdoctor entity.
type SpecialdoctorUpdateOne struct {
	config
	hooks    []Hook
	mutation *SpecialdoctorMutation
}

// SetOther sets the Other field.
func (suo *SpecialdoctorUpdateOne) SetOther(s string) *SpecialdoctorUpdateOne {
	suo.mutation.SetOther(s)
	return suo
}

// AddDoctorIDs adds the doctor edge to Doctor by ids.
func (suo *SpecialdoctorUpdateOne) AddDoctorIDs(ids ...int) *SpecialdoctorUpdateOne {
	suo.mutation.AddDoctorIDs(ids...)
	return suo
}

// AddDoctor adds the doctor edges to Doctor.
func (suo *SpecialdoctorUpdateOne) AddDoctor(d ...*Doctor) *SpecialdoctorUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.AddDoctorIDs(ids...)
}

// SetDepartmentID sets the department edge to Department by id.
func (suo *SpecialdoctorUpdateOne) SetDepartmentID(id int) *SpecialdoctorUpdateOne {
	suo.mutation.SetDepartmentID(id)
	return suo
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (suo *SpecialdoctorUpdateOne) SetNillableDepartmentID(id *int) *SpecialdoctorUpdateOne {
	if id != nil {
		suo = suo.SetDepartmentID(*id)
	}
	return suo
}

// SetDepartment sets the department edge to Department.
func (suo *SpecialdoctorUpdateOne) SetDepartment(d *Department) *SpecialdoctorUpdateOne {
	return suo.SetDepartmentID(d.ID)
}

// SetSpecialistID sets the specialist edge to Specialist by id.
func (suo *SpecialdoctorUpdateOne) SetSpecialistID(id int) *SpecialdoctorUpdateOne {
	suo.mutation.SetSpecialistID(id)
	return suo
}

// SetNillableSpecialistID sets the specialist edge to Specialist by id if the given value is not nil.
func (suo *SpecialdoctorUpdateOne) SetNillableSpecialistID(id *int) *SpecialdoctorUpdateOne {
	if id != nil {
		suo = suo.SetSpecialistID(*id)
	}
	return suo
}

// SetSpecialist sets the specialist edge to Specialist.
func (suo *SpecialdoctorUpdateOne) SetSpecialist(s *Specialist) *SpecialdoctorUpdateOne {
	return suo.SetSpecialistID(s.ID)
}

// AddOfficeIDs adds the offices edge to Office by ids.
func (suo *SpecialdoctorUpdateOne) AddOfficeIDs(ids ...int) *SpecialdoctorUpdateOne {
	suo.mutation.AddOfficeIDs(ids...)
	return suo
}

// AddOffices adds the offices edges to Office.
func (suo *SpecialdoctorUpdateOne) AddOffices(o ...*Office) *SpecialdoctorUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return suo.AddOfficeIDs(ids...)
}

// Mutation returns the SpecialdoctorMutation object of the builder.
func (suo *SpecialdoctorUpdateOne) Mutation() *SpecialdoctorMutation {
	return suo.mutation
}

// RemoveDoctorIDs removes the doctor edge to Doctor by ids.
func (suo *SpecialdoctorUpdateOne) RemoveDoctorIDs(ids ...int) *SpecialdoctorUpdateOne {
	suo.mutation.RemoveDoctorIDs(ids...)
	return suo
}

// RemoveDoctor removes doctor edges to Doctor.
func (suo *SpecialdoctorUpdateOne) RemoveDoctor(d ...*Doctor) *SpecialdoctorUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.RemoveDoctorIDs(ids...)
}

// ClearDepartment clears the department edge to Department.
func (suo *SpecialdoctorUpdateOne) ClearDepartment() *SpecialdoctorUpdateOne {
	suo.mutation.ClearDepartment()
	return suo
}

// ClearSpecialist clears the specialist edge to Specialist.
func (suo *SpecialdoctorUpdateOne) ClearSpecialist() *SpecialdoctorUpdateOne {
	suo.mutation.ClearSpecialist()
	return suo
}

// RemoveOfficeIDs removes the offices edge to Office by ids.
func (suo *SpecialdoctorUpdateOne) RemoveOfficeIDs(ids ...int) *SpecialdoctorUpdateOne {
	suo.mutation.RemoveOfficeIDs(ids...)
	return suo
}

// RemoveOffices removes offices edges to Office.
func (suo *SpecialdoctorUpdateOne) RemoveOffices(o ...*Office) *SpecialdoctorUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return suo.RemoveOfficeIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *SpecialdoctorUpdateOne) Save(ctx context.Context) (*Specialdoctor, error) {
	if v, ok := suo.mutation.Other(); ok {
		if err := specialdoctor.OtherValidator(v); err != nil {
			return nil, &ValidationError{Name: "Other", err: fmt.Errorf("ent: validator failed for field \"Other\": %w", err)}
		}
	}

	var (
		err  error
		node *Specialdoctor
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpecialdoctorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SpecialdoctorUpdateOne) SaveX(ctx context.Context) *Specialdoctor {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SpecialdoctorUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SpecialdoctorUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SpecialdoctorUpdateOne) sqlSave(ctx context.Context) (s *Specialdoctor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   specialdoctor.Table,
			Columns: specialdoctor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: specialdoctor.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Specialdoctor.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.Other(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specialdoctor.FieldOther,
		})
	}
	if nodes := suo.mutation.RemovedDoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   specialdoctor.DoctorTable,
			Columns: []string{specialdoctor.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   specialdoctor.DoctorTable,
			Columns: []string{specialdoctor.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DepartmentTable,
			Columns: []string{specialdoctor.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.DepartmentTable,
			Columns: []string{specialdoctor.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SpecialistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.SpecialistTable,
			Columns: []string{specialdoctor.SpecialistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: specialist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SpecialistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   specialdoctor.SpecialistTable,
			Columns: []string{specialdoctor.SpecialistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: specialist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := suo.mutation.RemovedOfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   specialdoctor.OfficesTable,
			Columns: []string{specialdoctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   specialdoctor.OfficesTable,
			Columns: []string{specialdoctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Specialdoctor{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{specialdoctor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
