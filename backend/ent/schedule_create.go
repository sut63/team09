// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/schedule"
)

// ScheduleCreate is the builder for creating a Schedule entity.
type ScheduleCreate struct {
	config
	mutation *ScheduleMutation
	hooks    []Hook
}

// SetActivity sets the activity field.
func (sc *ScheduleCreate) SetActivity(s string) *ScheduleCreate {
	sc.mutation.SetActivity(s)
	return sc
}

// SetAddedTime sets the added_time field.
func (sc *ScheduleCreate) SetAddedTime(t time.Time) *ScheduleCreate {
	sc.mutation.SetAddedTime(t)
	return sc
}

// SetDocterID sets the docter edge to Doctor by id.
func (sc *ScheduleCreate) SetDocterID(id int) *ScheduleCreate {
	sc.mutation.SetDocterID(id)
	return sc
}

// SetNillableDocterID sets the docter edge to Doctor by id if the given value is not nil.
func (sc *ScheduleCreate) SetNillableDocterID(id *int) *ScheduleCreate {
	if id != nil {
		sc = sc.SetDocterID(*id)
	}
	return sc
}

// SetDocter sets the docter edge to Doctor.
func (sc *ScheduleCreate) SetDocter(d *Doctor) *ScheduleCreate {
	return sc.SetDocterID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (sc *ScheduleCreate) SetDepartmentID(id int) *ScheduleCreate {
	sc.mutation.SetDepartmentID(id)
	return sc
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (sc *ScheduleCreate) SetNillableDepartmentID(id *int) *ScheduleCreate {
	if id != nil {
		sc = sc.SetDepartmentID(*id)
	}
	return sc
}

// SetDepartment sets the department edge to Department.
func (sc *ScheduleCreate) SetDepartment(d *Department) *ScheduleCreate {
	return sc.SetDepartmentID(d.ID)
}

// SetOfficeID sets the office edge to Office by id.
func (sc *ScheduleCreate) SetOfficeID(id int) *ScheduleCreate {
	sc.mutation.SetOfficeID(id)
	return sc
}

// SetNillableOfficeID sets the office edge to Office by id if the given value is not nil.
func (sc *ScheduleCreate) SetNillableOfficeID(id *int) *ScheduleCreate {
	if id != nil {
		sc = sc.SetOfficeID(*id)
	}
	return sc
}

// SetOffice sets the office edge to Office.
func (sc *ScheduleCreate) SetOffice(o *Office) *ScheduleCreate {
	return sc.SetOfficeID(o.ID)
}

// Mutation returns the ScheduleMutation object of the builder.
func (sc *ScheduleCreate) Mutation() *ScheduleMutation {
	return sc.mutation
}

// Save creates the Schedule in the database.
func (sc *ScheduleCreate) Save(ctx context.Context) (*Schedule, error) {
	if _, ok := sc.mutation.Activity(); !ok {
		return nil, &ValidationError{Name: "activity", err: errors.New("ent: missing required field \"activity\"")}
	}
	if v, ok := sc.mutation.Activity(); ok {
		if err := schedule.ActivityValidator(v); err != nil {
			return nil, &ValidationError{Name: "activity", err: fmt.Errorf("ent: validator failed for field \"activity\": %w", err)}
		}
	}
	if _, ok := sc.mutation.AddedTime(); !ok {
		return nil, &ValidationError{Name: "added_time", err: errors.New("ent: missing required field \"added_time\"")}
	}
	var (
		err  error
		node *Schedule
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScheduleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScheduleCreate) SaveX(ctx context.Context) *Schedule {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *ScheduleCreate) sqlSave(ctx context.Context) (*Schedule, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *ScheduleCreate) createSpec() (*Schedule, *sqlgraph.CreateSpec) {
	var (
		s     = &Schedule{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: schedule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: schedule.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Activity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: schedule.FieldActivity,
		})
		s.Activity = value
	}
	if value, ok := sc.mutation.AddedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: schedule.FieldAddedTime,
		})
		s.AddedTime = value
	}
	if nodes := sc.mutation.DocterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.DocterTable,
			Columns: []string{schedule.DocterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.DepartmentTable,
			Columns: []string{schedule.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OfficeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.OfficeTable,
			Columns: []string{schedule.OfficeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}
