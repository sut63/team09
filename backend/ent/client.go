// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/tanapon395/playlist-video/ent/migrate"

	"github.com/tanapon395/playlist-video/ent/playlist"
	"github.com/tanapon395/playlist-video/ent/playlist_video"
	"github.com/tanapon395/playlist-video/ent/resolution"
	"github.com/tanapon395/playlist-video/ent/user"
	"github.com/tanapon395/playlist-video/ent/video"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Playlist is the client for interacting with the Playlist builders.
	Playlist *PlaylistClient
	// Playlist_Video is the client for interacting with the Playlist_Video builders.
	Playlist_Video *Playlist_VideoClient
	// Resolution is the client for interacting with the Resolution builders.
	Resolution *ResolutionClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Video is the client for interacting with the Video builders.
	Video *VideoClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Playlist = NewPlaylistClient(c.config)
	c.Playlist_Video = NewPlaylist_VideoClient(c.config)
	c.Resolution = NewResolutionClient(c.config)
	c.User = NewUserClient(c.config)
	c.Video = NewVideoClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Playlist:       NewPlaylistClient(cfg),
		Playlist_Video: NewPlaylist_VideoClient(cfg),
		Resolution:     NewResolutionClient(cfg),
		User:           NewUserClient(cfg),
		Video:          NewVideoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:         cfg,
		Playlist:       NewPlaylistClient(cfg),
		Playlist_Video: NewPlaylist_VideoClient(cfg),
		Resolution:     NewResolutionClient(cfg),
		User:           NewUserClient(cfg),
		Video:          NewVideoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Playlist.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Playlist.Use(hooks...)
	c.Playlist_Video.Use(hooks...)
	c.Resolution.Use(hooks...)
	c.User.Use(hooks...)
	c.Video.Use(hooks...)
}

// PlaylistClient is a client for the Playlist schema.
type PlaylistClient struct {
	config
}

// NewPlaylistClient returns a client for the Playlist from the given config.
func NewPlaylistClient(c config) *PlaylistClient {
	return &PlaylistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playlist.Hooks(f(g(h())))`.
func (c *PlaylistClient) Use(hooks ...Hook) {
	c.hooks.Playlist = append(c.hooks.Playlist, hooks...)
}

// Create returns a create builder for Playlist.
func (c *PlaylistClient) Create() *PlaylistCreate {
	mutation := newPlaylistMutation(c.config, OpCreate)
	return &PlaylistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Playlist entities.
func (c *PlaylistClient) CreateBulk(builders ...*PlaylistCreate) *PlaylistCreateBulk {
	return &PlaylistCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Playlist.
func (c *PlaylistClient) Update() *PlaylistUpdate {
	mutation := newPlaylistMutation(c.config, OpUpdate)
	return &PlaylistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlaylistClient) UpdateOne(pl *Playlist) *PlaylistUpdateOne {
	mutation := newPlaylistMutation(c.config, OpUpdateOne, withPlaylist(pl))
	return &PlaylistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlaylistClient) UpdateOneID(id int) *PlaylistUpdateOne {
	mutation := newPlaylistMutation(c.config, OpUpdateOne, withPlaylistID(id))
	return &PlaylistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Playlist.
func (c *PlaylistClient) Delete() *PlaylistDelete {
	mutation := newPlaylistMutation(c.config, OpDelete)
	return &PlaylistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PlaylistClient) DeleteOne(pl *Playlist) *PlaylistDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PlaylistClient) DeleteOneID(id int) *PlaylistDeleteOne {
	builder := c.Delete().Where(playlist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaylistDeleteOne{builder}
}

// Query returns a query builder for Playlist.
func (c *PlaylistClient) Query() *PlaylistQuery {
	return &PlaylistQuery{config: c.config}
}

// Get returns a Playlist entity by its id.
func (c *PlaylistClient) Get(ctx context.Context, id int) (*Playlist, error) {
	return c.Query().Where(playlist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlaylistClient) GetX(ctx context.Context, id int) *Playlist {
	pl, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pl
}

// QueryOwner queries the owner edge of a Playlist.
func (c *PlaylistClient) QueryOwner(pl *Playlist) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playlist.Table, playlist.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playlist.OwnerTable, playlist.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlaylistVideos queries the playlist_videos edge of a Playlist.
func (c *PlaylistClient) QueryPlaylistVideos(pl *Playlist) *PlaylistVideoQuery {
	query := &PlaylistVideoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playlist.Table, playlist.FieldID, id),
			sqlgraph.To(playlist_video.Table, playlist_video.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, playlist.PlaylistVideosTable, playlist.PlaylistVideosColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlaylistClient) Hooks() []Hook {
	return c.hooks.Playlist
}

// Playlist_VideoClient is a client for the Playlist_Video schema.
type Playlist_VideoClient struct {
	config
}

// NewPlaylist_VideoClient returns a client for the Playlist_Video from the given config.
func NewPlaylist_VideoClient(c config) *Playlist_VideoClient {
	return &Playlist_VideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playlist_video.Hooks(f(g(h())))`.
func (c *Playlist_VideoClient) Use(hooks ...Hook) {
	c.hooks.Playlist_Video = append(c.hooks.Playlist_Video, hooks...)
}

// Create returns a create builder for Playlist_Video.
func (c *Playlist_VideoClient) Create() *PlaylistVideoCreate {
	mutation := newPlaylistVideoMutation(c.config, OpCreate)
	return &PlaylistVideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Playlist_Video entities.
func (c *Playlist_VideoClient) CreateBulk(builders ...*PlaylistVideoCreate) *PlaylistVideoCreateBulk {
	return &PlaylistVideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Playlist_Video.
func (c *Playlist_VideoClient) Update() *PlaylistVideoUpdate {
	mutation := newPlaylistVideoMutation(c.config, OpUpdate)
	return &PlaylistVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Playlist_VideoClient) UpdateOne(pv *Playlist_Video) *PlaylistVideoUpdateOne {
	mutation := newPlaylistVideoMutation(c.config, OpUpdateOne, withPlaylist_Video(pv))
	return &PlaylistVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Playlist_VideoClient) UpdateOneID(id int) *PlaylistVideoUpdateOne {
	mutation := newPlaylistVideoMutation(c.config, OpUpdateOne, withPlaylist_VideoID(id))
	return &PlaylistVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Playlist_Video.
func (c *Playlist_VideoClient) Delete() *PlaylistVideoDelete {
	mutation := newPlaylistVideoMutation(c.config, OpDelete)
	return &PlaylistVideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *Playlist_VideoClient) DeleteOne(pv *Playlist_Video) *PlaylistVideoDeleteOne {
	return c.DeleteOneID(pv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *Playlist_VideoClient) DeleteOneID(id int) *PlaylistVideoDeleteOne {
	builder := c.Delete().Where(playlist_video.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaylistVideoDeleteOne{builder}
}

// Query returns a query builder for Playlist_Video.
func (c *Playlist_VideoClient) Query() *PlaylistVideoQuery {
	return &PlaylistVideoQuery{config: c.config}
}

// Get returns a Playlist_Video entity by its id.
func (c *Playlist_VideoClient) Get(ctx context.Context, id int) (*Playlist_Video, error) {
	return c.Query().Where(playlist_video.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Playlist_VideoClient) GetX(ctx context.Context, id int) *Playlist_Video {
	pv, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pv
}

// QueryPlaylist queries the playlist edge of a Playlist_Video.
func (c *Playlist_VideoClient) QueryPlaylist(pv *Playlist_Video) *PlaylistQuery {
	query := &PlaylistQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playlist_video.Table, playlist_video.FieldID, id),
			sqlgraph.To(playlist.Table, playlist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playlist_video.PlaylistTable, playlist_video.PlaylistColumn),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideo queries the video edge of a Playlist_Video.
func (c *Playlist_VideoClient) QueryVideo(pv *Playlist_Video) *VideoQuery {
	query := &VideoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playlist_video.Table, playlist_video.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playlist_video.VideoTable, playlist_video.VideoColumn),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResolution queries the resolution edge of a Playlist_Video.
func (c *Playlist_VideoClient) QueryResolution(pv *Playlist_Video) *ResolutionQuery {
	query := &ResolutionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playlist_video.Table, playlist_video.FieldID, id),
			sqlgraph.To(resolution.Table, resolution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playlist_video.ResolutionTable, playlist_video.ResolutionColumn),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Playlist_VideoClient) Hooks() []Hook {
	return c.hooks.Playlist_Video
}

// ResolutionClient is a client for the Resolution schema.
type ResolutionClient struct {
	config
}

// NewResolutionClient returns a client for the Resolution from the given config.
func NewResolutionClient(c config) *ResolutionClient {
	return &ResolutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resolution.Hooks(f(g(h())))`.
func (c *ResolutionClient) Use(hooks ...Hook) {
	c.hooks.Resolution = append(c.hooks.Resolution, hooks...)
}

// Create returns a create builder for Resolution.
func (c *ResolutionClient) Create() *ResolutionCreate {
	mutation := newResolutionMutation(c.config, OpCreate)
	return &ResolutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Resolution entities.
func (c *ResolutionClient) CreateBulk(builders ...*ResolutionCreate) *ResolutionCreateBulk {
	return &ResolutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Resolution.
func (c *ResolutionClient) Update() *ResolutionUpdate {
	mutation := newResolutionMutation(c.config, OpUpdate)
	return &ResolutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResolutionClient) UpdateOne(r *Resolution) *ResolutionUpdateOne {
	mutation := newResolutionMutation(c.config, OpUpdateOne, withResolution(r))
	return &ResolutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResolutionClient) UpdateOneID(id int) *ResolutionUpdateOne {
	mutation := newResolutionMutation(c.config, OpUpdateOne, withResolutionID(id))
	return &ResolutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Resolution.
func (c *ResolutionClient) Delete() *ResolutionDelete {
	mutation := newResolutionMutation(c.config, OpDelete)
	return &ResolutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ResolutionClient) DeleteOne(r *Resolution) *ResolutionDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ResolutionClient) DeleteOneID(id int) *ResolutionDeleteOne {
	builder := c.Delete().Where(resolution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResolutionDeleteOne{builder}
}

// Query returns a query builder for Resolution.
func (c *ResolutionClient) Query() *ResolutionQuery {
	return &ResolutionQuery{config: c.config}
}

// Get returns a Resolution entity by its id.
func (c *ResolutionClient) Get(ctx context.Context, id int) (*Resolution, error) {
	return c.Query().Where(resolution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResolutionClient) GetX(ctx context.Context, id int) *Resolution {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryPlaylistVideos queries the playlist_videos edge of a Resolution.
func (c *ResolutionClient) QueryPlaylistVideos(r *Resolution) *PlaylistVideoQuery {
	query := &PlaylistVideoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resolution.Table, resolution.FieldID, id),
			sqlgraph.To(playlist_video.Table, playlist_video.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resolution.PlaylistVideosTable, resolution.PlaylistVideosColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResolutionClient) Hooks() []Hook {
	return c.hooks.Resolution
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryPlaylists queries the playlists edge of a User.
func (c *UserClient) QueryPlaylists(u *User) *PlaylistQuery {
	query := &PlaylistQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(playlist.Table, playlist.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PlaylistsTable, user.PlaylistsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideos queries the videos edge of a User.
func (c *UserClient) QueryVideos(u *User) *VideoQuery {
	query := &VideoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.VideosTable, user.VideosColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// VideoClient is a client for the Video schema.
type VideoClient struct {
	config
}

// NewVideoClient returns a client for the Video from the given config.
func NewVideoClient(c config) *VideoClient {
	return &VideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `video.Hooks(f(g(h())))`.
func (c *VideoClient) Use(hooks ...Hook) {
	c.hooks.Video = append(c.hooks.Video, hooks...)
}

// Create returns a create builder for Video.
func (c *VideoClient) Create() *VideoCreate {
	mutation := newVideoMutation(c.config, OpCreate)
	return &VideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Video entities.
func (c *VideoClient) CreateBulk(builders ...*VideoCreate) *VideoCreateBulk {
	return &VideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Video.
func (c *VideoClient) Update() *VideoUpdate {
	mutation := newVideoMutation(c.config, OpUpdate)
	return &VideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VideoClient) UpdateOne(v *Video) *VideoUpdateOne {
	mutation := newVideoMutation(c.config, OpUpdateOne, withVideo(v))
	return &VideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VideoClient) UpdateOneID(id int) *VideoUpdateOne {
	mutation := newVideoMutation(c.config, OpUpdateOne, withVideoID(id))
	return &VideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Video.
func (c *VideoClient) Delete() *VideoDelete {
	mutation := newVideoMutation(c.config, OpDelete)
	return &VideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VideoClient) DeleteOne(v *Video) *VideoDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VideoClient) DeleteOneID(id int) *VideoDeleteOne {
	builder := c.Delete().Where(video.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VideoDeleteOne{builder}
}

// Query returns a query builder for Video.
func (c *VideoClient) Query() *VideoQuery {
	return &VideoQuery{config: c.config}
}

// Get returns a Video entity by its id.
func (c *VideoClient) Get(ctx context.Context, id int) (*Video, error) {
	return c.Query().Where(video.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VideoClient) GetX(ctx context.Context, id int) *Video {
	v, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return v
}

// QueryOwner queries the owner edge of a Video.
func (c *VideoClient) QueryOwner(v *Video) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, video.OwnerTable, video.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlaylistVideos queries the playlist_videos edge of a Video.
func (c *VideoClient) QueryPlaylistVideos(v *Video) *PlaylistVideoQuery {
	query := &PlaylistVideoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(playlist_video.Table, playlist_video.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, video.PlaylistVideosTable, video.PlaylistVideosColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VideoClient) Hooks() []Hook {
	return c.hooks.Video
}
