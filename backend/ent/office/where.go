// Code generated by entc, DO NOT EDIT.

package office

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team09/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Officename applies equality check predicate on the "officename" field. It's identical to OfficenameEQ.
func Officename(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfficename), v))
	})
}

// Roomnumber applies equality check predicate on the "roomnumber" field. It's identical to RoomnumberEQ.
func Roomnumber(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomnumber), v))
	})
}

// Doctoridcard applies equality check predicate on the "doctoridcard" field. It's identical to DoctoridcardEQ.
func Doctoridcard(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctoridcard), v))
	})
}

// Firsttime applies equality check predicate on the "firsttime" field. It's identical to FirsttimeEQ.
func Firsttime(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirsttime), v))
	})
}

// Lasttime applies equality check predicate on the "lasttime" field. It's identical to LasttimeEQ.
func Lasttime(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLasttime), v))
	})
}

// OfficenameEQ applies the EQ predicate on the "officename" field.
func OfficenameEQ(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfficename), v))
	})
}

// OfficenameNEQ applies the NEQ predicate on the "officename" field.
func OfficenameNEQ(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOfficename), v))
	})
}

// OfficenameIn applies the In predicate on the "officename" field.
func OfficenameIn(vs ...string) predicate.Office {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Office(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOfficename), v...))
	})
}

// OfficenameNotIn applies the NotIn predicate on the "officename" field.
func OfficenameNotIn(vs ...string) predicate.Office {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Office(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOfficename), v...))
	})
}

// OfficenameGT applies the GT predicate on the "officename" field.
func OfficenameGT(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOfficename), v))
	})
}

// OfficenameGTE applies the GTE predicate on the "officename" field.
func OfficenameGTE(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOfficename), v))
	})
}

// OfficenameLT applies the LT predicate on the "officename" field.
func OfficenameLT(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOfficename), v))
	})
}

// OfficenameLTE applies the LTE predicate on the "officename" field.
func OfficenameLTE(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOfficename), v))
	})
}

// OfficenameContains applies the Contains predicate on the "officename" field.
func OfficenameContains(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOfficename), v))
	})
}

// OfficenameHasPrefix applies the HasPrefix predicate on the "officename" field.
func OfficenameHasPrefix(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOfficename), v))
	})
}

// OfficenameHasSuffix applies the HasSuffix predicate on the "officename" field.
func OfficenameHasSuffix(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOfficename), v))
	})
}

// OfficenameEqualFold applies the EqualFold predicate on the "officename" field.
func OfficenameEqualFold(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOfficename), v))
	})
}

// OfficenameContainsFold applies the ContainsFold predicate on the "officename" field.
func OfficenameContainsFold(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOfficename), v))
	})
}

// RoomnumberEQ applies the EQ predicate on the "roomnumber" field.
func RoomnumberEQ(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberNEQ applies the NEQ predicate on the "roomnumber" field.
func RoomnumberNEQ(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberIn applies the In predicate on the "roomnumber" field.
func RoomnumberIn(vs ...string) predicate.Office {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Office(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomnumber), v...))
	})
}

// RoomnumberNotIn applies the NotIn predicate on the "roomnumber" field.
func RoomnumberNotIn(vs ...string) predicate.Office {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Office(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomnumber), v...))
	})
}

// RoomnumberGT applies the GT predicate on the "roomnumber" field.
func RoomnumberGT(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberGTE applies the GTE predicate on the "roomnumber" field.
func RoomnumberGTE(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberLT applies the LT predicate on the "roomnumber" field.
func RoomnumberLT(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberLTE applies the LTE predicate on the "roomnumber" field.
func RoomnumberLTE(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberContains applies the Contains predicate on the "roomnumber" field.
func RoomnumberContains(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberHasPrefix applies the HasPrefix predicate on the "roomnumber" field.
func RoomnumberHasPrefix(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberHasSuffix applies the HasSuffix predicate on the "roomnumber" field.
func RoomnumberHasSuffix(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberEqualFold applies the EqualFold predicate on the "roomnumber" field.
func RoomnumberEqualFold(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoomnumber), v))
	})
}

// RoomnumberContainsFold applies the ContainsFold predicate on the "roomnumber" field.
func RoomnumberContainsFold(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoomnumber), v))
	})
}

// DoctoridcardEQ applies the EQ predicate on the "doctoridcard" field.
func DoctoridcardEQ(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardNEQ applies the NEQ predicate on the "doctoridcard" field.
func DoctoridcardNEQ(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardIn applies the In predicate on the "doctoridcard" field.
func DoctoridcardIn(vs ...string) predicate.Office {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Office(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDoctoridcard), v...))
	})
}

// DoctoridcardNotIn applies the NotIn predicate on the "doctoridcard" field.
func DoctoridcardNotIn(vs ...string) predicate.Office {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Office(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDoctoridcard), v...))
	})
}

// DoctoridcardGT applies the GT predicate on the "doctoridcard" field.
func DoctoridcardGT(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardGTE applies the GTE predicate on the "doctoridcard" field.
func DoctoridcardGTE(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardLT applies the LT predicate on the "doctoridcard" field.
func DoctoridcardLT(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardLTE applies the LTE predicate on the "doctoridcard" field.
func DoctoridcardLTE(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardContains applies the Contains predicate on the "doctoridcard" field.
func DoctoridcardContains(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardHasPrefix applies the HasPrefix predicate on the "doctoridcard" field.
func DoctoridcardHasPrefix(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardHasSuffix applies the HasSuffix predicate on the "doctoridcard" field.
func DoctoridcardHasSuffix(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardEqualFold applies the EqualFold predicate on the "doctoridcard" field.
func DoctoridcardEqualFold(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDoctoridcard), v))
	})
}

// DoctoridcardContainsFold applies the ContainsFold predicate on the "doctoridcard" field.
func DoctoridcardContainsFold(v string) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDoctoridcard), v))
	})
}

// FirsttimeEQ applies the EQ predicate on the "firsttime" field.
func FirsttimeEQ(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirsttime), v))
	})
}

// FirsttimeNEQ applies the NEQ predicate on the "firsttime" field.
func FirsttimeNEQ(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirsttime), v))
	})
}

// FirsttimeIn applies the In predicate on the "firsttime" field.
func FirsttimeIn(vs ...time.Time) predicate.Office {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Office(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirsttime), v...))
	})
}

// FirsttimeNotIn applies the NotIn predicate on the "firsttime" field.
func FirsttimeNotIn(vs ...time.Time) predicate.Office {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Office(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirsttime), v...))
	})
}

// FirsttimeGT applies the GT predicate on the "firsttime" field.
func FirsttimeGT(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirsttime), v))
	})
}

// FirsttimeGTE applies the GTE predicate on the "firsttime" field.
func FirsttimeGTE(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirsttime), v))
	})
}

// FirsttimeLT applies the LT predicate on the "firsttime" field.
func FirsttimeLT(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirsttime), v))
	})
}

// FirsttimeLTE applies the LTE predicate on the "firsttime" field.
func FirsttimeLTE(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirsttime), v))
	})
}

// LasttimeEQ applies the EQ predicate on the "lasttime" field.
func LasttimeEQ(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLasttime), v))
	})
}

// LasttimeNEQ applies the NEQ predicate on the "lasttime" field.
func LasttimeNEQ(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLasttime), v))
	})
}

// LasttimeIn applies the In predicate on the "lasttime" field.
func LasttimeIn(vs ...time.Time) predicate.Office {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Office(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLasttime), v...))
	})
}

// LasttimeNotIn applies the NotIn predicate on the "lasttime" field.
func LasttimeNotIn(vs ...time.Time) predicate.Office {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Office(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLasttime), v...))
	})
}

// LasttimeGT applies the GT predicate on the "lasttime" field.
func LasttimeGT(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLasttime), v))
	})
}

// LasttimeGTE applies the GTE predicate on the "lasttime" field.
func LasttimeGTE(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLasttime), v))
	})
}

// LasttimeLT applies the LT predicate on the "lasttime" field.
func LasttimeLT(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLasttime), v))
	})
}

// LasttimeLTE applies the LTE predicate on the "lasttime" field.
func LasttimeLTE(v time.Time) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLasttime), v))
	})
}

// HasDoctor applies the HasEdge predicate on the "doctor" edge.
func HasDoctor() predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDoctorWith applies the HasEdge predicate on the "doctor" edge with a given conditions (other predicates).
func HasDoctorWith(preds ...predicate.Doctor) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDepartment applies the HasEdge predicate on the "department" edge.
func HasDepartment() predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DepartmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentWith applies the HasEdge predicate on the "department" edge with a given conditions (other predicates).
func HasDepartmentWith(preds ...predicate.Department) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DepartmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExtradoctor applies the HasEdge predicate on the "extradoctor" edge.
func HasExtradoctor() predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExtradoctorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExtradoctorTable, ExtradoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExtradoctorWith applies the HasEdge predicate on the "extradoctor" edge with a given conditions (other predicates).
func HasExtradoctorWith(preds ...predicate.Extradoctor) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExtradoctorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExtradoctorTable, ExtradoctorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchedules applies the HasEdge predicate on the "schedules" edge.
func HasSchedules() predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SchedulesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SchedulesTable, SchedulesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSchedulesWith applies the HasEdge predicate on the "schedules" edge with a given conditions (other predicates).
func HasSchedulesWith(preds ...predicate.Schedule) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SchedulesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SchedulesTable, SchedulesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Office) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Office) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Office) predicate.Office {
	return predicate.Office(func(s *sql.Selector) {
		p(s.Not())
	})
}
