// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/predicate"
	"github.com/team09/app/ent/schedule"
)

// ScheduleUpdate is the builder for updating Schedule entities.
type ScheduleUpdate struct {
	config
	hooks      []Hook
	mutation   *ScheduleMutation
	predicates []predicate.Schedule
}

// Where adds a new predicate for the builder.
func (su *ScheduleUpdate) Where(ps ...predicate.Schedule) *ScheduleUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetActivity sets the Activity field.
func (su *ScheduleUpdate) SetActivity(s string) *ScheduleUpdate {
	su.mutation.SetActivity(s)
	return su
}

// SetRoomnumber sets the Roomnumber field.
func (su *ScheduleUpdate) SetRoomnumber(s string) *ScheduleUpdate {
	su.mutation.SetRoomnumber(s)
	return su
}

// SetDocterid sets the Docterid field.
func (su *ScheduleUpdate) SetDocterid(s string) *ScheduleUpdate {
	su.mutation.SetDocterid(s)
	return su
}

// SetAddedTime sets the added_time field.
func (su *ScheduleUpdate) SetAddedTime(t time.Time) *ScheduleUpdate {
	su.mutation.SetAddedTime(t)
	return su
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (su *ScheduleUpdate) SetDoctorID(id int) *ScheduleUpdate {
	su.mutation.SetDoctorID(id)
	return su
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (su *ScheduleUpdate) SetNillableDoctorID(id *int) *ScheduleUpdate {
	if id != nil {
		su = su.SetDoctorID(*id)
	}
	return su
}

// SetDoctor sets the doctor edge to Doctor.
func (su *ScheduleUpdate) SetDoctor(d *Doctor) *ScheduleUpdate {
	return su.SetDoctorID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (su *ScheduleUpdate) SetDepartmentID(id int) *ScheduleUpdate {
	su.mutation.SetDepartmentID(id)
	return su
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (su *ScheduleUpdate) SetNillableDepartmentID(id *int) *ScheduleUpdate {
	if id != nil {
		su = su.SetDepartmentID(*id)
	}
	return su
}

// SetDepartment sets the department edge to Department.
func (su *ScheduleUpdate) SetDepartment(d *Department) *ScheduleUpdate {
	return su.SetDepartmentID(d.ID)
}

// SetOfficeID sets the office edge to Office by id.
func (su *ScheduleUpdate) SetOfficeID(id int) *ScheduleUpdate {
	su.mutation.SetOfficeID(id)
	return su
}

// SetNillableOfficeID sets the office edge to Office by id if the given value is not nil.
func (su *ScheduleUpdate) SetNillableOfficeID(id *int) *ScheduleUpdate {
	if id != nil {
		su = su.SetOfficeID(*id)
	}
	return su
}

// SetOffice sets the office edge to Office.
func (su *ScheduleUpdate) SetOffice(o *Office) *ScheduleUpdate {
	return su.SetOfficeID(o.ID)
}

// Mutation returns the ScheduleMutation object of the builder.
func (su *ScheduleUpdate) Mutation() *ScheduleMutation {
	return su.mutation
}

// ClearDoctor clears the doctor edge to Doctor.
func (su *ScheduleUpdate) ClearDoctor() *ScheduleUpdate {
	su.mutation.ClearDoctor()
	return su
}

// ClearDepartment clears the department edge to Department.
func (su *ScheduleUpdate) ClearDepartment() *ScheduleUpdate {
	su.mutation.ClearDepartment()
	return su
}

// ClearOffice clears the office edge to Office.
func (su *ScheduleUpdate) ClearOffice() *ScheduleUpdate {
	su.mutation.ClearOffice()
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *ScheduleUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := su.mutation.Activity(); ok {
		if err := schedule.ActivityValidator(v); err != nil {
			return 0, &ValidationError{Name: "Activity", err: fmt.Errorf("ent: validator failed for field \"Activity\": %w", err)}
		}
	}
	if v, ok := su.mutation.Roomnumber(); ok {
		if err := schedule.RoomnumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "Roomnumber", err: fmt.Errorf("ent: validator failed for field \"Roomnumber\": %w", err)}
		}
	}
	if v, ok := su.mutation.Docterid(); ok {
		if err := schedule.DocteridValidator(v); err != nil {
			return 0, &ValidationError{Name: "Docterid", err: fmt.Errorf("ent: validator failed for field \"Docterid\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScheduleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScheduleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScheduleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   schedule.Table,
			Columns: schedule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: schedule.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Activity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: schedule.FieldActivity,
		})
	}
	if value, ok := su.mutation.Roomnumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: schedule.FieldRoomnumber,
		})
	}
	if value, ok := su.mutation.Docterid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: schedule.FieldDocterid,
		})
	}
	if value, ok := su.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: schedule.FieldAddedTime,
		})
	}
	if su.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.DoctorTable,
			Columns: []string{schedule.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.DoctorTable,
			Columns: []string{schedule.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.DepartmentTable,
			Columns: []string{schedule.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.DepartmentTable,
			Columns: []string{schedule.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OfficeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.OfficeTable,
			Columns: []string{schedule.OfficeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OfficeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.OfficeTable,
			Columns: []string{schedule.OfficeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ScheduleUpdateOne is the builder for updating a single Schedule entity.
type ScheduleUpdateOne struct {
	config
	hooks    []Hook
	mutation *ScheduleMutation
}

// SetActivity sets the Activity field.
func (suo *ScheduleUpdateOne) SetActivity(s string) *ScheduleUpdateOne {
	suo.mutation.SetActivity(s)
	return suo
}

// SetRoomnumber sets the Roomnumber field.
func (suo *ScheduleUpdateOne) SetRoomnumber(s string) *ScheduleUpdateOne {
	suo.mutation.SetRoomnumber(s)
	return suo
}

// SetDocterid sets the Docterid field.
func (suo *ScheduleUpdateOne) SetDocterid(s string) *ScheduleUpdateOne {
	suo.mutation.SetDocterid(s)
	return suo
}

// SetAddedTime sets the added_time field.
func (suo *ScheduleUpdateOne) SetAddedTime(t time.Time) *ScheduleUpdateOne {
	suo.mutation.SetAddedTime(t)
	return suo
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (suo *ScheduleUpdateOne) SetDoctorID(id int) *ScheduleUpdateOne {
	suo.mutation.SetDoctorID(id)
	return suo
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableDoctorID(id *int) *ScheduleUpdateOne {
	if id != nil {
		suo = suo.SetDoctorID(*id)
	}
	return suo
}

// SetDoctor sets the doctor edge to Doctor.
func (suo *ScheduleUpdateOne) SetDoctor(d *Doctor) *ScheduleUpdateOne {
	return suo.SetDoctorID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (suo *ScheduleUpdateOne) SetDepartmentID(id int) *ScheduleUpdateOne {
	suo.mutation.SetDepartmentID(id)
	return suo
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableDepartmentID(id *int) *ScheduleUpdateOne {
	if id != nil {
		suo = suo.SetDepartmentID(*id)
	}
	return suo
}

// SetDepartment sets the department edge to Department.
func (suo *ScheduleUpdateOne) SetDepartment(d *Department) *ScheduleUpdateOne {
	return suo.SetDepartmentID(d.ID)
}

// SetOfficeID sets the office edge to Office by id.
func (suo *ScheduleUpdateOne) SetOfficeID(id int) *ScheduleUpdateOne {
	suo.mutation.SetOfficeID(id)
	return suo
}

// SetNillableOfficeID sets the office edge to Office by id if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableOfficeID(id *int) *ScheduleUpdateOne {
	if id != nil {
		suo = suo.SetOfficeID(*id)
	}
	return suo
}

// SetOffice sets the office edge to Office.
func (suo *ScheduleUpdateOne) SetOffice(o *Office) *ScheduleUpdateOne {
	return suo.SetOfficeID(o.ID)
}

// Mutation returns the ScheduleMutation object of the builder.
func (suo *ScheduleUpdateOne) Mutation() *ScheduleMutation {
	return suo.mutation
}

// ClearDoctor clears the doctor edge to Doctor.
func (suo *ScheduleUpdateOne) ClearDoctor() *ScheduleUpdateOne {
	suo.mutation.ClearDoctor()
	return suo
}

// ClearDepartment clears the department edge to Department.
func (suo *ScheduleUpdateOne) ClearDepartment() *ScheduleUpdateOne {
	suo.mutation.ClearDepartment()
	return suo
}

// ClearOffice clears the office edge to Office.
func (suo *ScheduleUpdateOne) ClearOffice() *ScheduleUpdateOne {
	suo.mutation.ClearOffice()
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *ScheduleUpdateOne) Save(ctx context.Context) (*Schedule, error) {
	if v, ok := suo.mutation.Activity(); ok {
		if err := schedule.ActivityValidator(v); err != nil {
			return nil, &ValidationError{Name: "Activity", err: fmt.Errorf("ent: validator failed for field \"Activity\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Roomnumber(); ok {
		if err := schedule.RoomnumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "Roomnumber", err: fmt.Errorf("ent: validator failed for field \"Roomnumber\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Docterid(); ok {
		if err := schedule.DocteridValidator(v); err != nil {
			return nil, &ValidationError{Name: "Docterid", err: fmt.Errorf("ent: validator failed for field \"Docterid\": %w", err)}
		}
	}

	var (
		err  error
		node *Schedule
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScheduleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScheduleUpdateOne) SaveX(ctx context.Context) *Schedule {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *ScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ScheduleUpdateOne) sqlSave(ctx context.Context) (s *Schedule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   schedule.Table,
			Columns: schedule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: schedule.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Schedule.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.Activity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: schedule.FieldActivity,
		})
	}
	if value, ok := suo.mutation.Roomnumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: schedule.FieldRoomnumber,
		})
	}
	if value, ok := suo.mutation.Docterid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: schedule.FieldDocterid,
		})
	}
	if value, ok := suo.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: schedule.FieldAddedTime,
		})
	}
	if suo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.DoctorTable,
			Columns: []string{schedule.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.DoctorTable,
			Columns: []string{schedule.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.DepartmentTable,
			Columns: []string{schedule.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.DepartmentTable,
			Columns: []string{schedule.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OfficeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.OfficeTable,
			Columns: []string{schedule.OfficeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OfficeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.OfficeTable,
			Columns: []string{schedule.OfficeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Schedule{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
