// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team09/app/ent/doctor"
)

// Doctor is the model entity for the Doctor schema.
type Doctor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name int `json:"name,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Email holds the value of the "email" field.
	Email int `json:"email,omitempty"`
	// Pnumber holds the value of the "pnumber" field.
	Pnumber int `json:"pnumber,omitempty"`
	// Address holds the value of the "address" field.
	Address int `json:"address,omitempty"`
	// Educational holds the value of the "educational" field.
	Educational    int `json:"educational,omitempty"`
	office_id      *int
	workingtime_id *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Doctor) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // name
		&sql.NullInt64{}, // age
		&sql.NullInt64{}, // email
		&sql.NullInt64{}, // pnumber
		&sql.NullInt64{}, // address
		&sql.NullInt64{}, // educational
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Doctor) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // office_id
		&sql.NullInt64{}, // workingtime_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Doctor fields.
func (d *Doctor) assignValues(values ...interface{}) error {
	if m, n := len(values), len(doctor.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		d.Name = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field age", values[1])
	} else if value.Valid {
		d.Age = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[2])
	} else if value.Valid {
		d.Email = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field pnumber", values[3])
	} else if value.Valid {
		d.Pnumber = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field address", values[4])
	} else if value.Valid {
		d.Address = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field educational", values[5])
	} else if value.Valid {
		d.Educational = int(value.Int64)
	}
	values = values[6:]
	if len(values) == len(doctor.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field office_id", value)
		} else if value.Valid {
			d.office_id = new(int)
			*d.office_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field workingtime_id", value)
		} else if value.Valid {
			d.workingtime_id = new(int)
			*d.workingtime_id = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this Doctor.
// Note that, you need to call Doctor.Unwrap() before calling this method, if this Doctor
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Doctor) Update() *DoctorUpdateOne {
	return (&DoctorClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Doctor) Unwrap() *Doctor {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Doctor is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Doctor) String() string {
	var builder strings.Builder
	builder.WriteString("Doctor(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(fmt.Sprintf("%v", d.Name))
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", d.Age))
	builder.WriteString(", email=")
	builder.WriteString(fmt.Sprintf("%v", d.Email))
	builder.WriteString(", pnumber=")
	builder.WriteString(fmt.Sprintf("%v", d.Pnumber))
	builder.WriteString(", address=")
	builder.WriteString(fmt.Sprintf("%v", d.Address))
	builder.WriteString(", educational=")
	builder.WriteString(fmt.Sprintf("%v", d.Educational))
	builder.WriteByte(')')
	return builder.String()
}

// Doctors is a parsable slice of Doctor.
type Doctors []*Doctor

func (d Doctors) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
