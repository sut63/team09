// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team09/app/ent/disease"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/gender"
	"github.com/team09/app/ent/position"
	"github.com/team09/app/ent/title"
)

// Doctor is the model entity for the Doctor schema.
type Doctor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Educational holds the value of the "educational" field.
	Educational string `json:"educational,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DoctorQuery when eager-loading is set.
	Edges       DoctorEdges `json:"edges"`
	disease_id  *int
	gender_id   *int
	position_id *int
	title_id    *int
}

// DoctorEdges holds the relations/edges for other nodes in the graph.
type DoctorEdges struct {
	// Title holds the value of the title edge.
	Title *Title
	// Gender holds the value of the gender edge.
	Gender *Gender
	// Position holds the value of the position edge.
	Position *Position
	// Disease holds the value of the disease edge.
	Disease *Disease
	// Offices holds the value of the offices edge.
	Offices []*Office
	// Departments holds the value of the departments edge.
	Departments []*Department
	// Schedules holds the value of the schedules edge.
	Schedules []*Schedule
	// Trainings holds the value of the trainings edge.
	Trainings []*Training
	// Specialdoctors holds the value of the specialdoctors edge.
	Specialdoctors []*Specialdoctor
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// TitleOrErr returns the Title value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DoctorEdges) TitleOrErr() (*Title, error) {
	if e.loadedTypes[0] {
		if e.Title == nil {
			// The edge title was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: title.Label}
		}
		return e.Title, nil
	}
	return nil, &NotLoadedError{edge: "title"}
}

// GenderOrErr returns the Gender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DoctorEdges) GenderOrErr() (*Gender, error) {
	if e.loadedTypes[1] {
		if e.Gender == nil {
			// The edge gender was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: gender.Label}
		}
		return e.Gender, nil
	}
	return nil, &NotLoadedError{edge: "gender"}
}

// PositionOrErr returns the Position value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DoctorEdges) PositionOrErr() (*Position, error) {
	if e.loadedTypes[2] {
		if e.Position == nil {
			// The edge position was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: position.Label}
		}
		return e.Position, nil
	}
	return nil, &NotLoadedError{edge: "position"}
}

// DiseaseOrErr returns the Disease value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DoctorEdges) DiseaseOrErr() (*Disease, error) {
	if e.loadedTypes[3] {
		if e.Disease == nil {
			// The edge disease was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: disease.Label}
		}
		return e.Disease, nil
	}
	return nil, &NotLoadedError{edge: "disease"}
}

// OfficesOrErr returns the Offices value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) OfficesOrErr() ([]*Office, error) {
	if e.loadedTypes[4] {
		return e.Offices, nil
	}
	return nil, &NotLoadedError{edge: "offices"}
}

// DepartmentsOrErr returns the Departments value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) DepartmentsOrErr() ([]*Department, error) {
	if e.loadedTypes[5] {
		return e.Departments, nil
	}
	return nil, &NotLoadedError{edge: "departments"}
}

// SchedulesOrErr returns the Schedules value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) SchedulesOrErr() ([]*Schedule, error) {
	if e.loadedTypes[6] {
		return e.Schedules, nil
	}
	return nil, &NotLoadedError{edge: "schedules"}
}

// TrainingsOrErr returns the Trainings value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) TrainingsOrErr() ([]*Training, error) {
	if e.loadedTypes[7] {
		return e.Trainings, nil
	}
	return nil, &NotLoadedError{edge: "trainings"}
}

// SpecialdoctorsOrErr returns the Specialdoctors value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) SpecialdoctorsOrErr() ([]*Specialdoctor, error) {
	if e.loadedTypes[8] {
		return e.Specialdoctors, nil
	}
	return nil, &NotLoadedError{edge: "specialdoctors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Doctor) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullInt64{},  // age
		&sql.NullString{}, // email
		&sql.NullString{}, // password
		&sql.NullString{}, // address
		&sql.NullString{}, // educational
		&sql.NullString{}, // phone
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Doctor) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // disease_id
		&sql.NullInt64{}, // gender_id
		&sql.NullInt64{}, // position_id
		&sql.NullInt64{}, // title_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Doctor fields.
func (d *Doctor) assignValues(values ...interface{}) error {
	if m, n := len(values), len(doctor.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		d.Name = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field age", values[1])
	} else if value.Valid {
		d.Age = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[2])
	} else if value.Valid {
		d.Email = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field password", values[3])
	} else if value.Valid {
		d.Password = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field address", values[4])
	} else if value.Valid {
		d.Address = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field educational", values[5])
	} else if value.Valid {
		d.Educational = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field phone", values[6])
	} else if value.Valid {
		d.Phone = value.String
	}
	values = values[7:]
	if len(values) == len(doctor.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field disease_id", value)
		} else if value.Valid {
			d.disease_id = new(int)
			*d.disease_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field gender_id", value)
		} else if value.Valid {
			d.gender_id = new(int)
			*d.gender_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field position_id", value)
		} else if value.Valid {
			d.position_id = new(int)
			*d.position_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field title_id", value)
		} else if value.Valid {
			d.title_id = new(int)
			*d.title_id = int(value.Int64)
		}
	}
	return nil
}

// QueryTitle queries the title edge of the Doctor.
func (d *Doctor) QueryTitle() *TitleQuery {
	return (&DoctorClient{config: d.config}).QueryTitle(d)
}

// QueryGender queries the gender edge of the Doctor.
func (d *Doctor) QueryGender() *GenderQuery {
	return (&DoctorClient{config: d.config}).QueryGender(d)
}

// QueryPosition queries the position edge of the Doctor.
func (d *Doctor) QueryPosition() *PositionQuery {
	return (&DoctorClient{config: d.config}).QueryPosition(d)
}

// QueryDisease queries the disease edge of the Doctor.
func (d *Doctor) QueryDisease() *DiseaseQuery {
	return (&DoctorClient{config: d.config}).QueryDisease(d)
}

// QueryOffices queries the offices edge of the Doctor.
func (d *Doctor) QueryOffices() *OfficeQuery {
	return (&DoctorClient{config: d.config}).QueryOffices(d)
}

// QueryDepartments queries the departments edge of the Doctor.
func (d *Doctor) QueryDepartments() *DepartmentQuery {
	return (&DoctorClient{config: d.config}).QueryDepartments(d)
}

// QuerySchedules queries the schedules edge of the Doctor.
func (d *Doctor) QuerySchedules() *ScheduleQuery {
	return (&DoctorClient{config: d.config}).QuerySchedules(d)
}

// QueryTrainings queries the trainings edge of the Doctor.
func (d *Doctor) QueryTrainings() *TrainingQuery {
	return (&DoctorClient{config: d.config}).QueryTrainings(d)
}

// QuerySpecialdoctors queries the specialdoctors edge of the Doctor.
func (d *Doctor) QuerySpecialdoctors() *SpecialdoctorQuery {
	return (&DoctorClient{config: d.config}).QuerySpecialdoctors(d)
}

// Update returns a builder for updating this Doctor.
// Note that, you need to call Doctor.Unwrap() before calling this method, if this Doctor
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Doctor) Update() *DoctorUpdateOne {
	return (&DoctorClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Doctor) Unwrap() *Doctor {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Doctor is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Doctor) String() string {
	var builder strings.Builder
	builder.WriteString("Doctor(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", d.Age))
	builder.WriteString(", email=")
	builder.WriteString(d.Email)
	builder.WriteString(", password=")
	builder.WriteString(d.Password)
	builder.WriteString(", address=")
	builder.WriteString(d.Address)
	builder.WriteString(", educational=")
	builder.WriteString(d.Educational)
	builder.WriteString(", phone=")
	builder.WriteString(d.Phone)
	builder.WriteByte(')')
	return builder.String()
}

// Doctors is a parsable slice of Doctor.
type Doctors []*Doctor

func (d Doctors) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
