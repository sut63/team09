// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/mission"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/predicate"
)

// DepartmentUpdate is the builder for updating Department entities.
type DepartmentUpdate struct {
	config
	hooks      []Hook
	mutation   *DepartmentMutation
	predicates []predicate.Department
}

// Where adds a new predicate for the builder.
func (du *DepartmentUpdate) Where(ps ...predicate.Department) *DepartmentUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetDepartmentType sets the DepartmentType field.
func (du *DepartmentUpdate) SetDepartmentType(s string) *DepartmentUpdate {
	du.mutation.SetDepartmentType(s)
	return du
}

// SetName sets the Name field.
func (du *DepartmentUpdate) SetName(s string) *DepartmentUpdate {
	du.mutation.SetName(s)
	return du
}

// SetMissionID sets the mission edge to Mission by id.
func (du *DepartmentUpdate) SetMissionID(id int) *DepartmentUpdate {
	du.mutation.SetMissionID(id)
	return du
}

// SetNillableMissionID sets the mission edge to Mission by id if the given value is not nil.
func (du *DepartmentUpdate) SetNillableMissionID(id *int) *DepartmentUpdate {
	if id != nil {
		du = du.SetMissionID(*id)
	}
	return du
}

// SetMission sets the mission edge to Mission.
func (du *DepartmentUpdate) SetMission(m *Mission) *DepartmentUpdate {
	return du.SetMissionID(m.ID)
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (du *DepartmentUpdate) SetDoctorID(id int) *DepartmentUpdate {
	du.mutation.SetDoctorID(id)
	return du
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (du *DepartmentUpdate) SetNillableDoctorID(id *int) *DepartmentUpdate {
	if id != nil {
		du = du.SetDoctorID(*id)
	}
	return du
}

// SetDoctor sets the doctor edge to Doctor.
func (du *DepartmentUpdate) SetDoctor(d *Doctor) *DepartmentUpdate {
	return du.SetDoctorID(d.ID)
}

// AddOfficeIDs adds the offices edge to Office by ids.
func (du *DepartmentUpdate) AddOfficeIDs(ids ...int) *DepartmentUpdate {
	du.mutation.AddOfficeIDs(ids...)
	return du
}

// AddOffices adds the offices edges to Office.
func (du *DepartmentUpdate) AddOffices(o ...*Office) *DepartmentUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return du.AddOfficeIDs(ids...)
}

// Mutation returns the DepartmentMutation object of the builder.
func (du *DepartmentUpdate) Mutation() *DepartmentMutation {
	return du.mutation
}

// ClearMission clears the mission edge to Mission.
func (du *DepartmentUpdate) ClearMission() *DepartmentUpdate {
	du.mutation.ClearMission()
	return du
}

// ClearDoctor clears the doctor edge to Doctor.
func (du *DepartmentUpdate) ClearDoctor() *DepartmentUpdate {
	du.mutation.ClearDoctor()
	return du
}

// RemoveOfficeIDs removes the offices edge to Office by ids.
func (du *DepartmentUpdate) RemoveOfficeIDs(ids ...int) *DepartmentUpdate {
	du.mutation.RemoveOfficeIDs(ids...)
	return du
}

// RemoveOffices removes offices edges to Office.
func (du *DepartmentUpdate) RemoveOffices(o ...*Office) *DepartmentUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return du.RemoveOfficeIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DepartmentUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := du.mutation.DepartmentType(); ok {
		if err := department.DepartmentTypeValidator(v); err != nil {
			return 0, &ValidationError{Name: "DepartmentType", err: fmt.Errorf("ent: validator failed for field \"DepartmentType\": %w", err)}
		}
	}
	if v, ok := du.mutation.Name(); ok {
		if err := department.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DepartmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DepartmentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DepartmentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DepartmentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DepartmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   department.Table,
			Columns: department.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: department.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.DepartmentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: department.FieldDepartmentType,
		})
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: department.FieldName,
		})
	}
	if du.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.MissionTable,
			Columns: []string{department.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.MissionTable,
			Columns: []string{department.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.DoctorTable,
			Columns: []string{department.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.DoctorTable,
			Columns: []string{department.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := du.mutation.RemovedOfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.OfficesTable,
			Columns: []string{department.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.OfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.OfficesTable,
			Columns: []string{department.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DepartmentUpdateOne is the builder for updating a single Department entity.
type DepartmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *DepartmentMutation
}

// SetDepartmentType sets the DepartmentType field.
func (duo *DepartmentUpdateOne) SetDepartmentType(s string) *DepartmentUpdateOne {
	duo.mutation.SetDepartmentType(s)
	return duo
}

// SetName sets the Name field.
func (duo *DepartmentUpdateOne) SetName(s string) *DepartmentUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetMissionID sets the mission edge to Mission by id.
func (duo *DepartmentUpdateOne) SetMissionID(id int) *DepartmentUpdateOne {
	duo.mutation.SetMissionID(id)
	return duo
}

// SetNillableMissionID sets the mission edge to Mission by id if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableMissionID(id *int) *DepartmentUpdateOne {
	if id != nil {
		duo = duo.SetMissionID(*id)
	}
	return duo
}

// SetMission sets the mission edge to Mission.
func (duo *DepartmentUpdateOne) SetMission(m *Mission) *DepartmentUpdateOne {
	return duo.SetMissionID(m.ID)
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (duo *DepartmentUpdateOne) SetDoctorID(id int) *DepartmentUpdateOne {
	duo.mutation.SetDoctorID(id)
	return duo
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableDoctorID(id *int) *DepartmentUpdateOne {
	if id != nil {
		duo = duo.SetDoctorID(*id)
	}
	return duo
}

// SetDoctor sets the doctor edge to Doctor.
func (duo *DepartmentUpdateOne) SetDoctor(d *Doctor) *DepartmentUpdateOne {
	return duo.SetDoctorID(d.ID)
}

// AddOfficeIDs adds the offices edge to Office by ids.
func (duo *DepartmentUpdateOne) AddOfficeIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.AddOfficeIDs(ids...)
	return duo
}

// AddOffices adds the offices edges to Office.
func (duo *DepartmentUpdateOne) AddOffices(o ...*Office) *DepartmentUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return duo.AddOfficeIDs(ids...)
}

// Mutation returns the DepartmentMutation object of the builder.
func (duo *DepartmentUpdateOne) Mutation() *DepartmentMutation {
	return duo.mutation
}

// ClearMission clears the mission edge to Mission.
func (duo *DepartmentUpdateOne) ClearMission() *DepartmentUpdateOne {
	duo.mutation.ClearMission()
	return duo
}

// ClearDoctor clears the doctor edge to Doctor.
func (duo *DepartmentUpdateOne) ClearDoctor() *DepartmentUpdateOne {
	duo.mutation.ClearDoctor()
	return duo
}

// RemoveOfficeIDs removes the offices edge to Office by ids.
func (duo *DepartmentUpdateOne) RemoveOfficeIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.RemoveOfficeIDs(ids...)
	return duo
}

// RemoveOffices removes offices edges to Office.
func (duo *DepartmentUpdateOne) RemoveOffices(o ...*Office) *DepartmentUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return duo.RemoveOfficeIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (duo *DepartmentUpdateOne) Save(ctx context.Context) (*Department, error) {
	if v, ok := duo.mutation.DepartmentType(); ok {
		if err := department.DepartmentTypeValidator(v); err != nil {
			return nil, &ValidationError{Name: "DepartmentType", err: fmt.Errorf("ent: validator failed for field \"DepartmentType\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Name(); ok {
		if err := department.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}

	var (
		err  error
		node *Department
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DepartmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DepartmentUpdateOne) SaveX(ctx context.Context) *Department {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DepartmentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DepartmentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DepartmentUpdateOne) sqlSave(ctx context.Context) (d *Department, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   department.Table,
			Columns: department.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: department.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Department.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.DepartmentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: department.FieldDepartmentType,
		})
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: department.FieldName,
		})
	}
	if duo.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.MissionTable,
			Columns: []string{department.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.MissionTable,
			Columns: []string{department.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.DoctorTable,
			Columns: []string{department.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.DoctorTable,
			Columns: []string{department.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := duo.mutation.RemovedOfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.OfficesTable,
			Columns: []string{department.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.OfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.OfficesTable,
			Columns: []string{department.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Department{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
