// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/extradoctor"
	"github.com/team09/app/ent/office"
)

// Office is the model entity for the Office schema.
type Office struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Officename holds the value of the "officename" field.
	Officename string `json:"officename,omitempty"`
	// Roomnumber holds the value of the "roomnumber" field.
	Roomnumber string `json:"roomnumber,omitempty"`
	// Doctoridcard holds the value of the "doctoridcard" field.
	Doctoridcard string `json:"doctoridcard,omitempty"`
	// AddedTime1 holds the value of the "added_time1" field.
	AddedTime1 time.Time `json:"added_time1,omitempty"`
	// AddedTime2 holds the value of the "added_time2" field.
	AddedTime2 time.Time `json:"added_time2,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OfficeQuery when eager-loading is set.
	Edges            OfficeEdges `json:"edges"`
	department_id    *int
	doctor_id        *int
	extradoctor_id   *int
	Specialdoctor_id *int
}

// OfficeEdges holds the relations/edges for other nodes in the graph.
type OfficeEdges struct {
	// Doctor holds the value of the doctor edge.
	Doctor *Doctor
	// Department holds the value of the department edge.
	Department *Department
	// Extradoctor holds the value of the extradoctor edge.
	Extradoctor *Extradoctor
	// Schedules holds the value of the schedules edge.
	Schedules []*Schedule
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DoctorOrErr returns the Doctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OfficeEdges) DoctorOrErr() (*Doctor, error) {
	if e.loadedTypes[0] {
		if e.Doctor == nil {
			// The edge doctor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: doctor.Label}
		}
		return e.Doctor, nil
	}
	return nil, &NotLoadedError{edge: "doctor"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OfficeEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[1] {
		if e.Department == nil {
			// The edge department was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// ExtradoctorOrErr returns the Extradoctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OfficeEdges) ExtradoctorOrErr() (*Extradoctor, error) {
	if e.loadedTypes[2] {
		if e.Extradoctor == nil {
			// The edge extradoctor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: extradoctor.Label}
		}
		return e.Extradoctor, nil
	}
	return nil, &NotLoadedError{edge: "extradoctor"}
}

// SchedulesOrErr returns the Schedules value or an error if the edge
// was not loaded in eager-loading.
func (e OfficeEdges) SchedulesOrErr() ([]*Schedule, error) {
	if e.loadedTypes[3] {
		return e.Schedules, nil
	}
	return nil, &NotLoadedError{edge: "schedules"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Office) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // officename
		&sql.NullString{}, // roomnumber
		&sql.NullString{}, // doctoridcard
		&sql.NullTime{},   // added_time1
		&sql.NullTime{},   // added_time2
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Office) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // department_id
		&sql.NullInt64{}, // doctor_id
		&sql.NullInt64{}, // extradoctor_id
		&sql.NullInt64{}, // Specialdoctor_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Office fields.
func (o *Office) assignValues(values ...interface{}) error {
	if m, n := len(values), len(office.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field officename", values[0])
	} else if value.Valid {
		o.Officename = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field roomnumber", values[1])
	} else if value.Valid {
		o.Roomnumber = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field doctoridcard", values[2])
	} else if value.Valid {
		o.Doctoridcard = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field added_time1", values[3])
	} else if value.Valid {
		o.AddedTime1 = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field added_time2", values[4])
	} else if value.Valid {
		o.AddedTime2 = value.Time
	}
	values = values[5:]
	if len(values) == len(office.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field department_id", value)
		} else if value.Valid {
			o.department_id = new(int)
			*o.department_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field doctor_id", value)
		} else if value.Valid {
			o.doctor_id = new(int)
			*o.doctor_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field extradoctor_id", value)
		} else if value.Valid {
			o.extradoctor_id = new(int)
			*o.extradoctor_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Specialdoctor_id", value)
		} else if value.Valid {
			o.Specialdoctor_id = new(int)
			*o.Specialdoctor_id = int(value.Int64)
		}
	}
	return nil
}

// QueryDoctor queries the doctor edge of the Office.
func (o *Office) QueryDoctor() *DoctorQuery {
	return (&OfficeClient{config: o.config}).QueryDoctor(o)
}

// QueryDepartment queries the department edge of the Office.
func (o *Office) QueryDepartment() *DepartmentQuery {
	return (&OfficeClient{config: o.config}).QueryDepartment(o)
}

// QueryExtradoctor queries the extradoctor edge of the Office.
func (o *Office) QueryExtradoctor() *ExtradoctorQuery {
	return (&OfficeClient{config: o.config}).QueryExtradoctor(o)
}

// QuerySchedules queries the schedules edge of the Office.
func (o *Office) QuerySchedules() *ScheduleQuery {
	return (&OfficeClient{config: o.config}).QuerySchedules(o)
}

// Update returns a builder for updating this Office.
// Note that, you need to call Office.Unwrap() before calling this method, if this Office
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Office) Update() *OfficeUpdateOne {
	return (&OfficeClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Office) Unwrap() *Office {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Office is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Office) String() string {
	var builder strings.Builder
	builder.WriteString("Office(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", officename=")
	builder.WriteString(o.Officename)
	builder.WriteString(", roomnumber=")
	builder.WriteString(o.Roomnumber)
	builder.WriteString(", doctoridcard=")
	builder.WriteString(o.Doctoridcard)
	builder.WriteString(", added_time1=")
	builder.WriteString(o.AddedTime1.Format(time.ANSIC))
	builder.WriteString(", added_time2=")
	builder.WriteString(o.AddedTime2.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Offices is a parsable slice of Office.
type Offices []*Office

func (o Offices) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
