// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team09/app/ent/office"
)

// Office is the model entity for the Office schema.
type Office struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Officename holds the value of the "officename" field.
	Officename string `json:"officename,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OfficeQuery when eager-loading is set.
	Edges OfficeEdges `json:"edges"`
}

// OfficeEdges holds the relations/edges for other nodes in the graph.
type OfficeEdges struct {
	// Doctors holds the value of the doctors edge.
	Doctors []*Doctor
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DoctorsOrErr returns the Doctors value or an error if the edge
// was not loaded in eager-loading.
func (e OfficeEdges) DoctorsOrErr() ([]*Doctor, error) {
	if e.loadedTypes[0] {
		return e.Doctors, nil
	}
	return nil, &NotLoadedError{edge: "doctors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Office) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // officename
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Office fields.
func (o *Office) assignValues(values ...interface{}) error {
	if m, n := len(values), len(office.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field officename", values[0])
	} else if value.Valid {
		o.Officename = value.String
	}
	return nil
}

// QueryDoctors queries the doctors edge of the Office.
func (o *Office) QueryDoctors() *DoctorQuery {
	return (&OfficeClient{config: o.config}).QueryDoctors(o)
}

// Update returns a builder for updating this Office.
// Note that, you need to call Office.Unwrap() before calling this method, if this Office
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Office) Update() *OfficeUpdateOne {
	return (&OfficeClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Office) Unwrap() *Office {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Office is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Office) String() string {
	var builder strings.Builder
	builder.WriteString("Office(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", officename=")
	builder.WriteString(o.Officename)
	builder.WriteByte(')')
	return builder.String()
}

// Offices is a parsable slice of Office.
type Offices []*Office

func (o Offices) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
