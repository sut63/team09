// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team09/app/ent/department"
	"github.com/team09/app/ent/disease"
	"github.com/team09/app/ent/doctor"
	"github.com/team09/app/ent/gender"
	"github.com/team09/app/ent/office"
	"github.com/team09/app/ent/position"
	"github.com/team09/app/ent/predicate"
	"github.com/team09/app/ent/schedule"
	"github.com/team09/app/ent/title"
)

// DoctorUpdate is the builder for updating Doctor entities.
type DoctorUpdate struct {
	config
	hooks      []Hook
	mutation   *DoctorMutation
	predicates []predicate.Doctor
}

// Where adds a new predicate for the builder.
func (du *DoctorUpdate) Where(ps ...predicate.Doctor) *DoctorUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetName sets the name field.
func (du *DoctorUpdate) SetName(s string) *DoctorUpdate {
	du.mutation.SetName(s)
	return du
}

// SetAge sets the age field.
func (du *DoctorUpdate) SetAge(i int) *DoctorUpdate {
	du.mutation.ResetAge()
	du.mutation.SetAge(i)
	return du
}

// AddAge adds i to age.
func (du *DoctorUpdate) AddAge(i int) *DoctorUpdate {
	du.mutation.AddAge(i)
	return du
}

// SetEmail sets the email field.
func (du *DoctorUpdate) SetEmail(s string) *DoctorUpdate {
	du.mutation.SetEmail(s)
	return du
}

// SetPnumber sets the pnumber field.
func (du *DoctorUpdate) SetPnumber(i int) *DoctorUpdate {
	du.mutation.ResetPnumber()
	du.mutation.SetPnumber(i)
	return du
}

// AddPnumber adds i to pnumber.
func (du *DoctorUpdate) AddPnumber(i int) *DoctorUpdate {
	du.mutation.AddPnumber(i)
	return du
}

// SetAddress sets the address field.
func (du *DoctorUpdate) SetAddress(s string) *DoctorUpdate {
	du.mutation.SetAddress(s)
	return du
}

// SetEducational sets the educational field.
func (du *DoctorUpdate) SetEducational(s string) *DoctorUpdate {
	du.mutation.SetEducational(s)
	return du
}

// SetTitleID sets the title edge to Title by id.
func (du *DoctorUpdate) SetTitleID(id int) *DoctorUpdate {
	du.mutation.SetTitleID(id)
	return du
}

// SetNillableTitleID sets the title edge to Title by id if the given value is not nil.
func (du *DoctorUpdate) SetNillableTitleID(id *int) *DoctorUpdate {
	if id != nil {
		du = du.SetTitleID(*id)
	}
	return du
}

// SetTitle sets the title edge to Title.
func (du *DoctorUpdate) SetTitle(t *Title) *DoctorUpdate {
	return du.SetTitleID(t.ID)
}

// SetGenderID sets the gender edge to Gender by id.
func (du *DoctorUpdate) SetGenderID(id int) *DoctorUpdate {
	du.mutation.SetGenderID(id)
	return du
}

// SetNillableGenderID sets the gender edge to Gender by id if the given value is not nil.
func (du *DoctorUpdate) SetNillableGenderID(id *int) *DoctorUpdate {
	if id != nil {
		du = du.SetGenderID(*id)
	}
	return du
}

// SetGender sets the gender edge to Gender.
func (du *DoctorUpdate) SetGender(g *Gender) *DoctorUpdate {
	return du.SetGenderID(g.ID)
}

// SetPositionID sets the position edge to Position by id.
func (du *DoctorUpdate) SetPositionID(id int) *DoctorUpdate {
	du.mutation.SetPositionID(id)
	return du
}

// SetNillablePositionID sets the position edge to Position by id if the given value is not nil.
func (du *DoctorUpdate) SetNillablePositionID(id *int) *DoctorUpdate {
	if id != nil {
		du = du.SetPositionID(*id)
	}
	return du
}

// SetPosition sets the position edge to Position.
func (du *DoctorUpdate) SetPosition(p *Position) *DoctorUpdate {
	return du.SetPositionID(p.ID)
}

// SetDiseaseID sets the disease edge to Disease by id.
func (du *DoctorUpdate) SetDiseaseID(id int) *DoctorUpdate {
	du.mutation.SetDiseaseID(id)
	return du
}

// SetNillableDiseaseID sets the disease edge to Disease by id if the given value is not nil.
func (du *DoctorUpdate) SetNillableDiseaseID(id *int) *DoctorUpdate {
	if id != nil {
		du = du.SetDiseaseID(*id)
	}
	return du
}

// SetDisease sets the disease edge to Disease.
func (du *DoctorUpdate) SetDisease(d *Disease) *DoctorUpdate {
	return du.SetDiseaseID(d.ID)
}

// AddDepartmentIDs adds the departments edge to Department by ids.
func (du *DoctorUpdate) AddDepartmentIDs(ids ...int) *DoctorUpdate {
	du.mutation.AddDepartmentIDs(ids...)
	return du
}

// AddDepartments adds the departments edges to Department.
func (du *DoctorUpdate) AddDepartments(d ...*Department) *DoctorUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddDepartmentIDs(ids...)
}

// AddOfficeIDs adds the offices edge to Office by ids.
func (du *DoctorUpdate) AddOfficeIDs(ids ...int) *DoctorUpdate {
	du.mutation.AddOfficeIDs(ids...)
	return du
}

// AddOffices adds the offices edges to Office.
func (du *DoctorUpdate) AddOffices(o ...*Office) *DoctorUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return du.AddOfficeIDs(ids...)
}

// AddDepartmentIDs adds the departments edge to Department by ids.
func (du *DoctorUpdate) AddDepartmentIDs(ids ...int) *DoctorUpdate {
	du.mutation.AddDepartmentIDs(ids...)
	return du
}

// AddDepartments adds the departments edges to Department.
func (du *DoctorUpdate) AddDepartments(d ...*Department) *DoctorUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddDepartmentIDs(ids...)
}

// AddScheduleIDs adds the schedules edge to Schedule by ids.
func (du *DoctorUpdate) AddScheduleIDs(ids ...int) *DoctorUpdate {
	du.mutation.AddScheduleIDs(ids...)
	return du
}

// AddSchedules adds the schedules edges to Schedule.
func (du *DoctorUpdate) AddSchedules(s ...*Schedule) *DoctorUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.AddScheduleIDs(ids...)
}

// Mutation returns the DoctorMutation object of the builder.
func (du *DoctorUpdate) Mutation() *DoctorMutation {
	return du.mutation
}

// ClearTitle clears the title edge to Title.
func (du *DoctorUpdate) ClearTitle() *DoctorUpdate {
	du.mutation.ClearTitle()
	return du
}

// ClearGender clears the gender edge to Gender.
func (du *DoctorUpdate) ClearGender() *DoctorUpdate {
	du.mutation.ClearGender()
	return du
}

// ClearPosition clears the position edge to Position.
func (du *DoctorUpdate) ClearPosition() *DoctorUpdate {
	du.mutation.ClearPosition()
	return du
}

// ClearDisease clears the disease edge to Disease.
func (du *DoctorUpdate) ClearDisease() *DoctorUpdate {
	du.mutation.ClearDisease()
	return du
}

// RemoveDepartmentIDs removes the departments edge to Department by ids.
func (du *DoctorUpdate) RemoveDepartmentIDs(ids ...int) *DoctorUpdate {
	du.mutation.RemoveDepartmentIDs(ids...)
	return du
}

// RemoveDepartments removes departments edges to Department.
func (du *DoctorUpdate) RemoveDepartments(d ...*Department) *DoctorUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveDepartmentIDs(ids...)
}

// RemoveOfficeIDs removes the offices edge to Office by ids.
func (du *DoctorUpdate) RemoveOfficeIDs(ids ...int) *DoctorUpdate {
	du.mutation.RemoveOfficeIDs(ids...)
	return du
}

// RemoveOffices removes offices edges to Office.
func (du *DoctorUpdate) RemoveOffices(o ...*Office) *DoctorUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return du.RemoveOfficeIDs(ids...)
}

// RemoveDepartmentIDs removes the departments edge to Department by ids.
func (du *DoctorUpdate) RemoveDepartmentIDs(ids ...int) *DoctorUpdate {
	du.mutation.RemoveDepartmentIDs(ids...)
	return du
}

// RemoveDepartments removes departments edges to Department.
func (du *DoctorUpdate) RemoveDepartments(d ...*Department) *DoctorUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveDepartmentIDs(ids...)
}

// RemoveScheduleIDs removes the schedules edge to Schedule by ids.
func (du *DoctorUpdate) RemoveScheduleIDs(ids ...int) *DoctorUpdate {
	du.mutation.RemoveScheduleIDs(ids...)
	return du
}

// RemoveSchedules removes schedules edges to Schedule.
func (du *DoctorUpdate) RemoveSchedules(s ...*Schedule) *DoctorUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.RemoveScheduleIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DoctorUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := du.mutation.Name(); ok {
		if err := doctor.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := du.mutation.Age(); ok {
		if err := doctor.AgeValidator(v); err != nil {
			return 0, &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if v, ok := du.mutation.Email(); ok {
		if err := doctor.EmailValidator(v); err != nil {
			return 0, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := du.mutation.Pnumber(); ok {
		if err := doctor.PnumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "pnumber", err: fmt.Errorf("ent: validator failed for field \"pnumber\": %w", err)}
		}
	}
	if v, ok := du.mutation.Address(); ok {
		if err := doctor.AddressValidator(v); err != nil {
			return 0, &ValidationError{Name: "address", err: fmt.Errorf("ent: validator failed for field \"address\": %w", err)}
		}
	}
	if v, ok := du.mutation.Educational(); ok {
		if err := doctor.EducationalValidator(v); err != nil {
			return 0, &ValidationError{Name: "educational", err: fmt.Errorf("ent: validator failed for field \"educational\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DoctorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DoctorUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DoctorUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DoctorUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DoctorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   doctor.Table,
			Columns: doctor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: doctor.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldName,
		})
	}
	if value, ok := du.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: doctor.FieldAge,
		})
	}
	if value, ok := du.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: doctor.FieldAge,
		})
	}
	if value, ok := du.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldEmail,
		})
	}
	if value, ok := du.mutation.Pnumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: doctor.FieldPnumber,
		})
	}
	if value, ok := du.mutation.AddedPnumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: doctor.FieldPnumber,
		})
	}
	if value, ok := du.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldAddress,
		})
	}
	if value, ok := du.mutation.Educational(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldEducational,
		})
	}
	if du.mutation.TitleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.TitleTable,
			Columns: []string{doctor.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: title.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.TitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.TitleTable,
			Columns: []string{doctor.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: title.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.GenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.GenderTable,
			Columns: []string{doctor.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.GenderTable,
			Columns: []string{doctor.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.PositionTable,
			Columns: []string{doctor.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.PositionTable,
			Columns: []string{doctor.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.DiseaseTable,
			Columns: []string{doctor.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.DiseaseTable,
			Columns: []string{doctor.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := du.mutation.RemovedDepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.DepartmentsTable,
			Columns: []string{doctor.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.DepartmentsTable,
			Columns: []string{doctor.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := du.mutation.RemovedOfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.OfficesTable,
			Columns: []string{doctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.OfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.OfficesTable,
			Columns: []string{doctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := du.mutation.RemovedDepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.DepartmentsTable,
			Columns: []string{doctor.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.DepartmentsTable,
			Columns: []string{doctor.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := du.mutation.RemovedSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.SchedulesTable,
			Columns: []string{doctor.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.SchedulesTable,
			Columns: []string{doctor.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DoctorUpdateOne is the builder for updating a single Doctor entity.
type DoctorUpdateOne struct {
	config
	hooks    []Hook
	mutation *DoctorMutation
}

// SetName sets the name field.
func (duo *DoctorUpdateOne) SetName(s string) *DoctorUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetAge sets the age field.
func (duo *DoctorUpdateOne) SetAge(i int) *DoctorUpdateOne {
	duo.mutation.ResetAge()
	duo.mutation.SetAge(i)
	return duo
}

// AddAge adds i to age.
func (duo *DoctorUpdateOne) AddAge(i int) *DoctorUpdateOne {
	duo.mutation.AddAge(i)
	return duo
}

// SetEmail sets the email field.
func (duo *DoctorUpdateOne) SetEmail(s string) *DoctorUpdateOne {
	duo.mutation.SetEmail(s)
	return duo
}

// SetPnumber sets the pnumber field.
func (duo *DoctorUpdateOne) SetPnumber(i int) *DoctorUpdateOne {
	duo.mutation.ResetPnumber()
	duo.mutation.SetPnumber(i)
	return duo
}

// AddPnumber adds i to pnumber.
func (duo *DoctorUpdateOne) AddPnumber(i int) *DoctorUpdateOne {
	duo.mutation.AddPnumber(i)
	return duo
}

// SetAddress sets the address field.
func (duo *DoctorUpdateOne) SetAddress(s string) *DoctorUpdateOne {
	duo.mutation.SetAddress(s)
	return duo
}

// SetEducational sets the educational field.
func (duo *DoctorUpdateOne) SetEducational(s string) *DoctorUpdateOne {
	duo.mutation.SetEducational(s)
	return duo
}

// SetTitleID sets the title edge to Title by id.
func (duo *DoctorUpdateOne) SetTitleID(id int) *DoctorUpdateOne {
	duo.mutation.SetTitleID(id)
	return duo
}

// SetNillableTitleID sets the title edge to Title by id if the given value is not nil.
func (duo *DoctorUpdateOne) SetNillableTitleID(id *int) *DoctorUpdateOne {
	if id != nil {
		duo = duo.SetTitleID(*id)
	}
	return duo
}

// SetTitle sets the title edge to Title.
func (duo *DoctorUpdateOne) SetTitle(t *Title) *DoctorUpdateOne {
	return duo.SetTitleID(t.ID)
}

// SetGenderID sets the gender edge to Gender by id.
func (duo *DoctorUpdateOne) SetGenderID(id int) *DoctorUpdateOne {
	duo.mutation.SetGenderID(id)
	return duo
}

// SetNillableGenderID sets the gender edge to Gender by id if the given value is not nil.
func (duo *DoctorUpdateOne) SetNillableGenderID(id *int) *DoctorUpdateOne {
	if id != nil {
		duo = duo.SetGenderID(*id)
	}
	return duo
}

// SetGender sets the gender edge to Gender.
func (duo *DoctorUpdateOne) SetGender(g *Gender) *DoctorUpdateOne {
	return duo.SetGenderID(g.ID)
}

// SetPositionID sets the position edge to Position by id.
func (duo *DoctorUpdateOne) SetPositionID(id int) *DoctorUpdateOne {
	duo.mutation.SetPositionID(id)
	return duo
}

// SetNillablePositionID sets the position edge to Position by id if the given value is not nil.
func (duo *DoctorUpdateOne) SetNillablePositionID(id *int) *DoctorUpdateOne {
	if id != nil {
		duo = duo.SetPositionID(*id)
	}
	return duo
}

// SetPosition sets the position edge to Position.
func (duo *DoctorUpdateOne) SetPosition(p *Position) *DoctorUpdateOne {
	return duo.SetPositionID(p.ID)
}

// SetDiseaseID sets the disease edge to Disease by id.
func (duo *DoctorUpdateOne) SetDiseaseID(id int) *DoctorUpdateOne {
	duo.mutation.SetDiseaseID(id)
	return duo
}

// SetNillableDiseaseID sets the disease edge to Disease by id if the given value is not nil.
func (duo *DoctorUpdateOne) SetNillableDiseaseID(id *int) *DoctorUpdateOne {
	if id != nil {
		duo = duo.SetDiseaseID(*id)
	}
	return duo
}

// SetDisease sets the disease edge to Disease.
func (duo *DoctorUpdateOne) SetDisease(d *Disease) *DoctorUpdateOne {
	return duo.SetDiseaseID(d.ID)
}

// AddDepartmentIDs adds the departments edge to Department by ids.
func (duo *DoctorUpdateOne) AddDepartmentIDs(ids ...int) *DoctorUpdateOne {
	duo.mutation.AddDepartmentIDs(ids...)
	return duo
}

// AddDepartments adds the departments edges to Department.
func (duo *DoctorUpdateOne) AddDepartments(d ...*Department) *DoctorUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddDepartmentIDs(ids...)
}

// AddOfficeIDs adds the offices edge to Office by ids.
func (duo *DoctorUpdateOne) AddOfficeIDs(ids ...int) *DoctorUpdateOne {
	duo.mutation.AddOfficeIDs(ids...)
	return duo
}

// AddOffices adds the offices edges to Office.
func (duo *DoctorUpdateOne) AddOffices(o ...*Office) *DoctorUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return duo.AddOfficeIDs(ids...)
}

// AddDepartmentIDs adds the departments edge to Department by ids.
func (duo *DoctorUpdateOne) AddDepartmentIDs(ids ...int) *DoctorUpdateOne {
	duo.mutation.AddDepartmentIDs(ids...)
	return duo
}

// AddDepartments adds the departments edges to Department.
func (duo *DoctorUpdateOne) AddDepartments(d ...*Department) *DoctorUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddDepartmentIDs(ids...)
}

// AddScheduleIDs adds the schedules edge to Schedule by ids.
func (duo *DoctorUpdateOne) AddScheduleIDs(ids ...int) *DoctorUpdateOne {
	duo.mutation.AddScheduleIDs(ids...)
	return duo
}

// AddSchedules adds the schedules edges to Schedule.
func (duo *DoctorUpdateOne) AddSchedules(s ...*Schedule) *DoctorUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.AddScheduleIDs(ids...)
}

// Mutation returns the DoctorMutation object of the builder.
func (duo *DoctorUpdateOne) Mutation() *DoctorMutation {
	return duo.mutation
}

// ClearTitle clears the title edge to Title.
func (duo *DoctorUpdateOne) ClearTitle() *DoctorUpdateOne {
	duo.mutation.ClearTitle()
	return duo
}

// ClearGender clears the gender edge to Gender.
func (duo *DoctorUpdateOne) ClearGender() *DoctorUpdateOne {
	duo.mutation.ClearGender()
	return duo
}

// ClearPosition clears the position edge to Position.
func (duo *DoctorUpdateOne) ClearPosition() *DoctorUpdateOne {
	duo.mutation.ClearPosition()
	return duo
}

// ClearDisease clears the disease edge to Disease.
func (duo *DoctorUpdateOne) ClearDisease() *DoctorUpdateOne {
	duo.mutation.ClearDisease()
	return duo
}

// RemoveDepartmentIDs removes the departments edge to Department by ids.
func (duo *DoctorUpdateOne) RemoveDepartmentIDs(ids ...int) *DoctorUpdateOne {
	duo.mutation.RemoveDepartmentIDs(ids...)
	return duo
}

// RemoveDepartments removes departments edges to Department.
func (duo *DoctorUpdateOne) RemoveDepartments(d ...*Department) *DoctorUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveDepartmentIDs(ids...)
}

// RemoveOfficeIDs removes the offices edge to Office by ids.
func (duo *DoctorUpdateOne) RemoveOfficeIDs(ids ...int) *DoctorUpdateOne {
	duo.mutation.RemoveOfficeIDs(ids...)
	return duo
}

// RemoveOffices removes offices edges to Office.
func (duo *DoctorUpdateOne) RemoveOffices(o ...*Office) *DoctorUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return duo.RemoveOfficeIDs(ids...)
}

// RemoveDepartmentIDs removes the departments edge to Department by ids.
func (duo *DoctorUpdateOne) RemoveDepartmentIDs(ids ...int) *DoctorUpdateOne {
	duo.mutation.RemoveDepartmentIDs(ids...)
	return duo
}

// RemoveDepartments removes departments edges to Department.
func (duo *DoctorUpdateOne) RemoveDepartments(d ...*Department) *DoctorUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveDepartmentIDs(ids...)
}

// RemoveScheduleIDs removes the schedules edge to Schedule by ids.
func (duo *DoctorUpdateOne) RemoveScheduleIDs(ids ...int) *DoctorUpdateOne {
	duo.mutation.RemoveScheduleIDs(ids...)
	return duo
}

// RemoveSchedules removes schedules edges to Schedule.
func (duo *DoctorUpdateOne) RemoveSchedules(s ...*Schedule) *DoctorUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.RemoveScheduleIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (duo *DoctorUpdateOne) Save(ctx context.Context) (*Doctor, error) {
	if v, ok := duo.mutation.Name(); ok {
		if err := doctor.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Age(); ok {
		if err := doctor.AgeValidator(v); err != nil {
			return nil, &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Email(); ok {
		if err := doctor.EmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Pnumber(); ok {
		if err := doctor.PnumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "pnumber", err: fmt.Errorf("ent: validator failed for field \"pnumber\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Address(); ok {
		if err := doctor.AddressValidator(v); err != nil {
			return nil, &ValidationError{Name: "address", err: fmt.Errorf("ent: validator failed for field \"address\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Educational(); ok {
		if err := doctor.EducationalValidator(v); err != nil {
			return nil, &ValidationError{Name: "educational", err: fmt.Errorf("ent: validator failed for field \"educational\": %w", err)}
		}
	}

	var (
		err  error
		node *Doctor
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DoctorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DoctorUpdateOne) SaveX(ctx context.Context) *Doctor {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DoctorUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DoctorUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DoctorUpdateOne) sqlSave(ctx context.Context) (d *Doctor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   doctor.Table,
			Columns: doctor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: doctor.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Doctor.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldName,
		})
	}
	if value, ok := duo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: doctor.FieldAge,
		})
	}
	if value, ok := duo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: doctor.FieldAge,
		})
	}
	if value, ok := duo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldEmail,
		})
	}
	if value, ok := duo.mutation.Pnumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: doctor.FieldPnumber,
		})
	}
	if value, ok := duo.mutation.AddedPnumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: doctor.FieldPnumber,
		})
	}
	if value, ok := duo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldAddress,
		})
	}
	if value, ok := duo.mutation.Educational(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctor.FieldEducational,
		})
	}
	if duo.mutation.TitleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.TitleTable,
			Columns: []string{doctor.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: title.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.TitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.TitleTable,
			Columns: []string{doctor.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: title.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.GenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.GenderTable,
			Columns: []string{doctor.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.GenderTable,
			Columns: []string{doctor.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.PositionTable,
			Columns: []string{doctor.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.PositionTable,
			Columns: []string{doctor.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.DiseaseTable,
			Columns: []string{doctor.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctor.DiseaseTable,
			Columns: []string{doctor.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := duo.mutation.RemovedDepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.DepartmentsTable,
			Columns: []string{doctor.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.DepartmentsTable,
			Columns: []string{doctor.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := duo.mutation.RemovedOfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.OfficesTable,
			Columns: []string{doctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.OfficesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.OfficesTable,
			Columns: []string{doctor.OfficesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: office.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := duo.mutation.RemovedDepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.DepartmentsTable,
			Columns: []string{doctor.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.DepartmentsTable,
			Columns: []string{doctor.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := duo.mutation.RemovedSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.SchedulesTable,
			Columns: []string{doctor.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.SchedulesTable,
			Columns: []string{doctor.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Doctor{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
